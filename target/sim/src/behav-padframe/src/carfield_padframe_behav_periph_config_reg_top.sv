// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module carfield_padframe_behav_periph_config_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 9
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output carfield_padframe_behav_periph_config_reg_pkg::carfield_padframe_behav_periph_config_reg2hw_t reg2hw, // Write


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import carfield_padframe_behav_periph_config_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [15:0] info_hw_version_qs;
  logic [15:0] info_padcount_qs;
  logic host_00_cfg_chip2pad_qs;
  logic host_00_cfg_chip2pad_wd;
  logic host_00_cfg_chip2pad_we;
  logic host_00_cfg_drv0_qs;
  logic host_00_cfg_drv0_wd;
  logic host_00_cfg_drv0_we;
  logic host_00_cfg_drv1_qs;
  logic host_00_cfg_drv1_wd;
  logic host_00_cfg_drv1_we;
  logic host_00_cfg_drv2_qs;
  logic host_00_cfg_drv2_wd;
  logic host_00_cfg_drv2_we;
  logic host_00_cfg_pde_qs;
  logic host_00_cfg_pde_wd;
  logic host_00_cfg_pde_we;
  logic host_00_cfg_pp_odrain_selector_qs;
  logic host_00_cfg_pp_odrain_selector_wd;
  logic host_00_cfg_pp_odrain_selector_we;
  logic host_00_cfg_pudis_qs;
  logic host_00_cfg_pudis_wd;
  logic host_00_cfg_pudis_we;
  logic host_00_cfg_rxdis_qs;
  logic host_00_cfg_rxdis_wd;
  logic host_00_cfg_rxdis_we;
  logic host_00_cfg_slw_pgm_qs;
  logic host_00_cfg_slw_pgm_wd;
  logic host_00_cfg_slw_pgm_we;
  logic host_00_cfg_trie_qs;
  logic host_00_cfg_trie_wd;
  logic host_00_cfg_trie_we;
  logic host_00_mux_sel_qs;
  logic host_00_mux_sel_wd;
  logic host_00_mux_sel_we;
  logic host_01_cfg_chip2pad_qs;
  logic host_01_cfg_chip2pad_wd;
  logic host_01_cfg_chip2pad_we;
  logic host_01_cfg_drv0_qs;
  logic host_01_cfg_drv0_wd;
  logic host_01_cfg_drv0_we;
  logic host_01_cfg_drv1_qs;
  logic host_01_cfg_drv1_wd;
  logic host_01_cfg_drv1_we;
  logic host_01_cfg_drv2_qs;
  logic host_01_cfg_drv2_wd;
  logic host_01_cfg_drv2_we;
  logic host_01_cfg_pde_qs;
  logic host_01_cfg_pde_wd;
  logic host_01_cfg_pde_we;
  logic host_01_cfg_pp_odrain_selector_qs;
  logic host_01_cfg_pp_odrain_selector_wd;
  logic host_01_cfg_pp_odrain_selector_we;
  logic host_01_cfg_pudis_qs;
  logic host_01_cfg_pudis_wd;
  logic host_01_cfg_pudis_we;
  logic host_01_cfg_rxdis_qs;
  logic host_01_cfg_rxdis_wd;
  logic host_01_cfg_rxdis_we;
  logic host_01_cfg_slw_pgm_qs;
  logic host_01_cfg_slw_pgm_wd;
  logic host_01_cfg_slw_pgm_we;
  logic host_01_cfg_trie_qs;
  logic host_01_cfg_trie_wd;
  logic host_01_cfg_trie_we;
  logic host_01_mux_sel_qs;
  logic host_01_mux_sel_wd;
  logic host_01_mux_sel_we;
  logic host_02_cfg_chip2pad_qs;
  logic host_02_cfg_chip2pad_wd;
  logic host_02_cfg_chip2pad_we;
  logic host_02_cfg_drv0_qs;
  logic host_02_cfg_drv0_wd;
  logic host_02_cfg_drv0_we;
  logic host_02_cfg_drv1_qs;
  logic host_02_cfg_drv1_wd;
  logic host_02_cfg_drv1_we;
  logic host_02_cfg_drv2_qs;
  logic host_02_cfg_drv2_wd;
  logic host_02_cfg_drv2_we;
  logic host_02_cfg_pde_qs;
  logic host_02_cfg_pde_wd;
  logic host_02_cfg_pde_we;
  logic host_02_cfg_pp_odrain_selector_qs;
  logic host_02_cfg_pp_odrain_selector_wd;
  logic host_02_cfg_pp_odrain_selector_we;
  logic host_02_cfg_pudis_qs;
  logic host_02_cfg_pudis_wd;
  logic host_02_cfg_pudis_we;
  logic host_02_cfg_rxdis_qs;
  logic host_02_cfg_rxdis_wd;
  logic host_02_cfg_rxdis_we;
  logic host_02_cfg_slw_pgm_qs;
  logic host_02_cfg_slw_pgm_wd;
  logic host_02_cfg_slw_pgm_we;
  logic host_02_cfg_trie_qs;
  logic host_02_cfg_trie_wd;
  logic host_02_cfg_trie_we;
  logic host_02_mux_sel_qs;
  logic host_02_mux_sel_wd;
  logic host_02_mux_sel_we;
  logic host_03_cfg_chip2pad_qs;
  logic host_03_cfg_chip2pad_wd;
  logic host_03_cfg_chip2pad_we;
  logic host_03_cfg_drv0_qs;
  logic host_03_cfg_drv0_wd;
  logic host_03_cfg_drv0_we;
  logic host_03_cfg_drv1_qs;
  logic host_03_cfg_drv1_wd;
  logic host_03_cfg_drv1_we;
  logic host_03_cfg_drv2_qs;
  logic host_03_cfg_drv2_wd;
  logic host_03_cfg_drv2_we;
  logic host_03_cfg_pde_qs;
  logic host_03_cfg_pde_wd;
  logic host_03_cfg_pde_we;
  logic host_03_cfg_pp_odrain_selector_qs;
  logic host_03_cfg_pp_odrain_selector_wd;
  logic host_03_cfg_pp_odrain_selector_we;
  logic host_03_cfg_pudis_qs;
  logic host_03_cfg_pudis_wd;
  logic host_03_cfg_pudis_we;
  logic host_03_cfg_rxdis_qs;
  logic host_03_cfg_rxdis_wd;
  logic host_03_cfg_rxdis_we;
  logic host_03_cfg_slw_pgm_qs;
  logic host_03_cfg_slw_pgm_wd;
  logic host_03_cfg_slw_pgm_we;
  logic host_03_cfg_trie_qs;
  logic host_03_cfg_trie_wd;
  logic host_03_cfg_trie_we;
  logic host_03_mux_sel_qs;
  logic host_03_mux_sel_wd;
  logic host_03_mux_sel_we;
  logic host_04_cfg_chip2pad_qs;
  logic host_04_cfg_chip2pad_wd;
  logic host_04_cfg_chip2pad_we;
  logic host_04_cfg_drv0_qs;
  logic host_04_cfg_drv0_wd;
  logic host_04_cfg_drv0_we;
  logic host_04_cfg_drv1_qs;
  logic host_04_cfg_drv1_wd;
  logic host_04_cfg_drv1_we;
  logic host_04_cfg_drv2_qs;
  logic host_04_cfg_drv2_wd;
  logic host_04_cfg_drv2_we;
  logic host_04_cfg_pde_qs;
  logic host_04_cfg_pde_wd;
  logic host_04_cfg_pde_we;
  logic host_04_cfg_pp_odrain_selector_qs;
  logic host_04_cfg_pp_odrain_selector_wd;
  logic host_04_cfg_pp_odrain_selector_we;
  logic host_04_cfg_pudis_qs;
  logic host_04_cfg_pudis_wd;
  logic host_04_cfg_pudis_we;
  logic host_04_cfg_rxdis_qs;
  logic host_04_cfg_rxdis_wd;
  logic host_04_cfg_rxdis_we;
  logic host_04_cfg_slw_pgm_qs;
  logic host_04_cfg_slw_pgm_wd;
  logic host_04_cfg_slw_pgm_we;
  logic host_04_cfg_trie_qs;
  logic host_04_cfg_trie_wd;
  logic host_04_cfg_trie_we;
  logic host_04_mux_sel_qs;
  logic host_04_mux_sel_wd;
  logic host_04_mux_sel_we;
  logic host_05_cfg_chip2pad_qs;
  logic host_05_cfg_chip2pad_wd;
  logic host_05_cfg_chip2pad_we;
  logic host_05_cfg_drv0_qs;
  logic host_05_cfg_drv0_wd;
  logic host_05_cfg_drv0_we;
  logic host_05_cfg_drv1_qs;
  logic host_05_cfg_drv1_wd;
  logic host_05_cfg_drv1_we;
  logic host_05_cfg_drv2_qs;
  logic host_05_cfg_drv2_wd;
  logic host_05_cfg_drv2_we;
  logic host_05_cfg_pde_qs;
  logic host_05_cfg_pde_wd;
  logic host_05_cfg_pde_we;
  logic host_05_cfg_pp_odrain_selector_qs;
  logic host_05_cfg_pp_odrain_selector_wd;
  logic host_05_cfg_pp_odrain_selector_we;
  logic host_05_cfg_pudis_qs;
  logic host_05_cfg_pudis_wd;
  logic host_05_cfg_pudis_we;
  logic host_05_cfg_rxdis_qs;
  logic host_05_cfg_rxdis_wd;
  logic host_05_cfg_rxdis_we;
  logic host_05_cfg_slw_pgm_qs;
  logic host_05_cfg_slw_pgm_wd;
  logic host_05_cfg_slw_pgm_we;
  logic host_05_cfg_trie_qs;
  logic host_05_cfg_trie_wd;
  logic host_05_cfg_trie_we;
  logic host_05_mux_sel_qs;
  logic host_05_mux_sel_wd;
  logic host_05_mux_sel_we;
  logic host_06_cfg_chip2pad_qs;
  logic host_06_cfg_chip2pad_wd;
  logic host_06_cfg_chip2pad_we;
  logic host_06_cfg_drv0_qs;
  logic host_06_cfg_drv0_wd;
  logic host_06_cfg_drv0_we;
  logic host_06_cfg_drv1_qs;
  logic host_06_cfg_drv1_wd;
  logic host_06_cfg_drv1_we;
  logic host_06_cfg_drv2_qs;
  logic host_06_cfg_drv2_wd;
  logic host_06_cfg_drv2_we;
  logic host_06_cfg_pde_qs;
  logic host_06_cfg_pde_wd;
  logic host_06_cfg_pde_we;
  logic host_06_cfg_pp_odrain_selector_qs;
  logic host_06_cfg_pp_odrain_selector_wd;
  logic host_06_cfg_pp_odrain_selector_we;
  logic host_06_cfg_pudis_qs;
  logic host_06_cfg_pudis_wd;
  logic host_06_cfg_pudis_we;
  logic host_06_cfg_rxdis_qs;
  logic host_06_cfg_rxdis_wd;
  logic host_06_cfg_rxdis_we;
  logic host_06_cfg_slw_pgm_qs;
  logic host_06_cfg_slw_pgm_wd;
  logic host_06_cfg_slw_pgm_we;
  logic host_06_cfg_trie_qs;
  logic host_06_cfg_trie_wd;
  logic host_06_cfg_trie_we;
  logic host_06_mux_sel_qs;
  logic host_06_mux_sel_wd;
  logic host_06_mux_sel_we;
  logic host_07_cfg_chip2pad_qs;
  logic host_07_cfg_chip2pad_wd;
  logic host_07_cfg_chip2pad_we;
  logic host_07_cfg_drv0_qs;
  logic host_07_cfg_drv0_wd;
  logic host_07_cfg_drv0_we;
  logic host_07_cfg_drv1_qs;
  logic host_07_cfg_drv1_wd;
  logic host_07_cfg_drv1_we;
  logic host_07_cfg_drv2_qs;
  logic host_07_cfg_drv2_wd;
  logic host_07_cfg_drv2_we;
  logic host_07_cfg_pde_qs;
  logic host_07_cfg_pde_wd;
  logic host_07_cfg_pde_we;
  logic host_07_cfg_pp_odrain_selector_qs;
  logic host_07_cfg_pp_odrain_selector_wd;
  logic host_07_cfg_pp_odrain_selector_we;
  logic host_07_cfg_pudis_qs;
  logic host_07_cfg_pudis_wd;
  logic host_07_cfg_pudis_we;
  logic host_07_cfg_rxdis_qs;
  logic host_07_cfg_rxdis_wd;
  logic host_07_cfg_rxdis_we;
  logic host_07_cfg_slw_pgm_qs;
  logic host_07_cfg_slw_pgm_wd;
  logic host_07_cfg_slw_pgm_we;
  logic host_07_cfg_trie_qs;
  logic host_07_cfg_trie_wd;
  logic host_07_cfg_trie_we;
  logic host_07_mux_sel_qs;
  logic host_07_mux_sel_wd;
  logic host_07_mux_sel_we;
  logic host_08_cfg_chip2pad_qs;
  logic host_08_cfg_chip2pad_wd;
  logic host_08_cfg_chip2pad_we;
  logic host_08_cfg_drv0_qs;
  logic host_08_cfg_drv0_wd;
  logic host_08_cfg_drv0_we;
  logic host_08_cfg_drv1_qs;
  logic host_08_cfg_drv1_wd;
  logic host_08_cfg_drv1_we;
  logic host_08_cfg_drv2_qs;
  logic host_08_cfg_drv2_wd;
  logic host_08_cfg_drv2_we;
  logic host_08_cfg_pde_qs;
  logic host_08_cfg_pde_wd;
  logic host_08_cfg_pde_we;
  logic host_08_cfg_pp_odrain_selector_qs;
  logic host_08_cfg_pp_odrain_selector_wd;
  logic host_08_cfg_pp_odrain_selector_we;
  logic host_08_cfg_pudis_qs;
  logic host_08_cfg_pudis_wd;
  logic host_08_cfg_pudis_we;
  logic host_08_cfg_rxdis_qs;
  logic host_08_cfg_rxdis_wd;
  logic host_08_cfg_rxdis_we;
  logic host_08_cfg_slw_pgm_qs;
  logic host_08_cfg_slw_pgm_wd;
  logic host_08_cfg_slw_pgm_we;
  logic host_08_cfg_trie_qs;
  logic host_08_cfg_trie_wd;
  logic host_08_cfg_trie_we;
  logic host_08_mux_sel_qs;
  logic host_08_mux_sel_wd;
  logic host_08_mux_sel_we;
  logic host_09_cfg_chip2pad_qs;
  logic host_09_cfg_chip2pad_wd;
  logic host_09_cfg_chip2pad_we;
  logic host_09_cfg_drv0_qs;
  logic host_09_cfg_drv0_wd;
  logic host_09_cfg_drv0_we;
  logic host_09_cfg_drv1_qs;
  logic host_09_cfg_drv1_wd;
  logic host_09_cfg_drv1_we;
  logic host_09_cfg_drv2_qs;
  logic host_09_cfg_drv2_wd;
  logic host_09_cfg_drv2_we;
  logic host_09_cfg_pde_qs;
  logic host_09_cfg_pde_wd;
  logic host_09_cfg_pde_we;
  logic host_09_cfg_pp_odrain_selector_qs;
  logic host_09_cfg_pp_odrain_selector_wd;
  logic host_09_cfg_pp_odrain_selector_we;
  logic host_09_cfg_pudis_qs;
  logic host_09_cfg_pudis_wd;
  logic host_09_cfg_pudis_we;
  logic host_09_cfg_rxdis_qs;
  logic host_09_cfg_rxdis_wd;
  logic host_09_cfg_rxdis_we;
  logic host_09_cfg_slw_pgm_qs;
  logic host_09_cfg_slw_pgm_wd;
  logic host_09_cfg_slw_pgm_we;
  logic host_09_cfg_trie_qs;
  logic host_09_cfg_trie_wd;
  logic host_09_cfg_trie_we;
  logic host_09_mux_sel_qs;
  logic host_09_mux_sel_wd;
  logic host_09_mux_sel_we;
  logic host_10_cfg_chip2pad_qs;
  logic host_10_cfg_chip2pad_wd;
  logic host_10_cfg_chip2pad_we;
  logic host_10_cfg_drv0_qs;
  logic host_10_cfg_drv0_wd;
  logic host_10_cfg_drv0_we;
  logic host_10_cfg_drv1_qs;
  logic host_10_cfg_drv1_wd;
  logic host_10_cfg_drv1_we;
  logic host_10_cfg_drv2_qs;
  logic host_10_cfg_drv2_wd;
  logic host_10_cfg_drv2_we;
  logic host_10_cfg_pde_qs;
  logic host_10_cfg_pde_wd;
  logic host_10_cfg_pde_we;
  logic host_10_cfg_pp_odrain_selector_qs;
  logic host_10_cfg_pp_odrain_selector_wd;
  logic host_10_cfg_pp_odrain_selector_we;
  logic host_10_cfg_pudis_qs;
  logic host_10_cfg_pudis_wd;
  logic host_10_cfg_pudis_we;
  logic host_10_cfg_rxdis_qs;
  logic host_10_cfg_rxdis_wd;
  logic host_10_cfg_rxdis_we;
  logic host_10_cfg_slw_pgm_qs;
  logic host_10_cfg_slw_pgm_wd;
  logic host_10_cfg_slw_pgm_we;
  logic host_10_cfg_trie_qs;
  logic host_10_cfg_trie_wd;
  logic host_10_cfg_trie_we;
  logic host_10_mux_sel_qs;
  logic host_10_mux_sel_wd;
  logic host_10_mux_sel_we;
  logic secure_00_cfg_chip2pad_qs;
  logic secure_00_cfg_chip2pad_wd;
  logic secure_00_cfg_chip2pad_we;
  logic secure_00_cfg_drv0_qs;
  logic secure_00_cfg_drv0_wd;
  logic secure_00_cfg_drv0_we;
  logic secure_00_cfg_drv1_qs;
  logic secure_00_cfg_drv1_wd;
  logic secure_00_cfg_drv1_we;
  logic secure_00_cfg_drv2_qs;
  logic secure_00_cfg_drv2_wd;
  logic secure_00_cfg_drv2_we;
  logic secure_00_cfg_pde_qs;
  logic secure_00_cfg_pde_wd;
  logic secure_00_cfg_pde_we;
  logic secure_00_cfg_pp_odrain_selector_qs;
  logic secure_00_cfg_pp_odrain_selector_wd;
  logic secure_00_cfg_pp_odrain_selector_we;
  logic secure_00_cfg_pudis_qs;
  logic secure_00_cfg_pudis_wd;
  logic secure_00_cfg_pudis_we;
  logic secure_00_cfg_rxdis_qs;
  logic secure_00_cfg_rxdis_wd;
  logic secure_00_cfg_rxdis_we;
  logic secure_00_cfg_slw_pgm_qs;
  logic secure_00_cfg_slw_pgm_wd;
  logic secure_00_cfg_slw_pgm_we;
  logic secure_00_cfg_trie_qs;
  logic secure_00_cfg_trie_wd;
  logic secure_00_cfg_trie_we;
  logic secure_00_mux_sel_qs;
  logic secure_00_mux_sel_wd;
  logic secure_00_mux_sel_we;
  logic secure_01_cfg_chip2pad_qs;
  logic secure_01_cfg_chip2pad_wd;
  logic secure_01_cfg_chip2pad_we;
  logic secure_01_cfg_drv0_qs;
  logic secure_01_cfg_drv0_wd;
  logic secure_01_cfg_drv0_we;
  logic secure_01_cfg_drv1_qs;
  logic secure_01_cfg_drv1_wd;
  logic secure_01_cfg_drv1_we;
  logic secure_01_cfg_drv2_qs;
  logic secure_01_cfg_drv2_wd;
  logic secure_01_cfg_drv2_we;
  logic secure_01_cfg_pde_qs;
  logic secure_01_cfg_pde_wd;
  logic secure_01_cfg_pde_we;
  logic secure_01_cfg_pp_odrain_selector_qs;
  logic secure_01_cfg_pp_odrain_selector_wd;
  logic secure_01_cfg_pp_odrain_selector_we;
  logic secure_01_cfg_pudis_qs;
  logic secure_01_cfg_pudis_wd;
  logic secure_01_cfg_pudis_we;
  logic secure_01_cfg_rxdis_qs;
  logic secure_01_cfg_rxdis_wd;
  logic secure_01_cfg_rxdis_we;
  logic secure_01_cfg_slw_pgm_qs;
  logic secure_01_cfg_slw_pgm_wd;
  logic secure_01_cfg_slw_pgm_we;
  logic secure_01_cfg_trie_qs;
  logic secure_01_cfg_trie_wd;
  logic secure_01_cfg_trie_we;
  logic secure_01_mux_sel_qs;
  logic secure_01_mux_sel_wd;
  logic secure_01_mux_sel_we;
  logic secure_02_cfg_chip2pad_qs;
  logic secure_02_cfg_chip2pad_wd;
  logic secure_02_cfg_chip2pad_we;
  logic secure_02_cfg_drv0_qs;
  logic secure_02_cfg_drv0_wd;
  logic secure_02_cfg_drv0_we;
  logic secure_02_cfg_drv1_qs;
  logic secure_02_cfg_drv1_wd;
  logic secure_02_cfg_drv1_we;
  logic secure_02_cfg_drv2_qs;
  logic secure_02_cfg_drv2_wd;
  logic secure_02_cfg_drv2_we;
  logic secure_02_cfg_pde_qs;
  logic secure_02_cfg_pde_wd;
  logic secure_02_cfg_pde_we;
  logic secure_02_cfg_pp_odrain_selector_qs;
  logic secure_02_cfg_pp_odrain_selector_wd;
  logic secure_02_cfg_pp_odrain_selector_we;
  logic secure_02_cfg_pudis_qs;
  logic secure_02_cfg_pudis_wd;
  logic secure_02_cfg_pudis_we;
  logic secure_02_cfg_rxdis_qs;
  logic secure_02_cfg_rxdis_wd;
  logic secure_02_cfg_rxdis_we;
  logic secure_02_cfg_slw_pgm_qs;
  logic secure_02_cfg_slw_pgm_wd;
  logic secure_02_cfg_slw_pgm_we;
  logic secure_02_cfg_trie_qs;
  logic secure_02_cfg_trie_wd;
  logic secure_02_cfg_trie_we;
  logic secure_02_mux_sel_qs;
  logic secure_02_mux_sel_wd;
  logic secure_02_mux_sel_we;
  logic secure_03_cfg_chip2pad_qs;
  logic secure_03_cfg_chip2pad_wd;
  logic secure_03_cfg_chip2pad_we;
  logic secure_03_cfg_drv0_qs;
  logic secure_03_cfg_drv0_wd;
  logic secure_03_cfg_drv0_we;
  logic secure_03_cfg_drv1_qs;
  logic secure_03_cfg_drv1_wd;
  logic secure_03_cfg_drv1_we;
  logic secure_03_cfg_drv2_qs;
  logic secure_03_cfg_drv2_wd;
  logic secure_03_cfg_drv2_we;
  logic secure_03_cfg_pde_qs;
  logic secure_03_cfg_pde_wd;
  logic secure_03_cfg_pde_we;
  logic secure_03_cfg_pp_odrain_selector_qs;
  logic secure_03_cfg_pp_odrain_selector_wd;
  logic secure_03_cfg_pp_odrain_selector_we;
  logic secure_03_cfg_pudis_qs;
  logic secure_03_cfg_pudis_wd;
  logic secure_03_cfg_pudis_we;
  logic secure_03_cfg_rxdis_qs;
  logic secure_03_cfg_rxdis_wd;
  logic secure_03_cfg_rxdis_we;
  logic secure_03_cfg_slw_pgm_qs;
  logic secure_03_cfg_slw_pgm_wd;
  logic secure_03_cfg_slw_pgm_we;
  logic secure_03_cfg_trie_qs;
  logic secure_03_cfg_trie_wd;
  logic secure_03_cfg_trie_we;
  logic secure_03_mux_sel_qs;
  logic secure_03_mux_sel_wd;
  logic secure_03_mux_sel_we;
  logic secure_04_cfg_chip2pad_qs;
  logic secure_04_cfg_chip2pad_wd;
  logic secure_04_cfg_chip2pad_we;
  logic secure_04_cfg_drv0_qs;
  logic secure_04_cfg_drv0_wd;
  logic secure_04_cfg_drv0_we;
  logic secure_04_cfg_drv1_qs;
  logic secure_04_cfg_drv1_wd;
  logic secure_04_cfg_drv1_we;
  logic secure_04_cfg_drv2_qs;
  logic secure_04_cfg_drv2_wd;
  logic secure_04_cfg_drv2_we;
  logic secure_04_cfg_pde_qs;
  logic secure_04_cfg_pde_wd;
  logic secure_04_cfg_pde_we;
  logic secure_04_cfg_pp_odrain_selector_qs;
  logic secure_04_cfg_pp_odrain_selector_wd;
  logic secure_04_cfg_pp_odrain_selector_we;
  logic secure_04_cfg_pudis_qs;
  logic secure_04_cfg_pudis_wd;
  logic secure_04_cfg_pudis_we;
  logic secure_04_cfg_rxdis_qs;
  logic secure_04_cfg_rxdis_wd;
  logic secure_04_cfg_rxdis_we;
  logic secure_04_cfg_slw_pgm_qs;
  logic secure_04_cfg_slw_pgm_wd;
  logic secure_04_cfg_slw_pgm_we;
  logic secure_04_cfg_trie_qs;
  logic secure_04_cfg_trie_wd;
  logic secure_04_cfg_trie_we;
  logic secure_04_mux_sel_qs;
  logic secure_04_mux_sel_wd;
  logic secure_04_mux_sel_we;
  logic secure_05_cfg_chip2pad_qs;
  logic secure_05_cfg_chip2pad_wd;
  logic secure_05_cfg_chip2pad_we;
  logic secure_05_cfg_drv0_qs;
  logic secure_05_cfg_drv0_wd;
  logic secure_05_cfg_drv0_we;
  logic secure_05_cfg_drv1_qs;
  logic secure_05_cfg_drv1_wd;
  logic secure_05_cfg_drv1_we;
  logic secure_05_cfg_drv2_qs;
  logic secure_05_cfg_drv2_wd;
  logic secure_05_cfg_drv2_we;
  logic secure_05_cfg_pde_qs;
  logic secure_05_cfg_pde_wd;
  logic secure_05_cfg_pde_we;
  logic secure_05_cfg_pp_odrain_selector_qs;
  logic secure_05_cfg_pp_odrain_selector_wd;
  logic secure_05_cfg_pp_odrain_selector_we;
  logic secure_05_cfg_pudis_qs;
  logic secure_05_cfg_pudis_wd;
  logic secure_05_cfg_pudis_we;
  logic secure_05_cfg_rxdis_qs;
  logic secure_05_cfg_rxdis_wd;
  logic secure_05_cfg_rxdis_we;
  logic secure_05_cfg_slw_pgm_qs;
  logic secure_05_cfg_slw_pgm_wd;
  logic secure_05_cfg_slw_pgm_we;
  logic secure_05_cfg_trie_qs;
  logic secure_05_cfg_trie_wd;
  logic secure_05_cfg_trie_we;
  logic secure_05_mux_sel_qs;
  logic secure_05_mux_sel_wd;
  logic secure_05_mux_sel_we;
  logic secure_06_cfg_chip2pad_qs;
  logic secure_06_cfg_chip2pad_wd;
  logic secure_06_cfg_chip2pad_we;
  logic secure_06_cfg_drv0_qs;
  logic secure_06_cfg_drv0_wd;
  logic secure_06_cfg_drv0_we;
  logic secure_06_cfg_drv1_qs;
  logic secure_06_cfg_drv1_wd;
  logic secure_06_cfg_drv1_we;
  logic secure_06_cfg_drv2_qs;
  logic secure_06_cfg_drv2_wd;
  logic secure_06_cfg_drv2_we;
  logic secure_06_cfg_pde_qs;
  logic secure_06_cfg_pde_wd;
  logic secure_06_cfg_pde_we;
  logic secure_06_cfg_pp_odrain_selector_qs;
  logic secure_06_cfg_pp_odrain_selector_wd;
  logic secure_06_cfg_pp_odrain_selector_we;
  logic secure_06_cfg_pudis_qs;
  logic secure_06_cfg_pudis_wd;
  logic secure_06_cfg_pudis_we;
  logic secure_06_cfg_rxdis_qs;
  logic secure_06_cfg_rxdis_wd;
  logic secure_06_cfg_rxdis_we;
  logic secure_06_cfg_slw_pgm_qs;
  logic secure_06_cfg_slw_pgm_wd;
  logic secure_06_cfg_slw_pgm_we;
  logic secure_06_cfg_trie_qs;
  logic secure_06_cfg_trie_wd;
  logic secure_06_cfg_trie_we;
  logic secure_06_mux_sel_qs;
  logic secure_06_mux_sel_wd;
  logic secure_06_mux_sel_we;
  logic secure_07_cfg_chip2pad_qs;
  logic secure_07_cfg_chip2pad_wd;
  logic secure_07_cfg_chip2pad_we;
  logic secure_07_cfg_drv0_qs;
  logic secure_07_cfg_drv0_wd;
  logic secure_07_cfg_drv0_we;
  logic secure_07_cfg_drv1_qs;
  logic secure_07_cfg_drv1_wd;
  logic secure_07_cfg_drv1_we;
  logic secure_07_cfg_drv2_qs;
  logic secure_07_cfg_drv2_wd;
  logic secure_07_cfg_drv2_we;
  logic secure_07_cfg_pde_qs;
  logic secure_07_cfg_pde_wd;
  logic secure_07_cfg_pde_we;
  logic secure_07_cfg_pp_odrain_selector_qs;
  logic secure_07_cfg_pp_odrain_selector_wd;
  logic secure_07_cfg_pp_odrain_selector_we;
  logic secure_07_cfg_pudis_qs;
  logic secure_07_cfg_pudis_wd;
  logic secure_07_cfg_pudis_we;
  logic secure_07_cfg_rxdis_qs;
  logic secure_07_cfg_rxdis_wd;
  logic secure_07_cfg_rxdis_we;
  logic secure_07_cfg_slw_pgm_qs;
  logic secure_07_cfg_slw_pgm_wd;
  logic secure_07_cfg_slw_pgm_we;
  logic secure_07_cfg_trie_qs;
  logic secure_07_cfg_trie_wd;
  logic secure_07_cfg_trie_we;
  logic secure_07_mux_sel_qs;
  logic secure_07_mux_sel_wd;
  logic secure_07_mux_sel_we;
  logic gpio_00_cfg_chip2pad_qs;
  logic gpio_00_cfg_chip2pad_wd;
  logic gpio_00_cfg_chip2pad_we;
  logic gpio_00_cfg_drv0_qs;
  logic gpio_00_cfg_drv0_wd;
  logic gpio_00_cfg_drv0_we;
  logic gpio_00_cfg_drv1_qs;
  logic gpio_00_cfg_drv1_wd;
  logic gpio_00_cfg_drv1_we;
  logic gpio_00_cfg_drv2_qs;
  logic gpio_00_cfg_drv2_wd;
  logic gpio_00_cfg_drv2_we;
  logic gpio_00_cfg_pde_qs;
  logic gpio_00_cfg_pde_wd;
  logic gpio_00_cfg_pde_we;
  logic gpio_00_cfg_pp_odrain_selector_qs;
  logic gpio_00_cfg_pp_odrain_selector_wd;
  logic gpio_00_cfg_pp_odrain_selector_we;
  logic gpio_00_cfg_pudis_qs;
  logic gpio_00_cfg_pudis_wd;
  logic gpio_00_cfg_pudis_we;
  logic gpio_00_cfg_rxdis_qs;
  logic gpio_00_cfg_rxdis_wd;
  logic gpio_00_cfg_rxdis_we;
  logic gpio_00_cfg_slw_pgm_qs;
  logic gpio_00_cfg_slw_pgm_wd;
  logic gpio_00_cfg_slw_pgm_we;
  logic gpio_00_cfg_trie_qs;
  logic gpio_00_cfg_trie_wd;
  logic gpio_00_cfg_trie_we;
  logic gpio_00_mux_sel_qs;
  logic gpio_00_mux_sel_wd;
  logic gpio_00_mux_sel_we;
  logic gpio_01_cfg_chip2pad_qs;
  logic gpio_01_cfg_chip2pad_wd;
  logic gpio_01_cfg_chip2pad_we;
  logic gpio_01_cfg_drv0_qs;
  logic gpio_01_cfg_drv0_wd;
  logic gpio_01_cfg_drv0_we;
  logic gpio_01_cfg_drv1_qs;
  logic gpio_01_cfg_drv1_wd;
  logic gpio_01_cfg_drv1_we;
  logic gpio_01_cfg_drv2_qs;
  logic gpio_01_cfg_drv2_wd;
  logic gpio_01_cfg_drv2_we;
  logic gpio_01_cfg_pde_qs;
  logic gpio_01_cfg_pde_wd;
  logic gpio_01_cfg_pde_we;
  logic gpio_01_cfg_pp_odrain_selector_qs;
  logic gpio_01_cfg_pp_odrain_selector_wd;
  logic gpio_01_cfg_pp_odrain_selector_we;
  logic gpio_01_cfg_pudis_qs;
  logic gpio_01_cfg_pudis_wd;
  logic gpio_01_cfg_pudis_we;
  logic gpio_01_cfg_rxdis_qs;
  logic gpio_01_cfg_rxdis_wd;
  logic gpio_01_cfg_rxdis_we;
  logic gpio_01_cfg_slw_pgm_qs;
  logic gpio_01_cfg_slw_pgm_wd;
  logic gpio_01_cfg_slw_pgm_we;
  logic gpio_01_cfg_trie_qs;
  logic gpio_01_cfg_trie_wd;
  logic gpio_01_cfg_trie_we;
  logic gpio_01_mux_sel_qs;
  logic gpio_01_mux_sel_wd;
  logic gpio_01_mux_sel_we;
  logic gpio_02_cfg_chip2pad_qs;
  logic gpio_02_cfg_chip2pad_wd;
  logic gpio_02_cfg_chip2pad_we;
  logic gpio_02_cfg_drv0_qs;
  logic gpio_02_cfg_drv0_wd;
  logic gpio_02_cfg_drv0_we;
  logic gpio_02_cfg_drv1_qs;
  logic gpio_02_cfg_drv1_wd;
  logic gpio_02_cfg_drv1_we;
  logic gpio_02_cfg_drv2_qs;
  logic gpio_02_cfg_drv2_wd;
  logic gpio_02_cfg_drv2_we;
  logic gpio_02_cfg_pde_qs;
  logic gpio_02_cfg_pde_wd;
  logic gpio_02_cfg_pde_we;
  logic gpio_02_cfg_pp_odrain_selector_qs;
  logic gpio_02_cfg_pp_odrain_selector_wd;
  logic gpio_02_cfg_pp_odrain_selector_we;
  logic gpio_02_cfg_pudis_qs;
  logic gpio_02_cfg_pudis_wd;
  logic gpio_02_cfg_pudis_we;
  logic gpio_02_cfg_rxdis_qs;
  logic gpio_02_cfg_rxdis_wd;
  logic gpio_02_cfg_rxdis_we;
  logic gpio_02_cfg_slw_pgm_qs;
  logic gpio_02_cfg_slw_pgm_wd;
  logic gpio_02_cfg_slw_pgm_we;
  logic gpio_02_cfg_trie_qs;
  logic gpio_02_cfg_trie_wd;
  logic gpio_02_cfg_trie_we;
  logic gpio_02_mux_sel_qs;
  logic gpio_02_mux_sel_wd;
  logic gpio_02_mux_sel_we;
  logic gpio_03_cfg_chip2pad_qs;
  logic gpio_03_cfg_chip2pad_wd;
  logic gpio_03_cfg_chip2pad_we;
  logic gpio_03_cfg_drv0_qs;
  logic gpio_03_cfg_drv0_wd;
  logic gpio_03_cfg_drv0_we;
  logic gpio_03_cfg_drv1_qs;
  logic gpio_03_cfg_drv1_wd;
  logic gpio_03_cfg_drv1_we;
  logic gpio_03_cfg_drv2_qs;
  logic gpio_03_cfg_drv2_wd;
  logic gpio_03_cfg_drv2_we;
  logic gpio_03_cfg_pde_qs;
  logic gpio_03_cfg_pde_wd;
  logic gpio_03_cfg_pde_we;
  logic gpio_03_cfg_pp_odrain_selector_qs;
  logic gpio_03_cfg_pp_odrain_selector_wd;
  logic gpio_03_cfg_pp_odrain_selector_we;
  logic gpio_03_cfg_pudis_qs;
  logic gpio_03_cfg_pudis_wd;
  logic gpio_03_cfg_pudis_we;
  logic gpio_03_cfg_rxdis_qs;
  logic gpio_03_cfg_rxdis_wd;
  logic gpio_03_cfg_rxdis_we;
  logic gpio_03_cfg_slw_pgm_qs;
  logic gpio_03_cfg_slw_pgm_wd;
  logic gpio_03_cfg_slw_pgm_we;
  logic gpio_03_cfg_trie_qs;
  logic gpio_03_cfg_trie_wd;
  logic gpio_03_cfg_trie_we;
  logic gpio_03_mux_sel_qs;
  logic gpio_03_mux_sel_wd;
  logic gpio_03_mux_sel_we;
  logic gpio_04_cfg_chip2pad_qs;
  logic gpio_04_cfg_chip2pad_wd;
  logic gpio_04_cfg_chip2pad_we;
  logic gpio_04_cfg_drv0_qs;
  logic gpio_04_cfg_drv0_wd;
  logic gpio_04_cfg_drv0_we;
  logic gpio_04_cfg_drv1_qs;
  logic gpio_04_cfg_drv1_wd;
  logic gpio_04_cfg_drv1_we;
  logic gpio_04_cfg_drv2_qs;
  logic gpio_04_cfg_drv2_wd;
  logic gpio_04_cfg_drv2_we;
  logic gpio_04_cfg_pde_qs;
  logic gpio_04_cfg_pde_wd;
  logic gpio_04_cfg_pde_we;
  logic gpio_04_cfg_pp_odrain_selector_qs;
  logic gpio_04_cfg_pp_odrain_selector_wd;
  logic gpio_04_cfg_pp_odrain_selector_we;
  logic gpio_04_cfg_pudis_qs;
  logic gpio_04_cfg_pudis_wd;
  logic gpio_04_cfg_pudis_we;
  logic gpio_04_cfg_rxdis_qs;
  logic gpio_04_cfg_rxdis_wd;
  logic gpio_04_cfg_rxdis_we;
  logic gpio_04_cfg_slw_pgm_qs;
  logic gpio_04_cfg_slw_pgm_wd;
  logic gpio_04_cfg_slw_pgm_we;
  logic gpio_04_cfg_trie_qs;
  logic gpio_04_cfg_trie_wd;
  logic gpio_04_cfg_trie_we;
  logic gpio_04_mux_sel_qs;
  logic gpio_04_mux_sel_wd;
  logic gpio_04_mux_sel_we;
  logic gpio_05_cfg_chip2pad_qs;
  logic gpio_05_cfg_chip2pad_wd;
  logic gpio_05_cfg_chip2pad_we;
  logic gpio_05_cfg_drv0_qs;
  logic gpio_05_cfg_drv0_wd;
  logic gpio_05_cfg_drv0_we;
  logic gpio_05_cfg_drv1_qs;
  logic gpio_05_cfg_drv1_wd;
  logic gpio_05_cfg_drv1_we;
  logic gpio_05_cfg_drv2_qs;
  logic gpio_05_cfg_drv2_wd;
  logic gpio_05_cfg_drv2_we;
  logic gpio_05_cfg_pde_qs;
  logic gpio_05_cfg_pde_wd;
  logic gpio_05_cfg_pde_we;
  logic gpio_05_cfg_pp_odrain_selector_qs;
  logic gpio_05_cfg_pp_odrain_selector_wd;
  logic gpio_05_cfg_pp_odrain_selector_we;
  logic gpio_05_cfg_pudis_qs;
  logic gpio_05_cfg_pudis_wd;
  logic gpio_05_cfg_pudis_we;
  logic gpio_05_cfg_rxdis_qs;
  logic gpio_05_cfg_rxdis_wd;
  logic gpio_05_cfg_rxdis_we;
  logic gpio_05_cfg_slw_pgm_qs;
  logic gpio_05_cfg_slw_pgm_wd;
  logic gpio_05_cfg_slw_pgm_we;
  logic gpio_05_cfg_trie_qs;
  logic gpio_05_cfg_trie_wd;
  logic gpio_05_cfg_trie_we;
  logic gpio_05_mux_sel_qs;
  logic gpio_05_mux_sel_wd;
  logic gpio_05_mux_sel_we;
  logic gpio_06_cfg_chip2pad_qs;
  logic gpio_06_cfg_chip2pad_wd;
  logic gpio_06_cfg_chip2pad_we;
  logic gpio_06_cfg_drv0_qs;
  logic gpio_06_cfg_drv0_wd;
  logic gpio_06_cfg_drv0_we;
  logic gpio_06_cfg_drv1_qs;
  logic gpio_06_cfg_drv1_wd;
  logic gpio_06_cfg_drv1_we;
  logic gpio_06_cfg_drv2_qs;
  logic gpio_06_cfg_drv2_wd;
  logic gpio_06_cfg_drv2_we;
  logic gpio_06_cfg_pde_qs;
  logic gpio_06_cfg_pde_wd;
  logic gpio_06_cfg_pde_we;
  logic gpio_06_cfg_pp_odrain_selector_qs;
  logic gpio_06_cfg_pp_odrain_selector_wd;
  logic gpio_06_cfg_pp_odrain_selector_we;
  logic gpio_06_cfg_pudis_qs;
  logic gpio_06_cfg_pudis_wd;
  logic gpio_06_cfg_pudis_we;
  logic gpio_06_cfg_rxdis_qs;
  logic gpio_06_cfg_rxdis_wd;
  logic gpio_06_cfg_rxdis_we;
  logic gpio_06_cfg_slw_pgm_qs;
  logic gpio_06_cfg_slw_pgm_wd;
  logic gpio_06_cfg_slw_pgm_we;
  logic gpio_06_cfg_trie_qs;
  logic gpio_06_cfg_trie_wd;
  logic gpio_06_cfg_trie_we;
  logic gpio_06_mux_sel_qs;
  logic gpio_06_mux_sel_wd;
  logic gpio_06_mux_sel_we;
  logic gpio_07_cfg_chip2pad_qs;
  logic gpio_07_cfg_chip2pad_wd;
  logic gpio_07_cfg_chip2pad_we;
  logic gpio_07_cfg_drv0_qs;
  logic gpio_07_cfg_drv0_wd;
  logic gpio_07_cfg_drv0_we;
  logic gpio_07_cfg_drv1_qs;
  logic gpio_07_cfg_drv1_wd;
  logic gpio_07_cfg_drv1_we;
  logic gpio_07_cfg_drv2_qs;
  logic gpio_07_cfg_drv2_wd;
  logic gpio_07_cfg_drv2_we;
  logic gpio_07_cfg_pde_qs;
  logic gpio_07_cfg_pde_wd;
  logic gpio_07_cfg_pde_we;
  logic gpio_07_cfg_pp_odrain_selector_qs;
  logic gpio_07_cfg_pp_odrain_selector_wd;
  logic gpio_07_cfg_pp_odrain_selector_we;
  logic gpio_07_cfg_pudis_qs;
  logic gpio_07_cfg_pudis_wd;
  logic gpio_07_cfg_pudis_we;
  logic gpio_07_cfg_rxdis_qs;
  logic gpio_07_cfg_rxdis_wd;
  logic gpio_07_cfg_rxdis_we;
  logic gpio_07_cfg_slw_pgm_qs;
  logic gpio_07_cfg_slw_pgm_wd;
  logic gpio_07_cfg_slw_pgm_we;
  logic gpio_07_cfg_trie_qs;
  logic gpio_07_cfg_trie_wd;
  logic gpio_07_cfg_trie_we;
  logic gpio_07_mux_sel_qs;
  logic gpio_07_mux_sel_wd;
  logic gpio_07_mux_sel_we;
  logic gpio_08_cfg_chip2pad_qs;
  logic gpio_08_cfg_chip2pad_wd;
  logic gpio_08_cfg_chip2pad_we;
  logic gpio_08_cfg_drv0_qs;
  logic gpio_08_cfg_drv0_wd;
  logic gpio_08_cfg_drv0_we;
  logic gpio_08_cfg_drv1_qs;
  logic gpio_08_cfg_drv1_wd;
  logic gpio_08_cfg_drv1_we;
  logic gpio_08_cfg_drv2_qs;
  logic gpio_08_cfg_drv2_wd;
  logic gpio_08_cfg_drv2_we;
  logic gpio_08_cfg_pde_qs;
  logic gpio_08_cfg_pde_wd;
  logic gpio_08_cfg_pde_we;
  logic gpio_08_cfg_pp_odrain_selector_qs;
  logic gpio_08_cfg_pp_odrain_selector_wd;
  logic gpio_08_cfg_pp_odrain_selector_we;
  logic gpio_08_cfg_pudis_qs;
  logic gpio_08_cfg_pudis_wd;
  logic gpio_08_cfg_pudis_we;
  logic gpio_08_cfg_rxdis_qs;
  logic gpio_08_cfg_rxdis_wd;
  logic gpio_08_cfg_rxdis_we;
  logic gpio_08_cfg_slw_pgm_qs;
  logic gpio_08_cfg_slw_pgm_wd;
  logic gpio_08_cfg_slw_pgm_we;
  logic gpio_08_cfg_trie_qs;
  logic gpio_08_cfg_trie_wd;
  logic gpio_08_cfg_trie_we;
  logic gpio_08_mux_sel_qs;
  logic gpio_08_mux_sel_wd;
  logic gpio_08_mux_sel_we;
  logic gpio_09_cfg_chip2pad_qs;
  logic gpio_09_cfg_chip2pad_wd;
  logic gpio_09_cfg_chip2pad_we;
  logic gpio_09_cfg_drv0_qs;
  logic gpio_09_cfg_drv0_wd;
  logic gpio_09_cfg_drv0_we;
  logic gpio_09_cfg_drv1_qs;
  logic gpio_09_cfg_drv1_wd;
  logic gpio_09_cfg_drv1_we;
  logic gpio_09_cfg_drv2_qs;
  logic gpio_09_cfg_drv2_wd;
  logic gpio_09_cfg_drv2_we;
  logic gpio_09_cfg_pde_qs;
  logic gpio_09_cfg_pde_wd;
  logic gpio_09_cfg_pde_we;
  logic gpio_09_cfg_pp_odrain_selector_qs;
  logic gpio_09_cfg_pp_odrain_selector_wd;
  logic gpio_09_cfg_pp_odrain_selector_we;
  logic gpio_09_cfg_pudis_qs;
  logic gpio_09_cfg_pudis_wd;
  logic gpio_09_cfg_pudis_we;
  logic gpio_09_cfg_rxdis_qs;
  logic gpio_09_cfg_rxdis_wd;
  logic gpio_09_cfg_rxdis_we;
  logic gpio_09_cfg_slw_pgm_qs;
  logic gpio_09_cfg_slw_pgm_wd;
  logic gpio_09_cfg_slw_pgm_we;
  logic gpio_09_cfg_trie_qs;
  logic gpio_09_cfg_trie_wd;
  logic gpio_09_cfg_trie_we;
  logic gpio_09_mux_sel_qs;
  logic gpio_09_mux_sel_wd;
  logic gpio_09_mux_sel_we;
  logic gpio_10_cfg_chip2pad_qs;
  logic gpio_10_cfg_chip2pad_wd;
  logic gpio_10_cfg_chip2pad_we;
  logic gpio_10_cfg_drv0_qs;
  logic gpio_10_cfg_drv0_wd;
  logic gpio_10_cfg_drv0_we;
  logic gpio_10_cfg_drv1_qs;
  logic gpio_10_cfg_drv1_wd;
  logic gpio_10_cfg_drv1_we;
  logic gpio_10_cfg_drv2_qs;
  logic gpio_10_cfg_drv2_wd;
  logic gpio_10_cfg_drv2_we;
  logic gpio_10_cfg_pde_qs;
  logic gpio_10_cfg_pde_wd;
  logic gpio_10_cfg_pde_we;
  logic gpio_10_cfg_pp_odrain_selector_qs;
  logic gpio_10_cfg_pp_odrain_selector_wd;
  logic gpio_10_cfg_pp_odrain_selector_we;
  logic gpio_10_cfg_pudis_qs;
  logic gpio_10_cfg_pudis_wd;
  logic gpio_10_cfg_pudis_we;
  logic gpio_10_cfg_rxdis_qs;
  logic gpio_10_cfg_rxdis_wd;
  logic gpio_10_cfg_rxdis_we;
  logic gpio_10_cfg_slw_pgm_qs;
  logic gpio_10_cfg_slw_pgm_wd;
  logic gpio_10_cfg_slw_pgm_we;
  logic gpio_10_cfg_trie_qs;
  logic gpio_10_cfg_trie_wd;
  logic gpio_10_cfg_trie_we;
  logic gpio_10_mux_sel_qs;
  logic gpio_10_mux_sel_wd;
  logic gpio_10_mux_sel_we;
  logic gpio_11_cfg_chip2pad_qs;
  logic gpio_11_cfg_chip2pad_wd;
  logic gpio_11_cfg_chip2pad_we;
  logic gpio_11_cfg_drv0_qs;
  logic gpio_11_cfg_drv0_wd;
  logic gpio_11_cfg_drv0_we;
  logic gpio_11_cfg_drv1_qs;
  logic gpio_11_cfg_drv1_wd;
  logic gpio_11_cfg_drv1_we;
  logic gpio_11_cfg_drv2_qs;
  logic gpio_11_cfg_drv2_wd;
  logic gpio_11_cfg_drv2_we;
  logic gpio_11_cfg_pde_qs;
  logic gpio_11_cfg_pde_wd;
  logic gpio_11_cfg_pde_we;
  logic gpio_11_cfg_pp_odrain_selector_qs;
  logic gpio_11_cfg_pp_odrain_selector_wd;
  logic gpio_11_cfg_pp_odrain_selector_we;
  logic gpio_11_cfg_pudis_qs;
  logic gpio_11_cfg_pudis_wd;
  logic gpio_11_cfg_pudis_we;
  logic gpio_11_cfg_rxdis_qs;
  logic gpio_11_cfg_rxdis_wd;
  logic gpio_11_cfg_rxdis_we;
  logic gpio_11_cfg_slw_pgm_qs;
  logic gpio_11_cfg_slw_pgm_wd;
  logic gpio_11_cfg_slw_pgm_we;
  logic gpio_11_cfg_trie_qs;
  logic gpio_11_cfg_trie_wd;
  logic gpio_11_cfg_trie_we;
  logic gpio_11_mux_sel_qs;
  logic gpio_11_mux_sel_wd;
  logic gpio_11_mux_sel_we;
  logic gpio_12_cfg_chip2pad_qs;
  logic gpio_12_cfg_chip2pad_wd;
  logic gpio_12_cfg_chip2pad_we;
  logic gpio_12_cfg_drv0_qs;
  logic gpio_12_cfg_drv0_wd;
  logic gpio_12_cfg_drv0_we;
  logic gpio_12_cfg_drv1_qs;
  logic gpio_12_cfg_drv1_wd;
  logic gpio_12_cfg_drv1_we;
  logic gpio_12_cfg_drv2_qs;
  logic gpio_12_cfg_drv2_wd;
  logic gpio_12_cfg_drv2_we;
  logic gpio_12_cfg_pde_qs;
  logic gpio_12_cfg_pde_wd;
  logic gpio_12_cfg_pde_we;
  logic gpio_12_cfg_pp_odrain_selector_qs;
  logic gpio_12_cfg_pp_odrain_selector_wd;
  logic gpio_12_cfg_pp_odrain_selector_we;
  logic gpio_12_cfg_pudis_qs;
  logic gpio_12_cfg_pudis_wd;
  logic gpio_12_cfg_pudis_we;
  logic gpio_12_cfg_rxdis_qs;
  logic gpio_12_cfg_rxdis_wd;
  logic gpio_12_cfg_rxdis_we;
  logic gpio_12_cfg_slw_pgm_qs;
  logic gpio_12_cfg_slw_pgm_wd;
  logic gpio_12_cfg_slw_pgm_we;
  logic gpio_12_cfg_trie_qs;
  logic gpio_12_cfg_trie_wd;
  logic gpio_12_cfg_trie_we;
  logic gpio_12_mux_sel_qs;
  logic gpio_12_mux_sel_wd;
  logic gpio_12_mux_sel_we;
  logic gpio_13_cfg_chip2pad_qs;
  logic gpio_13_cfg_chip2pad_wd;
  logic gpio_13_cfg_chip2pad_we;
  logic gpio_13_cfg_drv0_qs;
  logic gpio_13_cfg_drv0_wd;
  logic gpio_13_cfg_drv0_we;
  logic gpio_13_cfg_drv1_qs;
  logic gpio_13_cfg_drv1_wd;
  logic gpio_13_cfg_drv1_we;
  logic gpio_13_cfg_drv2_qs;
  logic gpio_13_cfg_drv2_wd;
  logic gpio_13_cfg_drv2_we;
  logic gpio_13_cfg_pde_qs;
  logic gpio_13_cfg_pde_wd;
  logic gpio_13_cfg_pde_we;
  logic gpio_13_cfg_pp_odrain_selector_qs;
  logic gpio_13_cfg_pp_odrain_selector_wd;
  logic gpio_13_cfg_pp_odrain_selector_we;
  logic gpio_13_cfg_pudis_qs;
  logic gpio_13_cfg_pudis_wd;
  logic gpio_13_cfg_pudis_we;
  logic gpio_13_cfg_rxdis_qs;
  logic gpio_13_cfg_rxdis_wd;
  logic gpio_13_cfg_rxdis_we;
  logic gpio_13_cfg_slw_pgm_qs;
  logic gpio_13_cfg_slw_pgm_wd;
  logic gpio_13_cfg_slw_pgm_we;
  logic gpio_13_cfg_trie_qs;
  logic gpio_13_cfg_trie_wd;
  logic gpio_13_cfg_trie_we;
  logic gpio_13_mux_sel_qs;
  logic gpio_13_mux_sel_wd;
  logic gpio_13_mux_sel_we;
  logic gpio_14_cfg_chip2pad_qs;
  logic gpio_14_cfg_chip2pad_wd;
  logic gpio_14_cfg_chip2pad_we;
  logic gpio_14_cfg_drv0_qs;
  logic gpio_14_cfg_drv0_wd;
  logic gpio_14_cfg_drv0_we;
  logic gpio_14_cfg_drv1_qs;
  logic gpio_14_cfg_drv1_wd;
  logic gpio_14_cfg_drv1_we;
  logic gpio_14_cfg_drv2_qs;
  logic gpio_14_cfg_drv2_wd;
  logic gpio_14_cfg_drv2_we;
  logic gpio_14_cfg_pde_qs;
  logic gpio_14_cfg_pde_wd;
  logic gpio_14_cfg_pde_we;
  logic gpio_14_cfg_pp_odrain_selector_qs;
  logic gpio_14_cfg_pp_odrain_selector_wd;
  logic gpio_14_cfg_pp_odrain_selector_we;
  logic gpio_14_cfg_pudis_qs;
  logic gpio_14_cfg_pudis_wd;
  logic gpio_14_cfg_pudis_we;
  logic gpio_14_cfg_rxdis_qs;
  logic gpio_14_cfg_rxdis_wd;
  logic gpio_14_cfg_rxdis_we;
  logic gpio_14_cfg_slw_pgm_qs;
  logic gpio_14_cfg_slw_pgm_wd;
  logic gpio_14_cfg_slw_pgm_we;
  logic gpio_14_cfg_trie_qs;
  logic gpio_14_cfg_trie_wd;
  logic gpio_14_cfg_trie_we;
  logic gpio_14_mux_sel_qs;
  logic gpio_14_mux_sel_wd;
  logic gpio_14_mux_sel_we;
  logic gpio_15_cfg_chip2pad_qs;
  logic gpio_15_cfg_chip2pad_wd;
  logic gpio_15_cfg_chip2pad_we;
  logic gpio_15_cfg_drv0_qs;
  logic gpio_15_cfg_drv0_wd;
  logic gpio_15_cfg_drv0_we;
  logic gpio_15_cfg_drv1_qs;
  logic gpio_15_cfg_drv1_wd;
  logic gpio_15_cfg_drv1_we;
  logic gpio_15_cfg_drv2_qs;
  logic gpio_15_cfg_drv2_wd;
  logic gpio_15_cfg_drv2_we;
  logic gpio_15_cfg_pde_qs;
  logic gpio_15_cfg_pde_wd;
  logic gpio_15_cfg_pde_we;
  logic gpio_15_cfg_pp_odrain_selector_qs;
  logic gpio_15_cfg_pp_odrain_selector_wd;
  logic gpio_15_cfg_pp_odrain_selector_we;
  logic gpio_15_cfg_pudis_qs;
  logic gpio_15_cfg_pudis_wd;
  logic gpio_15_cfg_pudis_we;
  logic gpio_15_cfg_rxdis_qs;
  logic gpio_15_cfg_rxdis_wd;
  logic gpio_15_cfg_rxdis_we;
  logic gpio_15_cfg_slw_pgm_qs;
  logic gpio_15_cfg_slw_pgm_wd;
  logic gpio_15_cfg_slw_pgm_we;
  logic gpio_15_cfg_trie_qs;
  logic gpio_15_cfg_trie_wd;
  logic gpio_15_cfg_trie_we;
  logic gpio_15_mux_sel_qs;
  logic gpio_15_mux_sel_wd;
  logic gpio_15_mux_sel_we;
  logic periph_00_cfg_chip2pad_qs;
  logic periph_00_cfg_chip2pad_wd;
  logic periph_00_cfg_chip2pad_we;
  logic periph_00_cfg_drv0_qs;
  logic periph_00_cfg_drv0_wd;
  logic periph_00_cfg_drv0_we;
  logic periph_00_cfg_drv1_qs;
  logic periph_00_cfg_drv1_wd;
  logic periph_00_cfg_drv1_we;
  logic periph_00_cfg_drv2_qs;
  logic periph_00_cfg_drv2_wd;
  logic periph_00_cfg_drv2_we;
  logic periph_00_cfg_pde_qs;
  logic periph_00_cfg_pde_wd;
  logic periph_00_cfg_pde_we;
  logic periph_00_cfg_pp_odrain_selector_qs;
  logic periph_00_cfg_pp_odrain_selector_wd;
  logic periph_00_cfg_pp_odrain_selector_we;
  logic periph_00_cfg_pudis_qs;
  logic periph_00_cfg_pudis_wd;
  logic periph_00_cfg_pudis_we;
  logic periph_00_cfg_rxdis_qs;
  logic periph_00_cfg_rxdis_wd;
  logic periph_00_cfg_rxdis_we;
  logic periph_00_cfg_slw_pgm_qs;
  logic periph_00_cfg_slw_pgm_wd;
  logic periph_00_cfg_slw_pgm_we;
  logic periph_00_cfg_trie_qs;
  logic periph_00_cfg_trie_wd;
  logic periph_00_cfg_trie_we;
  logic periph_00_mux_sel_qs;
  logic periph_00_mux_sel_wd;
  logic periph_00_mux_sel_we;
  logic periph_01_cfg_chip2pad_qs;
  logic periph_01_cfg_chip2pad_wd;
  logic periph_01_cfg_chip2pad_we;
  logic periph_01_cfg_drv0_qs;
  logic periph_01_cfg_drv0_wd;
  logic periph_01_cfg_drv0_we;
  logic periph_01_cfg_drv1_qs;
  logic periph_01_cfg_drv1_wd;
  logic periph_01_cfg_drv1_we;
  logic periph_01_cfg_drv2_qs;
  logic periph_01_cfg_drv2_wd;
  logic periph_01_cfg_drv2_we;
  logic periph_01_cfg_pde_qs;
  logic periph_01_cfg_pde_wd;
  logic periph_01_cfg_pde_we;
  logic periph_01_cfg_pp_odrain_selector_qs;
  logic periph_01_cfg_pp_odrain_selector_wd;
  logic periph_01_cfg_pp_odrain_selector_we;
  logic periph_01_cfg_pudis_qs;
  logic periph_01_cfg_pudis_wd;
  logic periph_01_cfg_pudis_we;
  logic periph_01_cfg_rxdis_qs;
  logic periph_01_cfg_rxdis_wd;
  logic periph_01_cfg_rxdis_we;
  logic periph_01_cfg_slw_pgm_qs;
  logic periph_01_cfg_slw_pgm_wd;
  logic periph_01_cfg_slw_pgm_we;
  logic periph_01_cfg_trie_qs;
  logic periph_01_cfg_trie_wd;
  logic periph_01_cfg_trie_we;
  logic periph_01_mux_sel_qs;
  logic periph_01_mux_sel_wd;
  logic periph_01_mux_sel_we;
  logic periph_02_cfg_chip2pad_qs;
  logic periph_02_cfg_chip2pad_wd;
  logic periph_02_cfg_chip2pad_we;
  logic periph_02_cfg_drv0_qs;
  logic periph_02_cfg_drv0_wd;
  logic periph_02_cfg_drv0_we;
  logic periph_02_cfg_drv1_qs;
  logic periph_02_cfg_drv1_wd;
  logic periph_02_cfg_drv1_we;
  logic periph_02_cfg_drv2_qs;
  logic periph_02_cfg_drv2_wd;
  logic periph_02_cfg_drv2_we;
  logic periph_02_cfg_pde_qs;
  logic periph_02_cfg_pde_wd;
  logic periph_02_cfg_pde_we;
  logic periph_02_cfg_pp_odrain_selector_qs;
  logic periph_02_cfg_pp_odrain_selector_wd;
  logic periph_02_cfg_pp_odrain_selector_we;
  logic periph_02_cfg_pudis_qs;
  logic periph_02_cfg_pudis_wd;
  logic periph_02_cfg_pudis_we;
  logic periph_02_cfg_rxdis_qs;
  logic periph_02_cfg_rxdis_wd;
  logic periph_02_cfg_rxdis_we;
  logic periph_02_cfg_slw_pgm_qs;
  logic periph_02_cfg_slw_pgm_wd;
  logic periph_02_cfg_slw_pgm_we;
  logic periph_02_cfg_trie_qs;
  logic periph_02_cfg_trie_wd;
  logic periph_02_cfg_trie_we;
  logic periph_02_mux_sel_qs;
  logic periph_02_mux_sel_wd;
  logic periph_02_mux_sel_we;
  logic periph_03_cfg_chip2pad_qs;
  logic periph_03_cfg_chip2pad_wd;
  logic periph_03_cfg_chip2pad_we;
  logic periph_03_cfg_drv0_qs;
  logic periph_03_cfg_drv0_wd;
  logic periph_03_cfg_drv0_we;
  logic periph_03_cfg_drv1_qs;
  logic periph_03_cfg_drv1_wd;
  logic periph_03_cfg_drv1_we;
  logic periph_03_cfg_drv2_qs;
  logic periph_03_cfg_drv2_wd;
  logic periph_03_cfg_drv2_we;
  logic periph_03_cfg_pde_qs;
  logic periph_03_cfg_pde_wd;
  logic periph_03_cfg_pde_we;
  logic periph_03_cfg_pp_odrain_selector_qs;
  logic periph_03_cfg_pp_odrain_selector_wd;
  logic periph_03_cfg_pp_odrain_selector_we;
  logic periph_03_cfg_pudis_qs;
  logic periph_03_cfg_pudis_wd;
  logic periph_03_cfg_pudis_we;
  logic periph_03_cfg_rxdis_qs;
  logic periph_03_cfg_rxdis_wd;
  logic periph_03_cfg_rxdis_we;
  logic periph_03_cfg_slw_pgm_qs;
  logic periph_03_cfg_slw_pgm_wd;
  logic periph_03_cfg_slw_pgm_we;
  logic periph_03_cfg_trie_qs;
  logic periph_03_cfg_trie_wd;
  logic periph_03_cfg_trie_we;
  logic periph_03_mux_sel_qs;
  logic periph_03_mux_sel_wd;
  logic periph_03_mux_sel_we;
  logic periph_04_cfg_chip2pad_qs;
  logic periph_04_cfg_chip2pad_wd;
  logic periph_04_cfg_chip2pad_we;
  logic periph_04_cfg_drv0_qs;
  logic periph_04_cfg_drv0_wd;
  logic periph_04_cfg_drv0_we;
  logic periph_04_cfg_drv1_qs;
  logic periph_04_cfg_drv1_wd;
  logic periph_04_cfg_drv1_we;
  logic periph_04_cfg_drv2_qs;
  logic periph_04_cfg_drv2_wd;
  logic periph_04_cfg_drv2_we;
  logic periph_04_cfg_pde_qs;
  logic periph_04_cfg_pde_wd;
  logic periph_04_cfg_pde_we;
  logic periph_04_cfg_pp_odrain_selector_qs;
  logic periph_04_cfg_pp_odrain_selector_wd;
  logic periph_04_cfg_pp_odrain_selector_we;
  logic periph_04_cfg_pudis_qs;
  logic periph_04_cfg_pudis_wd;
  logic periph_04_cfg_pudis_we;
  logic periph_04_cfg_rxdis_qs;
  logic periph_04_cfg_rxdis_wd;
  logic periph_04_cfg_rxdis_we;
  logic periph_04_cfg_slw_pgm_qs;
  logic periph_04_cfg_slw_pgm_wd;
  logic periph_04_cfg_slw_pgm_we;
  logic periph_04_cfg_trie_qs;
  logic periph_04_cfg_trie_wd;
  logic periph_04_cfg_trie_we;
  logic periph_04_mux_sel_qs;
  logic periph_04_mux_sel_wd;
  logic periph_04_mux_sel_we;
  logic periph_05_cfg_chip2pad_qs;
  logic periph_05_cfg_chip2pad_wd;
  logic periph_05_cfg_chip2pad_we;
  logic periph_05_cfg_drv0_qs;
  logic periph_05_cfg_drv0_wd;
  logic periph_05_cfg_drv0_we;
  logic periph_05_cfg_drv1_qs;
  logic periph_05_cfg_drv1_wd;
  logic periph_05_cfg_drv1_we;
  logic periph_05_cfg_drv2_qs;
  logic periph_05_cfg_drv2_wd;
  logic periph_05_cfg_drv2_we;
  logic periph_05_cfg_pde_qs;
  logic periph_05_cfg_pde_wd;
  logic periph_05_cfg_pde_we;
  logic periph_05_cfg_pp_odrain_selector_qs;
  logic periph_05_cfg_pp_odrain_selector_wd;
  logic periph_05_cfg_pp_odrain_selector_we;
  logic periph_05_cfg_pudis_qs;
  logic periph_05_cfg_pudis_wd;
  logic periph_05_cfg_pudis_we;
  logic periph_05_cfg_rxdis_qs;
  logic periph_05_cfg_rxdis_wd;
  logic periph_05_cfg_rxdis_we;
  logic periph_05_cfg_slw_pgm_qs;
  logic periph_05_cfg_slw_pgm_wd;
  logic periph_05_cfg_slw_pgm_we;
  logic periph_05_cfg_trie_qs;
  logic periph_05_cfg_trie_wd;
  logic periph_05_cfg_trie_we;
  logic periph_05_mux_sel_qs;
  logic periph_05_mux_sel_wd;
  logic periph_05_mux_sel_we;
  logic periph_06_cfg_chip2pad_qs;
  logic periph_06_cfg_chip2pad_wd;
  logic periph_06_cfg_chip2pad_we;
  logic periph_06_cfg_drv0_qs;
  logic periph_06_cfg_drv0_wd;
  logic periph_06_cfg_drv0_we;
  logic periph_06_cfg_drv1_qs;
  logic periph_06_cfg_drv1_wd;
  logic periph_06_cfg_drv1_we;
  logic periph_06_cfg_drv2_qs;
  logic periph_06_cfg_drv2_wd;
  logic periph_06_cfg_drv2_we;
  logic periph_06_cfg_pde_qs;
  logic periph_06_cfg_pde_wd;
  logic periph_06_cfg_pde_we;
  logic periph_06_cfg_pp_odrain_selector_qs;
  logic periph_06_cfg_pp_odrain_selector_wd;
  logic periph_06_cfg_pp_odrain_selector_we;
  logic periph_06_cfg_pudis_qs;
  logic periph_06_cfg_pudis_wd;
  logic periph_06_cfg_pudis_we;
  logic periph_06_cfg_rxdis_qs;
  logic periph_06_cfg_rxdis_wd;
  logic periph_06_cfg_rxdis_we;
  logic periph_06_cfg_slw_pgm_qs;
  logic periph_06_cfg_slw_pgm_wd;
  logic periph_06_cfg_slw_pgm_we;
  logic periph_06_cfg_trie_qs;
  logic periph_06_cfg_trie_wd;
  logic periph_06_cfg_trie_we;
  logic periph_06_mux_sel_qs;
  logic periph_06_mux_sel_wd;
  logic periph_06_mux_sel_we;
  logic periph_07_cfg_chip2pad_qs;
  logic periph_07_cfg_chip2pad_wd;
  logic periph_07_cfg_chip2pad_we;
  logic periph_07_cfg_drv0_qs;
  logic periph_07_cfg_drv0_wd;
  logic periph_07_cfg_drv0_we;
  logic periph_07_cfg_drv1_qs;
  logic periph_07_cfg_drv1_wd;
  logic periph_07_cfg_drv1_we;
  logic periph_07_cfg_drv2_qs;
  logic periph_07_cfg_drv2_wd;
  logic periph_07_cfg_drv2_we;
  logic periph_07_cfg_pde_qs;
  logic periph_07_cfg_pde_wd;
  logic periph_07_cfg_pde_we;
  logic periph_07_cfg_pp_odrain_selector_qs;
  logic periph_07_cfg_pp_odrain_selector_wd;
  logic periph_07_cfg_pp_odrain_selector_we;
  logic periph_07_cfg_pudis_qs;
  logic periph_07_cfg_pudis_wd;
  logic periph_07_cfg_pudis_we;
  logic periph_07_cfg_rxdis_qs;
  logic periph_07_cfg_rxdis_wd;
  logic periph_07_cfg_rxdis_we;
  logic periph_07_cfg_slw_pgm_qs;
  logic periph_07_cfg_slw_pgm_wd;
  logic periph_07_cfg_slw_pgm_we;
  logic periph_07_cfg_trie_qs;
  logic periph_07_cfg_trie_wd;
  logic periph_07_cfg_trie_we;
  logic periph_07_mux_sel_qs;
  logic periph_07_mux_sel_wd;
  logic periph_07_mux_sel_we;
  logic periph_08_cfg_chip2pad_qs;
  logic periph_08_cfg_chip2pad_wd;
  logic periph_08_cfg_chip2pad_we;
  logic periph_08_cfg_drv0_qs;
  logic periph_08_cfg_drv0_wd;
  logic periph_08_cfg_drv0_we;
  logic periph_08_cfg_drv1_qs;
  logic periph_08_cfg_drv1_wd;
  logic periph_08_cfg_drv1_we;
  logic periph_08_cfg_drv2_qs;
  logic periph_08_cfg_drv2_wd;
  logic periph_08_cfg_drv2_we;
  logic periph_08_cfg_pde_qs;
  logic periph_08_cfg_pde_wd;
  logic periph_08_cfg_pde_we;
  logic periph_08_cfg_pp_odrain_selector_qs;
  logic periph_08_cfg_pp_odrain_selector_wd;
  logic periph_08_cfg_pp_odrain_selector_we;
  logic periph_08_cfg_pudis_qs;
  logic periph_08_cfg_pudis_wd;
  logic periph_08_cfg_pudis_we;
  logic periph_08_cfg_rxdis_qs;
  logic periph_08_cfg_rxdis_wd;
  logic periph_08_cfg_rxdis_we;
  logic periph_08_cfg_slw_pgm_qs;
  logic periph_08_cfg_slw_pgm_wd;
  logic periph_08_cfg_slw_pgm_we;
  logic periph_08_cfg_trie_qs;
  logic periph_08_cfg_trie_wd;
  logic periph_08_cfg_trie_we;
  logic periph_08_mux_sel_qs;
  logic periph_08_mux_sel_wd;
  logic periph_08_mux_sel_we;
  logic periph_09_cfg_chip2pad_qs;
  logic periph_09_cfg_chip2pad_wd;
  logic periph_09_cfg_chip2pad_we;
  logic periph_09_cfg_drv0_qs;
  logic periph_09_cfg_drv0_wd;
  logic periph_09_cfg_drv0_we;
  logic periph_09_cfg_drv1_qs;
  logic periph_09_cfg_drv1_wd;
  logic periph_09_cfg_drv1_we;
  logic periph_09_cfg_drv2_qs;
  logic periph_09_cfg_drv2_wd;
  logic periph_09_cfg_drv2_we;
  logic periph_09_cfg_pde_qs;
  logic periph_09_cfg_pde_wd;
  logic periph_09_cfg_pde_we;
  logic periph_09_cfg_pp_odrain_selector_qs;
  logic periph_09_cfg_pp_odrain_selector_wd;
  logic periph_09_cfg_pp_odrain_selector_we;
  logic periph_09_cfg_pudis_qs;
  logic periph_09_cfg_pudis_wd;
  logic periph_09_cfg_pudis_we;
  logic periph_09_cfg_rxdis_qs;
  logic periph_09_cfg_rxdis_wd;
  logic periph_09_cfg_rxdis_we;
  logic periph_09_cfg_slw_pgm_qs;
  logic periph_09_cfg_slw_pgm_wd;
  logic periph_09_cfg_slw_pgm_we;
  logic periph_09_cfg_trie_qs;
  logic periph_09_cfg_trie_wd;
  logic periph_09_cfg_trie_we;
  logic periph_09_mux_sel_qs;
  logic periph_09_mux_sel_wd;
  logic periph_09_mux_sel_we;
  logic periph_10_cfg_chip2pad_qs;
  logic periph_10_cfg_chip2pad_wd;
  logic periph_10_cfg_chip2pad_we;
  logic periph_10_cfg_drv0_qs;
  logic periph_10_cfg_drv0_wd;
  logic periph_10_cfg_drv0_we;
  logic periph_10_cfg_drv1_qs;
  logic periph_10_cfg_drv1_wd;
  logic periph_10_cfg_drv1_we;
  logic periph_10_cfg_drv2_qs;
  logic periph_10_cfg_drv2_wd;
  logic periph_10_cfg_drv2_we;
  logic periph_10_cfg_pde_qs;
  logic periph_10_cfg_pde_wd;
  logic periph_10_cfg_pde_we;
  logic periph_10_cfg_pp_odrain_selector_qs;
  logic periph_10_cfg_pp_odrain_selector_wd;
  logic periph_10_cfg_pp_odrain_selector_we;
  logic periph_10_cfg_pudis_qs;
  logic periph_10_cfg_pudis_wd;
  logic periph_10_cfg_pudis_we;
  logic periph_10_cfg_rxdis_qs;
  logic periph_10_cfg_rxdis_wd;
  logic periph_10_cfg_rxdis_we;
  logic periph_10_cfg_slw_pgm_qs;
  logic periph_10_cfg_slw_pgm_wd;
  logic periph_10_cfg_slw_pgm_we;
  logic periph_10_cfg_trie_qs;
  logic periph_10_cfg_trie_wd;
  logic periph_10_cfg_trie_we;
  logic periph_10_mux_sel_qs;
  logic periph_10_mux_sel_wd;
  logic periph_10_mux_sel_we;
  logic periph_11_cfg_chip2pad_qs;
  logic periph_11_cfg_chip2pad_wd;
  logic periph_11_cfg_chip2pad_we;
  logic periph_11_cfg_drv0_qs;
  logic periph_11_cfg_drv0_wd;
  logic periph_11_cfg_drv0_we;
  logic periph_11_cfg_drv1_qs;
  logic periph_11_cfg_drv1_wd;
  logic periph_11_cfg_drv1_we;
  logic periph_11_cfg_drv2_qs;
  logic periph_11_cfg_drv2_wd;
  logic periph_11_cfg_drv2_we;
  logic periph_11_cfg_pde_qs;
  logic periph_11_cfg_pde_wd;
  logic periph_11_cfg_pde_we;
  logic periph_11_cfg_pp_odrain_selector_qs;
  logic periph_11_cfg_pp_odrain_selector_wd;
  logic periph_11_cfg_pp_odrain_selector_we;
  logic periph_11_cfg_pudis_qs;
  logic periph_11_cfg_pudis_wd;
  logic periph_11_cfg_pudis_we;
  logic periph_11_cfg_rxdis_qs;
  logic periph_11_cfg_rxdis_wd;
  logic periph_11_cfg_rxdis_we;
  logic periph_11_cfg_slw_pgm_qs;
  logic periph_11_cfg_slw_pgm_wd;
  logic periph_11_cfg_slw_pgm_we;
  logic periph_11_cfg_trie_qs;
  logic periph_11_cfg_trie_wd;
  logic periph_11_cfg_trie_we;
  logic periph_11_mux_sel_qs;
  logic periph_11_mux_sel_wd;
  logic periph_11_mux_sel_we;
  logic periph_12_cfg_chip2pad_qs;
  logic periph_12_cfg_chip2pad_wd;
  logic periph_12_cfg_chip2pad_we;
  logic periph_12_cfg_drv0_qs;
  logic periph_12_cfg_drv0_wd;
  logic periph_12_cfg_drv0_we;
  logic periph_12_cfg_drv1_qs;
  logic periph_12_cfg_drv1_wd;
  logic periph_12_cfg_drv1_we;
  logic periph_12_cfg_drv2_qs;
  logic periph_12_cfg_drv2_wd;
  logic periph_12_cfg_drv2_we;
  logic periph_12_cfg_pde_qs;
  logic periph_12_cfg_pde_wd;
  logic periph_12_cfg_pde_we;
  logic periph_12_cfg_pp_odrain_selector_qs;
  logic periph_12_cfg_pp_odrain_selector_wd;
  logic periph_12_cfg_pp_odrain_selector_we;
  logic periph_12_cfg_pudis_qs;
  logic periph_12_cfg_pudis_wd;
  logic periph_12_cfg_pudis_we;
  logic periph_12_cfg_rxdis_qs;
  logic periph_12_cfg_rxdis_wd;
  logic periph_12_cfg_rxdis_we;
  logic periph_12_cfg_slw_pgm_qs;
  logic periph_12_cfg_slw_pgm_wd;
  logic periph_12_cfg_slw_pgm_we;
  logic periph_12_cfg_trie_qs;
  logic periph_12_cfg_trie_wd;
  logic periph_12_cfg_trie_we;
  logic periph_12_mux_sel_qs;
  logic periph_12_mux_sel_wd;
  logic periph_12_mux_sel_we;
  logic periph_13_cfg_chip2pad_qs;
  logic periph_13_cfg_chip2pad_wd;
  logic periph_13_cfg_chip2pad_we;
  logic periph_13_cfg_drv0_qs;
  logic periph_13_cfg_drv0_wd;
  logic periph_13_cfg_drv0_we;
  logic periph_13_cfg_drv1_qs;
  logic periph_13_cfg_drv1_wd;
  logic periph_13_cfg_drv1_we;
  logic periph_13_cfg_drv2_qs;
  logic periph_13_cfg_drv2_wd;
  logic periph_13_cfg_drv2_we;
  logic periph_13_cfg_pde_qs;
  logic periph_13_cfg_pde_wd;
  logic periph_13_cfg_pde_we;
  logic periph_13_cfg_pp_odrain_selector_qs;
  logic periph_13_cfg_pp_odrain_selector_wd;
  logic periph_13_cfg_pp_odrain_selector_we;
  logic periph_13_cfg_pudis_qs;
  logic periph_13_cfg_pudis_wd;
  logic periph_13_cfg_pudis_we;
  logic periph_13_cfg_rxdis_qs;
  logic periph_13_cfg_rxdis_wd;
  logic periph_13_cfg_rxdis_we;
  logic periph_13_cfg_slw_pgm_qs;
  logic periph_13_cfg_slw_pgm_wd;
  logic periph_13_cfg_slw_pgm_we;
  logic periph_13_cfg_trie_qs;
  logic periph_13_cfg_trie_wd;
  logic periph_13_cfg_trie_we;
  logic periph_13_mux_sel_qs;
  logic periph_13_mux_sel_wd;
  logic periph_13_mux_sel_we;
  logic periph_14_cfg_chip2pad_qs;
  logic periph_14_cfg_chip2pad_wd;
  logic periph_14_cfg_chip2pad_we;
  logic periph_14_cfg_drv0_qs;
  logic periph_14_cfg_drv0_wd;
  logic periph_14_cfg_drv0_we;
  logic periph_14_cfg_drv1_qs;
  logic periph_14_cfg_drv1_wd;
  logic periph_14_cfg_drv1_we;
  logic periph_14_cfg_drv2_qs;
  logic periph_14_cfg_drv2_wd;
  logic periph_14_cfg_drv2_we;
  logic periph_14_cfg_pde_qs;
  logic periph_14_cfg_pde_wd;
  logic periph_14_cfg_pde_we;
  logic periph_14_cfg_pp_odrain_selector_qs;
  logic periph_14_cfg_pp_odrain_selector_wd;
  logic periph_14_cfg_pp_odrain_selector_we;
  logic periph_14_cfg_pudis_qs;
  logic periph_14_cfg_pudis_wd;
  logic periph_14_cfg_pudis_we;
  logic periph_14_cfg_rxdis_qs;
  logic periph_14_cfg_rxdis_wd;
  logic periph_14_cfg_rxdis_we;
  logic periph_14_cfg_slw_pgm_qs;
  logic periph_14_cfg_slw_pgm_wd;
  logic periph_14_cfg_slw_pgm_we;
  logic periph_14_cfg_trie_qs;
  logic periph_14_cfg_trie_wd;
  logic periph_14_cfg_trie_we;
  logic periph_14_mux_sel_qs;
  logic periph_14_mux_sel_wd;
  logic periph_14_mux_sel_we;
  logic periph_15_cfg_chip2pad_qs;
  logic periph_15_cfg_chip2pad_wd;
  logic periph_15_cfg_chip2pad_we;
  logic periph_15_cfg_drv0_qs;
  logic periph_15_cfg_drv0_wd;
  logic periph_15_cfg_drv0_we;
  logic periph_15_cfg_drv1_qs;
  logic periph_15_cfg_drv1_wd;
  logic periph_15_cfg_drv1_we;
  logic periph_15_cfg_drv2_qs;
  logic periph_15_cfg_drv2_wd;
  logic periph_15_cfg_drv2_we;
  logic periph_15_cfg_pde_qs;
  logic periph_15_cfg_pde_wd;
  logic periph_15_cfg_pde_we;
  logic periph_15_cfg_pp_odrain_selector_qs;
  logic periph_15_cfg_pp_odrain_selector_wd;
  logic periph_15_cfg_pp_odrain_selector_we;
  logic periph_15_cfg_pudis_qs;
  logic periph_15_cfg_pudis_wd;
  logic periph_15_cfg_pudis_we;
  logic periph_15_cfg_rxdis_qs;
  logic periph_15_cfg_rxdis_wd;
  logic periph_15_cfg_rxdis_we;
  logic periph_15_cfg_slw_pgm_qs;
  logic periph_15_cfg_slw_pgm_wd;
  logic periph_15_cfg_slw_pgm_we;
  logic periph_15_cfg_trie_qs;
  logic periph_15_cfg_trie_wd;
  logic periph_15_cfg_trie_we;
  logic periph_15_mux_sel_qs;
  logic periph_15_mux_sel_wd;
  logic periph_15_mux_sel_we;
  logic periph_16_cfg_chip2pad_qs;
  logic periph_16_cfg_chip2pad_wd;
  logic periph_16_cfg_chip2pad_we;
  logic periph_16_cfg_drv0_qs;
  logic periph_16_cfg_drv0_wd;
  logic periph_16_cfg_drv0_we;
  logic periph_16_cfg_drv1_qs;
  logic periph_16_cfg_drv1_wd;
  logic periph_16_cfg_drv1_we;
  logic periph_16_cfg_drv2_qs;
  logic periph_16_cfg_drv2_wd;
  logic periph_16_cfg_drv2_we;
  logic periph_16_cfg_pde_qs;
  logic periph_16_cfg_pde_wd;
  logic periph_16_cfg_pde_we;
  logic periph_16_cfg_pp_odrain_selector_qs;
  logic periph_16_cfg_pp_odrain_selector_wd;
  logic periph_16_cfg_pp_odrain_selector_we;
  logic periph_16_cfg_pudis_qs;
  logic periph_16_cfg_pudis_wd;
  logic periph_16_cfg_pudis_we;
  logic periph_16_cfg_rxdis_qs;
  logic periph_16_cfg_rxdis_wd;
  logic periph_16_cfg_rxdis_we;
  logic periph_16_cfg_slw_pgm_qs;
  logic periph_16_cfg_slw_pgm_wd;
  logic periph_16_cfg_slw_pgm_we;
  logic periph_16_cfg_trie_qs;
  logic periph_16_cfg_trie_wd;
  logic periph_16_cfg_trie_we;
  logic periph_16_mux_sel_qs;
  logic periph_16_mux_sel_wd;
  logic periph_16_mux_sel_we;
  logic debug_out0_cfg_chip2pad_qs;
  logic debug_out0_cfg_chip2pad_wd;
  logic debug_out0_cfg_chip2pad_we;
  logic debug_out0_cfg_drv0_qs;
  logic debug_out0_cfg_drv0_wd;
  logic debug_out0_cfg_drv0_we;
  logic debug_out0_cfg_drv1_qs;
  logic debug_out0_cfg_drv1_wd;
  logic debug_out0_cfg_drv1_we;
  logic debug_out0_cfg_drv2_qs;
  logic debug_out0_cfg_drv2_wd;
  logic debug_out0_cfg_drv2_we;
  logic debug_out0_cfg_pde_qs;
  logic debug_out0_cfg_pde_wd;
  logic debug_out0_cfg_pde_we;
  logic debug_out0_cfg_pp_odrain_selector_qs;
  logic debug_out0_cfg_pp_odrain_selector_wd;
  logic debug_out0_cfg_pp_odrain_selector_we;
  logic debug_out0_cfg_pudis_qs;
  logic debug_out0_cfg_pudis_wd;
  logic debug_out0_cfg_pudis_we;
  logic debug_out0_cfg_rxdis_qs;
  logic debug_out0_cfg_rxdis_wd;
  logic debug_out0_cfg_rxdis_we;
  logic debug_out0_cfg_slw_pgm_qs;
  logic debug_out0_cfg_slw_pgm_wd;
  logic debug_out0_cfg_slw_pgm_we;
  logic debug_out0_cfg_trie_qs;
  logic debug_out0_cfg_trie_wd;
  logic debug_out0_cfg_trie_we;
  logic [4:0] debug_out0_mux_sel_qs;
  logic [4:0] debug_out0_mux_sel_wd;
  logic debug_out0_mux_sel_we;
  logic debug_out1_cfg_chip2pad_qs;
  logic debug_out1_cfg_chip2pad_wd;
  logic debug_out1_cfg_chip2pad_we;
  logic debug_out1_cfg_drv0_qs;
  logic debug_out1_cfg_drv0_wd;
  logic debug_out1_cfg_drv0_we;
  logic debug_out1_cfg_drv1_qs;
  logic debug_out1_cfg_drv1_wd;
  logic debug_out1_cfg_drv1_we;
  logic debug_out1_cfg_drv2_qs;
  logic debug_out1_cfg_drv2_wd;
  logic debug_out1_cfg_drv2_we;
  logic debug_out1_cfg_pde_qs;
  logic debug_out1_cfg_pde_wd;
  logic debug_out1_cfg_pde_we;
  logic debug_out1_cfg_pp_odrain_selector_qs;
  logic debug_out1_cfg_pp_odrain_selector_wd;
  logic debug_out1_cfg_pp_odrain_selector_we;
  logic debug_out1_cfg_pudis_qs;
  logic debug_out1_cfg_pudis_wd;
  logic debug_out1_cfg_pudis_we;
  logic debug_out1_cfg_rxdis_qs;
  logic debug_out1_cfg_rxdis_wd;
  logic debug_out1_cfg_rxdis_we;
  logic debug_out1_cfg_slw_pgm_qs;
  logic debug_out1_cfg_slw_pgm_wd;
  logic debug_out1_cfg_slw_pgm_we;
  logic debug_out1_cfg_trie_qs;
  logic debug_out1_cfg_trie_wd;
  logic debug_out1_cfg_trie_we;
  logic [4:0] debug_out1_mux_sel_qs;
  logic [4:0] debug_out1_mux_sel_wd;
  logic debug_out1_mux_sel_we;
  logic debug_out2_cfg_chip2pad_qs;
  logic debug_out2_cfg_chip2pad_wd;
  logic debug_out2_cfg_chip2pad_we;
  logic debug_out2_cfg_drv0_qs;
  logic debug_out2_cfg_drv0_wd;
  logic debug_out2_cfg_drv0_we;
  logic debug_out2_cfg_drv1_qs;
  logic debug_out2_cfg_drv1_wd;
  logic debug_out2_cfg_drv1_we;
  logic debug_out2_cfg_drv2_qs;
  logic debug_out2_cfg_drv2_wd;
  logic debug_out2_cfg_drv2_we;
  logic debug_out2_cfg_pde_qs;
  logic debug_out2_cfg_pde_wd;
  logic debug_out2_cfg_pde_we;
  logic debug_out2_cfg_pp_odrain_selector_qs;
  logic debug_out2_cfg_pp_odrain_selector_wd;
  logic debug_out2_cfg_pp_odrain_selector_we;
  logic debug_out2_cfg_pudis_qs;
  logic debug_out2_cfg_pudis_wd;
  logic debug_out2_cfg_pudis_we;
  logic debug_out2_cfg_rxdis_qs;
  logic debug_out2_cfg_rxdis_wd;
  logic debug_out2_cfg_rxdis_we;
  logic debug_out2_cfg_slw_pgm_qs;
  logic debug_out2_cfg_slw_pgm_wd;
  logic debug_out2_cfg_slw_pgm_we;
  logic debug_out2_cfg_trie_qs;
  logic debug_out2_cfg_trie_wd;
  logic debug_out2_cfg_trie_we;
  logic [4:0] debug_out2_mux_sel_qs;
  logic [4:0] debug_out2_mux_sel_wd;
  logic debug_out2_mux_sel_we;
  logic debug_out3_cfg_chip2pad_qs;
  logic debug_out3_cfg_chip2pad_wd;
  logic debug_out3_cfg_chip2pad_we;
  logic debug_out3_cfg_drv0_qs;
  logic debug_out3_cfg_drv0_wd;
  logic debug_out3_cfg_drv0_we;
  logic debug_out3_cfg_drv1_qs;
  logic debug_out3_cfg_drv1_wd;
  logic debug_out3_cfg_drv1_we;
  logic debug_out3_cfg_drv2_qs;
  logic debug_out3_cfg_drv2_wd;
  logic debug_out3_cfg_drv2_we;
  logic debug_out3_cfg_pde_qs;
  logic debug_out3_cfg_pde_wd;
  logic debug_out3_cfg_pde_we;
  logic debug_out3_cfg_pp_odrain_selector_qs;
  logic debug_out3_cfg_pp_odrain_selector_wd;
  logic debug_out3_cfg_pp_odrain_selector_we;
  logic debug_out3_cfg_pudis_qs;
  logic debug_out3_cfg_pudis_wd;
  logic debug_out3_cfg_pudis_we;
  logic debug_out3_cfg_rxdis_qs;
  logic debug_out3_cfg_rxdis_wd;
  logic debug_out3_cfg_rxdis_we;
  logic debug_out3_cfg_slw_pgm_qs;
  logic debug_out3_cfg_slw_pgm_wd;
  logic debug_out3_cfg_slw_pgm_we;
  logic debug_out3_cfg_trie_qs;
  logic debug_out3_cfg_trie_wd;
  logic debug_out3_cfg_trie_we;
  logic [4:0] debug_out3_mux_sel_qs;
  logic [4:0] debug_out3_mux_sel_wd;
  logic debug_out3_mux_sel_we;
  logic debug_out4_cfg_chip2pad_qs;
  logic debug_out4_cfg_chip2pad_wd;
  logic debug_out4_cfg_chip2pad_we;
  logic debug_out4_cfg_drv0_qs;
  logic debug_out4_cfg_drv0_wd;
  logic debug_out4_cfg_drv0_we;
  logic debug_out4_cfg_drv1_qs;
  logic debug_out4_cfg_drv1_wd;
  logic debug_out4_cfg_drv1_we;
  logic debug_out4_cfg_drv2_qs;
  logic debug_out4_cfg_drv2_wd;
  logic debug_out4_cfg_drv2_we;
  logic debug_out4_cfg_pde_qs;
  logic debug_out4_cfg_pde_wd;
  logic debug_out4_cfg_pde_we;
  logic debug_out4_cfg_pp_odrain_selector_qs;
  logic debug_out4_cfg_pp_odrain_selector_wd;
  logic debug_out4_cfg_pp_odrain_selector_we;
  logic debug_out4_cfg_pudis_qs;
  logic debug_out4_cfg_pudis_wd;
  logic debug_out4_cfg_pudis_we;
  logic debug_out4_cfg_rxdis_qs;
  logic debug_out4_cfg_rxdis_wd;
  logic debug_out4_cfg_rxdis_we;
  logic debug_out4_cfg_slw_pgm_qs;
  logic debug_out4_cfg_slw_pgm_wd;
  logic debug_out4_cfg_slw_pgm_we;
  logic debug_out4_cfg_trie_qs;
  logic debug_out4_cfg_trie_wd;
  logic debug_out4_cfg_trie_we;
  logic [4:0] debug_out4_mux_sel_qs;
  logic [4:0] debug_out4_mux_sel_wd;
  logic debug_out4_mux_sel_we;
  logic jtag_pll_00_cfg_chip2pad_qs;
  logic jtag_pll_00_cfg_chip2pad_wd;
  logic jtag_pll_00_cfg_chip2pad_we;
  logic jtag_pll_00_cfg_drv0_qs;
  logic jtag_pll_00_cfg_drv0_wd;
  logic jtag_pll_00_cfg_drv0_we;
  logic jtag_pll_00_cfg_drv1_qs;
  logic jtag_pll_00_cfg_drv1_wd;
  logic jtag_pll_00_cfg_drv1_we;
  logic jtag_pll_00_cfg_drv2_qs;
  logic jtag_pll_00_cfg_drv2_wd;
  logic jtag_pll_00_cfg_drv2_we;
  logic jtag_pll_00_cfg_pde_qs;
  logic jtag_pll_00_cfg_pde_wd;
  logic jtag_pll_00_cfg_pde_we;
  logic jtag_pll_00_cfg_pp_odrain_selector_qs;
  logic jtag_pll_00_cfg_pp_odrain_selector_wd;
  logic jtag_pll_00_cfg_pp_odrain_selector_we;
  logic jtag_pll_00_cfg_pudis_qs;
  logic jtag_pll_00_cfg_pudis_wd;
  logic jtag_pll_00_cfg_pudis_we;
  logic jtag_pll_00_cfg_rxdis_qs;
  logic jtag_pll_00_cfg_rxdis_wd;
  logic jtag_pll_00_cfg_rxdis_we;
  logic jtag_pll_00_cfg_slw_pgm_qs;
  logic jtag_pll_00_cfg_slw_pgm_wd;
  logic jtag_pll_00_cfg_slw_pgm_we;
  logic jtag_pll_00_cfg_trie_qs;
  logic jtag_pll_00_cfg_trie_wd;
  logic jtag_pll_00_cfg_trie_we;
  logic [1:0] jtag_pll_00_mux_sel_qs;
  logic [1:0] jtag_pll_00_mux_sel_wd;
  logic jtag_pll_00_mux_sel_we;
  logic jtag_pll_01_cfg_chip2pad_qs;
  logic jtag_pll_01_cfg_chip2pad_wd;
  logic jtag_pll_01_cfg_chip2pad_we;
  logic jtag_pll_01_cfg_drv0_qs;
  logic jtag_pll_01_cfg_drv0_wd;
  logic jtag_pll_01_cfg_drv0_we;
  logic jtag_pll_01_cfg_drv1_qs;
  logic jtag_pll_01_cfg_drv1_wd;
  logic jtag_pll_01_cfg_drv1_we;
  logic jtag_pll_01_cfg_drv2_qs;
  logic jtag_pll_01_cfg_drv2_wd;
  logic jtag_pll_01_cfg_drv2_we;
  logic jtag_pll_01_cfg_pde_qs;
  logic jtag_pll_01_cfg_pde_wd;
  logic jtag_pll_01_cfg_pde_we;
  logic jtag_pll_01_cfg_pp_odrain_selector_qs;
  logic jtag_pll_01_cfg_pp_odrain_selector_wd;
  logic jtag_pll_01_cfg_pp_odrain_selector_we;
  logic jtag_pll_01_cfg_pudis_qs;
  logic jtag_pll_01_cfg_pudis_wd;
  logic jtag_pll_01_cfg_pudis_we;
  logic jtag_pll_01_cfg_rxdis_qs;
  logic jtag_pll_01_cfg_rxdis_wd;
  logic jtag_pll_01_cfg_rxdis_we;
  logic jtag_pll_01_cfg_slw_pgm_qs;
  logic jtag_pll_01_cfg_slw_pgm_wd;
  logic jtag_pll_01_cfg_slw_pgm_we;
  logic jtag_pll_01_cfg_trie_qs;
  logic jtag_pll_01_cfg_trie_wd;
  logic jtag_pll_01_cfg_trie_we;
  logic [1:0] jtag_pll_01_mux_sel_qs;
  logic [1:0] jtag_pll_01_mux_sel_wd;
  logic jtag_pll_01_mux_sel_we;
  logic jtag_pll_02_cfg_chip2pad_qs;
  logic jtag_pll_02_cfg_chip2pad_wd;
  logic jtag_pll_02_cfg_chip2pad_we;
  logic jtag_pll_02_cfg_drv0_qs;
  logic jtag_pll_02_cfg_drv0_wd;
  logic jtag_pll_02_cfg_drv0_we;
  logic jtag_pll_02_cfg_drv1_qs;
  logic jtag_pll_02_cfg_drv1_wd;
  logic jtag_pll_02_cfg_drv1_we;
  logic jtag_pll_02_cfg_drv2_qs;
  logic jtag_pll_02_cfg_drv2_wd;
  logic jtag_pll_02_cfg_drv2_we;
  logic jtag_pll_02_cfg_pde_qs;
  logic jtag_pll_02_cfg_pde_wd;
  logic jtag_pll_02_cfg_pde_we;
  logic jtag_pll_02_cfg_pp_odrain_selector_qs;
  logic jtag_pll_02_cfg_pp_odrain_selector_wd;
  logic jtag_pll_02_cfg_pp_odrain_selector_we;
  logic jtag_pll_02_cfg_pudis_qs;
  logic jtag_pll_02_cfg_pudis_wd;
  logic jtag_pll_02_cfg_pudis_we;
  logic jtag_pll_02_cfg_rxdis_qs;
  logic jtag_pll_02_cfg_rxdis_wd;
  logic jtag_pll_02_cfg_rxdis_we;
  logic jtag_pll_02_cfg_slw_pgm_qs;
  logic jtag_pll_02_cfg_slw_pgm_wd;
  logic jtag_pll_02_cfg_slw_pgm_we;
  logic jtag_pll_02_cfg_trie_qs;
  logic jtag_pll_02_cfg_trie_wd;
  logic jtag_pll_02_cfg_trie_we;
  logic [1:0] jtag_pll_02_mux_sel_qs;
  logic [1:0] jtag_pll_02_mux_sel_wd;
  logic jtag_pll_02_mux_sel_we;
  logic jtag_pll_03_cfg_chip2pad_qs;
  logic jtag_pll_03_cfg_chip2pad_wd;
  logic jtag_pll_03_cfg_chip2pad_we;
  logic jtag_pll_03_cfg_drv0_qs;
  logic jtag_pll_03_cfg_drv0_wd;
  logic jtag_pll_03_cfg_drv0_we;
  logic jtag_pll_03_cfg_drv1_qs;
  logic jtag_pll_03_cfg_drv1_wd;
  logic jtag_pll_03_cfg_drv1_we;
  logic jtag_pll_03_cfg_drv2_qs;
  logic jtag_pll_03_cfg_drv2_wd;
  logic jtag_pll_03_cfg_drv2_we;
  logic jtag_pll_03_cfg_pde_qs;
  logic jtag_pll_03_cfg_pde_wd;
  logic jtag_pll_03_cfg_pde_we;
  logic jtag_pll_03_cfg_pp_odrain_selector_qs;
  logic jtag_pll_03_cfg_pp_odrain_selector_wd;
  logic jtag_pll_03_cfg_pp_odrain_selector_we;
  logic jtag_pll_03_cfg_pudis_qs;
  logic jtag_pll_03_cfg_pudis_wd;
  logic jtag_pll_03_cfg_pudis_we;
  logic jtag_pll_03_cfg_rxdis_qs;
  logic jtag_pll_03_cfg_rxdis_wd;
  logic jtag_pll_03_cfg_rxdis_we;
  logic jtag_pll_03_cfg_slw_pgm_qs;
  logic jtag_pll_03_cfg_slw_pgm_wd;
  logic jtag_pll_03_cfg_slw_pgm_we;
  logic jtag_pll_03_cfg_trie_qs;
  logic jtag_pll_03_cfg_trie_wd;
  logic jtag_pll_03_cfg_trie_we;
  logic [1:0] jtag_pll_03_mux_sel_qs;
  logic [1:0] jtag_pll_03_mux_sel_wd;
  logic jtag_pll_03_mux_sel_we;
  logic jtag_pll_04_cfg_chip2pad_qs;
  logic jtag_pll_04_cfg_chip2pad_wd;
  logic jtag_pll_04_cfg_chip2pad_we;
  logic jtag_pll_04_cfg_drv0_qs;
  logic jtag_pll_04_cfg_drv0_wd;
  logic jtag_pll_04_cfg_drv0_we;
  logic jtag_pll_04_cfg_drv1_qs;
  logic jtag_pll_04_cfg_drv1_wd;
  logic jtag_pll_04_cfg_drv1_we;
  logic jtag_pll_04_cfg_drv2_qs;
  logic jtag_pll_04_cfg_drv2_wd;
  logic jtag_pll_04_cfg_drv2_we;
  logic jtag_pll_04_cfg_pde_qs;
  logic jtag_pll_04_cfg_pde_wd;
  logic jtag_pll_04_cfg_pde_we;
  logic jtag_pll_04_cfg_pp_odrain_selector_qs;
  logic jtag_pll_04_cfg_pp_odrain_selector_wd;
  logic jtag_pll_04_cfg_pp_odrain_selector_we;
  logic jtag_pll_04_cfg_pudis_qs;
  logic jtag_pll_04_cfg_pudis_wd;
  logic jtag_pll_04_cfg_pudis_we;
  logic jtag_pll_04_cfg_rxdis_qs;
  logic jtag_pll_04_cfg_rxdis_wd;
  logic jtag_pll_04_cfg_rxdis_we;
  logic jtag_pll_04_cfg_slw_pgm_qs;
  logic jtag_pll_04_cfg_slw_pgm_wd;
  logic jtag_pll_04_cfg_slw_pgm_we;
  logic jtag_pll_04_cfg_trie_qs;
  logic jtag_pll_04_cfg_trie_wd;
  logic jtag_pll_04_cfg_trie_we;
  logic [1:0] jtag_pll_04_mux_sel_qs;
  logic [1:0] jtag_pll_04_mux_sel_wd;
  logic jtag_pll_04_mux_sel_we;

  // Register instances
  // R[info]: V(False)

  //   F[hw_version]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RO"),
    .RESVAL  (16'h2)
  ) u_info_hw_version (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.info.hw_version.q ),

    // to register interface (read)
    .qs     (info_hw_version_qs)
  );


  //   F[padcount]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RO"),
    .RESVAL  (16'h3e)
  ) u_info_padcount (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.info.padcount.q ),

    // to register interface (read)
    .qs     (info_padcount_qs)
  );


  // R[host_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_00_cfg_chip2pad_we),
    .wd     (host_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (host_00_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_00_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_00_cfg_drv0_we),
    .wd     (host_00_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_00_cfg.drv0.q ),

    // to register interface (read)
    .qs     (host_00_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_00_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_00_cfg_drv1_we),
    .wd     (host_00_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_00_cfg.drv1.q ),

    // to register interface (read)
    .qs     (host_00_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_00_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_00_cfg_drv2_we),
    .wd     (host_00_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_00_cfg.drv2.q ),

    // to register interface (read)
    .qs     (host_00_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_00_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_00_cfg_pde_we),
    .wd     (host_00_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_00_cfg.pde.q ),

    // to register interface (read)
    .qs     (host_00_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_00_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_00_cfg_pp_odrain_selector_we),
    .wd     (host_00_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_00_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (host_00_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_00_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_00_cfg_pudis_we),
    .wd     (host_00_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_00_cfg.pudis.q ),

    // to register interface (read)
    .qs     (host_00_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_00_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_00_cfg_rxdis_we),
    .wd     (host_00_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_00_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (host_00_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_00_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_00_cfg_slw_pgm_we),
    .wd     (host_00_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_00_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (host_00_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_00_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_00_cfg_trie_we),
    .wd     (host_00_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_00_cfg.trie.q ),

    // to register interface (read)
    .qs     (host_00_cfg_trie_qs)
  );


  // R[host_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_00_mux_sel_we),
    .wd     (host_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_00_mux_sel.q ),

    // to register interface (read)
    .qs     (host_00_mux_sel_qs)
  );


  // R[host_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_01_cfg_chip2pad_we),
    .wd     (host_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (host_01_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_01_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_01_cfg_drv0_we),
    .wd     (host_01_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_01_cfg.drv0.q ),

    // to register interface (read)
    .qs     (host_01_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_01_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_01_cfg_drv1_we),
    .wd     (host_01_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_01_cfg.drv1.q ),

    // to register interface (read)
    .qs     (host_01_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_01_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_01_cfg_drv2_we),
    .wd     (host_01_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_01_cfg.drv2.q ),

    // to register interface (read)
    .qs     (host_01_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_01_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_01_cfg_pde_we),
    .wd     (host_01_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_01_cfg.pde.q ),

    // to register interface (read)
    .qs     (host_01_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_01_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_01_cfg_pp_odrain_selector_we),
    .wd     (host_01_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_01_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (host_01_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_01_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_01_cfg_pudis_we),
    .wd     (host_01_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_01_cfg.pudis.q ),

    // to register interface (read)
    .qs     (host_01_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_01_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_01_cfg_rxdis_we),
    .wd     (host_01_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_01_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (host_01_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_01_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_01_cfg_slw_pgm_we),
    .wd     (host_01_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_01_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (host_01_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_01_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_01_cfg_trie_we),
    .wd     (host_01_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_01_cfg.trie.q ),

    // to register interface (read)
    .qs     (host_01_cfg_trie_qs)
  );


  // R[host_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_01_mux_sel_we),
    .wd     (host_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_01_mux_sel.q ),

    // to register interface (read)
    .qs     (host_01_mux_sel_qs)
  );


  // R[host_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_02_cfg_chip2pad_we),
    .wd     (host_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (host_02_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_02_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_02_cfg_drv0_we),
    .wd     (host_02_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_02_cfg.drv0.q ),

    // to register interface (read)
    .qs     (host_02_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_02_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_02_cfg_drv1_we),
    .wd     (host_02_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_02_cfg.drv1.q ),

    // to register interface (read)
    .qs     (host_02_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_02_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_02_cfg_drv2_we),
    .wd     (host_02_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_02_cfg.drv2.q ),

    // to register interface (read)
    .qs     (host_02_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_02_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_02_cfg_pde_we),
    .wd     (host_02_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_02_cfg.pde.q ),

    // to register interface (read)
    .qs     (host_02_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_02_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_02_cfg_pp_odrain_selector_we),
    .wd     (host_02_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_02_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (host_02_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_02_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_02_cfg_pudis_we),
    .wd     (host_02_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_02_cfg.pudis.q ),

    // to register interface (read)
    .qs     (host_02_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_02_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_02_cfg_rxdis_we),
    .wd     (host_02_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_02_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (host_02_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_02_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_02_cfg_slw_pgm_we),
    .wd     (host_02_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_02_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (host_02_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_02_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_02_cfg_trie_we),
    .wd     (host_02_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_02_cfg.trie.q ),

    // to register interface (read)
    .qs     (host_02_cfg_trie_qs)
  );


  // R[host_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_02_mux_sel_we),
    .wd     (host_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_02_mux_sel.q ),

    // to register interface (read)
    .qs     (host_02_mux_sel_qs)
  );


  // R[host_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_03_cfg_chip2pad_we),
    .wd     (host_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (host_03_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_03_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_03_cfg_drv0_we),
    .wd     (host_03_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_03_cfg.drv0.q ),

    // to register interface (read)
    .qs     (host_03_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_03_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_03_cfg_drv1_we),
    .wd     (host_03_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_03_cfg.drv1.q ),

    // to register interface (read)
    .qs     (host_03_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_03_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_03_cfg_drv2_we),
    .wd     (host_03_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_03_cfg.drv2.q ),

    // to register interface (read)
    .qs     (host_03_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_03_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_03_cfg_pde_we),
    .wd     (host_03_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_03_cfg.pde.q ),

    // to register interface (read)
    .qs     (host_03_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_03_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_03_cfg_pp_odrain_selector_we),
    .wd     (host_03_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_03_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (host_03_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_03_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_03_cfg_pudis_we),
    .wd     (host_03_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_03_cfg.pudis.q ),

    // to register interface (read)
    .qs     (host_03_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_03_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_03_cfg_rxdis_we),
    .wd     (host_03_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_03_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (host_03_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_03_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_03_cfg_slw_pgm_we),
    .wd     (host_03_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_03_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (host_03_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_03_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_03_cfg_trie_we),
    .wd     (host_03_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_03_cfg.trie.q ),

    // to register interface (read)
    .qs     (host_03_cfg_trie_qs)
  );


  // R[host_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_03_mux_sel_we),
    .wd     (host_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_03_mux_sel.q ),

    // to register interface (read)
    .qs     (host_03_mux_sel_qs)
  );


  // R[host_04_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_04_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_04_cfg_chip2pad_we),
    .wd     (host_04_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_04_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (host_04_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_04_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_04_cfg_drv0_we),
    .wd     (host_04_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_04_cfg.drv0.q ),

    // to register interface (read)
    .qs     (host_04_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_04_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_04_cfg_drv1_we),
    .wd     (host_04_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_04_cfg.drv1.q ),

    // to register interface (read)
    .qs     (host_04_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_04_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_04_cfg_drv2_we),
    .wd     (host_04_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_04_cfg.drv2.q ),

    // to register interface (read)
    .qs     (host_04_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_04_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_04_cfg_pde_we),
    .wd     (host_04_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_04_cfg.pde.q ),

    // to register interface (read)
    .qs     (host_04_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_04_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_04_cfg_pp_odrain_selector_we),
    .wd     (host_04_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_04_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (host_04_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_04_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_04_cfg_pudis_we),
    .wd     (host_04_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_04_cfg.pudis.q ),

    // to register interface (read)
    .qs     (host_04_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_04_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_04_cfg_rxdis_we),
    .wd     (host_04_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_04_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (host_04_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_04_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_04_cfg_slw_pgm_we),
    .wd     (host_04_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_04_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (host_04_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_04_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_04_cfg_trie_we),
    .wd     (host_04_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_04_cfg.trie.q ),

    // to register interface (read)
    .qs     (host_04_cfg_trie_qs)
  );


  // R[host_04_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_04_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_04_mux_sel_we),
    .wd     (host_04_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_04_mux_sel.q ),

    // to register interface (read)
    .qs     (host_04_mux_sel_qs)
  );


  // R[host_05_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_05_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_05_cfg_chip2pad_we),
    .wd     (host_05_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_05_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (host_05_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_05_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_05_cfg_drv0_we),
    .wd     (host_05_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_05_cfg.drv0.q ),

    // to register interface (read)
    .qs     (host_05_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_05_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_05_cfg_drv1_we),
    .wd     (host_05_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_05_cfg.drv1.q ),

    // to register interface (read)
    .qs     (host_05_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_05_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_05_cfg_drv2_we),
    .wd     (host_05_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_05_cfg.drv2.q ),

    // to register interface (read)
    .qs     (host_05_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_05_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_05_cfg_pde_we),
    .wd     (host_05_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_05_cfg.pde.q ),

    // to register interface (read)
    .qs     (host_05_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_05_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_05_cfg_pp_odrain_selector_we),
    .wd     (host_05_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_05_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (host_05_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_05_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_05_cfg_pudis_we),
    .wd     (host_05_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_05_cfg.pudis.q ),

    // to register interface (read)
    .qs     (host_05_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_05_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_05_cfg_rxdis_we),
    .wd     (host_05_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_05_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (host_05_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_05_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_05_cfg_slw_pgm_we),
    .wd     (host_05_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_05_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (host_05_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_05_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_05_cfg_trie_we),
    .wd     (host_05_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_05_cfg.trie.q ),

    // to register interface (read)
    .qs     (host_05_cfg_trie_qs)
  );


  // R[host_05_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_05_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_05_mux_sel_we),
    .wd     (host_05_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_05_mux_sel.q ),

    // to register interface (read)
    .qs     (host_05_mux_sel_qs)
  );


  // R[host_06_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_06_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_06_cfg_chip2pad_we),
    .wd     (host_06_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_06_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (host_06_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_06_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_06_cfg_drv0_we),
    .wd     (host_06_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_06_cfg.drv0.q ),

    // to register interface (read)
    .qs     (host_06_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_06_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_06_cfg_drv1_we),
    .wd     (host_06_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_06_cfg.drv1.q ),

    // to register interface (read)
    .qs     (host_06_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_06_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_06_cfg_drv2_we),
    .wd     (host_06_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_06_cfg.drv2.q ),

    // to register interface (read)
    .qs     (host_06_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_06_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_06_cfg_pde_we),
    .wd     (host_06_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_06_cfg.pde.q ),

    // to register interface (read)
    .qs     (host_06_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_06_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_06_cfg_pp_odrain_selector_we),
    .wd     (host_06_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_06_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (host_06_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_06_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_06_cfg_pudis_we),
    .wd     (host_06_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_06_cfg.pudis.q ),

    // to register interface (read)
    .qs     (host_06_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_06_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_06_cfg_rxdis_we),
    .wd     (host_06_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_06_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (host_06_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_06_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_06_cfg_slw_pgm_we),
    .wd     (host_06_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_06_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (host_06_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_06_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_06_cfg_trie_we),
    .wd     (host_06_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_06_cfg.trie.q ),

    // to register interface (read)
    .qs     (host_06_cfg_trie_qs)
  );


  // R[host_06_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_06_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_06_mux_sel_we),
    .wd     (host_06_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_06_mux_sel.q ),

    // to register interface (read)
    .qs     (host_06_mux_sel_qs)
  );


  // R[host_07_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_07_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_07_cfg_chip2pad_we),
    .wd     (host_07_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_07_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (host_07_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_07_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_07_cfg_drv0_we),
    .wd     (host_07_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_07_cfg.drv0.q ),

    // to register interface (read)
    .qs     (host_07_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_07_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_07_cfg_drv1_we),
    .wd     (host_07_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_07_cfg.drv1.q ),

    // to register interface (read)
    .qs     (host_07_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_07_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_07_cfg_drv2_we),
    .wd     (host_07_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_07_cfg.drv2.q ),

    // to register interface (read)
    .qs     (host_07_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_07_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_07_cfg_pde_we),
    .wd     (host_07_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_07_cfg.pde.q ),

    // to register interface (read)
    .qs     (host_07_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_07_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_07_cfg_pp_odrain_selector_we),
    .wd     (host_07_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_07_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (host_07_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_07_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_07_cfg_pudis_we),
    .wd     (host_07_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_07_cfg.pudis.q ),

    // to register interface (read)
    .qs     (host_07_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_07_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_07_cfg_rxdis_we),
    .wd     (host_07_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_07_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (host_07_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_07_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_07_cfg_slw_pgm_we),
    .wd     (host_07_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_07_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (host_07_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_07_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_07_cfg_trie_we),
    .wd     (host_07_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_07_cfg.trie.q ),

    // to register interface (read)
    .qs     (host_07_cfg_trie_qs)
  );


  // R[host_07_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_07_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_07_mux_sel_we),
    .wd     (host_07_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_07_mux_sel.q ),

    // to register interface (read)
    .qs     (host_07_mux_sel_qs)
  );


  // R[host_08_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_08_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_08_cfg_chip2pad_we),
    .wd     (host_08_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_08_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (host_08_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_08_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_08_cfg_drv0_we),
    .wd     (host_08_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_08_cfg.drv0.q ),

    // to register interface (read)
    .qs     (host_08_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_08_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_08_cfg_drv1_we),
    .wd     (host_08_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_08_cfg.drv1.q ),

    // to register interface (read)
    .qs     (host_08_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_08_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_08_cfg_drv2_we),
    .wd     (host_08_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_08_cfg.drv2.q ),

    // to register interface (read)
    .qs     (host_08_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_08_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_08_cfg_pde_we),
    .wd     (host_08_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_08_cfg.pde.q ),

    // to register interface (read)
    .qs     (host_08_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_08_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_08_cfg_pp_odrain_selector_we),
    .wd     (host_08_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_08_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (host_08_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_08_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_08_cfg_pudis_we),
    .wd     (host_08_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_08_cfg.pudis.q ),

    // to register interface (read)
    .qs     (host_08_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_08_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_08_cfg_rxdis_we),
    .wd     (host_08_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_08_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (host_08_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_08_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_08_cfg_slw_pgm_we),
    .wd     (host_08_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_08_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (host_08_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_08_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_08_cfg_trie_we),
    .wd     (host_08_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_08_cfg.trie.q ),

    // to register interface (read)
    .qs     (host_08_cfg_trie_qs)
  );


  // R[host_08_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_08_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_08_mux_sel_we),
    .wd     (host_08_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_08_mux_sel.q ),

    // to register interface (read)
    .qs     (host_08_mux_sel_qs)
  );


  // R[host_09_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_09_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_09_cfg_chip2pad_we),
    .wd     (host_09_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_09_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (host_09_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_09_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_09_cfg_drv0_we),
    .wd     (host_09_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_09_cfg.drv0.q ),

    // to register interface (read)
    .qs     (host_09_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_09_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_09_cfg_drv1_we),
    .wd     (host_09_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_09_cfg.drv1.q ),

    // to register interface (read)
    .qs     (host_09_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_09_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_09_cfg_drv2_we),
    .wd     (host_09_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_09_cfg.drv2.q ),

    // to register interface (read)
    .qs     (host_09_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_09_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_09_cfg_pde_we),
    .wd     (host_09_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_09_cfg.pde.q ),

    // to register interface (read)
    .qs     (host_09_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_09_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_09_cfg_pp_odrain_selector_we),
    .wd     (host_09_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_09_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (host_09_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_09_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_09_cfg_pudis_we),
    .wd     (host_09_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_09_cfg.pudis.q ),

    // to register interface (read)
    .qs     (host_09_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_09_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_09_cfg_rxdis_we),
    .wd     (host_09_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_09_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (host_09_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_09_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_09_cfg_slw_pgm_we),
    .wd     (host_09_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_09_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (host_09_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_09_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_09_cfg_trie_we),
    .wd     (host_09_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_09_cfg.trie.q ),

    // to register interface (read)
    .qs     (host_09_cfg_trie_qs)
  );


  // R[host_09_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_09_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_09_mux_sel_we),
    .wd     (host_09_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_09_mux_sel.q ),

    // to register interface (read)
    .qs     (host_09_mux_sel_qs)
  );


  // R[host_10_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_10_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_10_cfg_chip2pad_we),
    .wd     (host_10_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_10_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (host_10_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_10_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_10_cfg_drv0_we),
    .wd     (host_10_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_10_cfg.drv0.q ),

    // to register interface (read)
    .qs     (host_10_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_10_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_10_cfg_drv1_we),
    .wd     (host_10_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_10_cfg.drv1.q ),

    // to register interface (read)
    .qs     (host_10_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_10_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_10_cfg_drv2_we),
    .wd     (host_10_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_10_cfg.drv2.q ),

    // to register interface (read)
    .qs     (host_10_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_10_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_10_cfg_pde_we),
    .wd     (host_10_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_10_cfg.pde.q ),

    // to register interface (read)
    .qs     (host_10_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_10_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_10_cfg_pp_odrain_selector_we),
    .wd     (host_10_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_10_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (host_10_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_10_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_10_cfg_pudis_we),
    .wd     (host_10_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_10_cfg.pudis.q ),

    // to register interface (read)
    .qs     (host_10_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_10_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_10_cfg_rxdis_we),
    .wd     (host_10_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_10_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (host_10_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_10_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_10_cfg_slw_pgm_we),
    .wd     (host_10_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_10_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (host_10_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_10_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_10_cfg_trie_we),
    .wd     (host_10_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_10_cfg.trie.q ),

    // to register interface (read)
    .qs     (host_10_cfg_trie_qs)
  );


  // R[host_10_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_host_10_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_10_mux_sel_we),
    .wd     (host_10_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_10_mux_sel.q ),

    // to register interface (read)
    .qs     (host_10_mux_sel_qs)
  );


  // R[secure_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_00_cfg_chip2pad_we),
    .wd     (secure_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (secure_00_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_00_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_00_cfg_drv0_we),
    .wd     (secure_00_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_00_cfg.drv0.q ),

    // to register interface (read)
    .qs     (secure_00_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_00_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_00_cfg_drv1_we),
    .wd     (secure_00_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_00_cfg.drv1.q ),

    // to register interface (read)
    .qs     (secure_00_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_00_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_00_cfg_drv2_we),
    .wd     (secure_00_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_00_cfg.drv2.q ),

    // to register interface (read)
    .qs     (secure_00_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_00_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_00_cfg_pde_we),
    .wd     (secure_00_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_00_cfg.pde.q ),

    // to register interface (read)
    .qs     (secure_00_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_00_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_00_cfg_pp_odrain_selector_we),
    .wd     (secure_00_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_00_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (secure_00_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_00_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_00_cfg_pudis_we),
    .wd     (secure_00_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_00_cfg.pudis.q ),

    // to register interface (read)
    .qs     (secure_00_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_00_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_00_cfg_rxdis_we),
    .wd     (secure_00_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_00_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (secure_00_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_00_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_00_cfg_slw_pgm_we),
    .wd     (secure_00_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_00_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (secure_00_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_00_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_00_cfg_trie_we),
    .wd     (secure_00_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_00_cfg.trie.q ),

    // to register interface (read)
    .qs     (secure_00_cfg_trie_qs)
  );


  // R[secure_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_00_mux_sel_we),
    .wd     (secure_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_00_mux_sel.q ),

    // to register interface (read)
    .qs     (secure_00_mux_sel_qs)
  );


  // R[secure_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_01_cfg_chip2pad_we),
    .wd     (secure_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (secure_01_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_01_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_01_cfg_drv0_we),
    .wd     (secure_01_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_01_cfg.drv0.q ),

    // to register interface (read)
    .qs     (secure_01_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_01_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_01_cfg_drv1_we),
    .wd     (secure_01_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_01_cfg.drv1.q ),

    // to register interface (read)
    .qs     (secure_01_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_01_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_01_cfg_drv2_we),
    .wd     (secure_01_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_01_cfg.drv2.q ),

    // to register interface (read)
    .qs     (secure_01_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_01_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_01_cfg_pde_we),
    .wd     (secure_01_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_01_cfg.pde.q ),

    // to register interface (read)
    .qs     (secure_01_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_01_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_01_cfg_pp_odrain_selector_we),
    .wd     (secure_01_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_01_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (secure_01_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_01_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_01_cfg_pudis_we),
    .wd     (secure_01_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_01_cfg.pudis.q ),

    // to register interface (read)
    .qs     (secure_01_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_01_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_01_cfg_rxdis_we),
    .wd     (secure_01_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_01_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (secure_01_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_01_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_01_cfg_slw_pgm_we),
    .wd     (secure_01_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_01_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (secure_01_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_01_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_01_cfg_trie_we),
    .wd     (secure_01_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_01_cfg.trie.q ),

    // to register interface (read)
    .qs     (secure_01_cfg_trie_qs)
  );


  // R[secure_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_01_mux_sel_we),
    .wd     (secure_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_01_mux_sel.q ),

    // to register interface (read)
    .qs     (secure_01_mux_sel_qs)
  );


  // R[secure_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_02_cfg_chip2pad_we),
    .wd     (secure_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (secure_02_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_02_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_02_cfg_drv0_we),
    .wd     (secure_02_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_02_cfg.drv0.q ),

    // to register interface (read)
    .qs     (secure_02_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_02_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_02_cfg_drv1_we),
    .wd     (secure_02_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_02_cfg.drv1.q ),

    // to register interface (read)
    .qs     (secure_02_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_02_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_02_cfg_drv2_we),
    .wd     (secure_02_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_02_cfg.drv2.q ),

    // to register interface (read)
    .qs     (secure_02_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_02_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_02_cfg_pde_we),
    .wd     (secure_02_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_02_cfg.pde.q ),

    // to register interface (read)
    .qs     (secure_02_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_02_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_02_cfg_pp_odrain_selector_we),
    .wd     (secure_02_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_02_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (secure_02_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_02_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_02_cfg_pudis_we),
    .wd     (secure_02_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_02_cfg.pudis.q ),

    // to register interface (read)
    .qs     (secure_02_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_02_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_02_cfg_rxdis_we),
    .wd     (secure_02_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_02_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (secure_02_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_02_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_02_cfg_slw_pgm_we),
    .wd     (secure_02_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_02_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (secure_02_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_02_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_02_cfg_trie_we),
    .wd     (secure_02_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_02_cfg.trie.q ),

    // to register interface (read)
    .qs     (secure_02_cfg_trie_qs)
  );


  // R[secure_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_02_mux_sel_we),
    .wd     (secure_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_02_mux_sel.q ),

    // to register interface (read)
    .qs     (secure_02_mux_sel_qs)
  );


  // R[secure_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_03_cfg_chip2pad_we),
    .wd     (secure_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (secure_03_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_03_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_03_cfg_drv0_we),
    .wd     (secure_03_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_03_cfg.drv0.q ),

    // to register interface (read)
    .qs     (secure_03_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_03_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_03_cfg_drv1_we),
    .wd     (secure_03_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_03_cfg.drv1.q ),

    // to register interface (read)
    .qs     (secure_03_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_03_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_03_cfg_drv2_we),
    .wd     (secure_03_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_03_cfg.drv2.q ),

    // to register interface (read)
    .qs     (secure_03_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_03_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_03_cfg_pde_we),
    .wd     (secure_03_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_03_cfg.pde.q ),

    // to register interface (read)
    .qs     (secure_03_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_03_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_03_cfg_pp_odrain_selector_we),
    .wd     (secure_03_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_03_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (secure_03_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_03_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_03_cfg_pudis_we),
    .wd     (secure_03_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_03_cfg.pudis.q ),

    // to register interface (read)
    .qs     (secure_03_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_03_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_03_cfg_rxdis_we),
    .wd     (secure_03_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_03_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (secure_03_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_03_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_03_cfg_slw_pgm_we),
    .wd     (secure_03_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_03_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (secure_03_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_03_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_03_cfg_trie_we),
    .wd     (secure_03_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_03_cfg.trie.q ),

    // to register interface (read)
    .qs     (secure_03_cfg_trie_qs)
  );


  // R[secure_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_03_mux_sel_we),
    .wd     (secure_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_03_mux_sel.q ),

    // to register interface (read)
    .qs     (secure_03_mux_sel_qs)
  );


  // R[secure_04_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_04_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_04_cfg_chip2pad_we),
    .wd     (secure_04_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_04_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (secure_04_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_04_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_04_cfg_drv0_we),
    .wd     (secure_04_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_04_cfg.drv0.q ),

    // to register interface (read)
    .qs     (secure_04_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_04_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_04_cfg_drv1_we),
    .wd     (secure_04_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_04_cfg.drv1.q ),

    // to register interface (read)
    .qs     (secure_04_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_04_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_04_cfg_drv2_we),
    .wd     (secure_04_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_04_cfg.drv2.q ),

    // to register interface (read)
    .qs     (secure_04_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_04_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_04_cfg_pde_we),
    .wd     (secure_04_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_04_cfg.pde.q ),

    // to register interface (read)
    .qs     (secure_04_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_04_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_04_cfg_pp_odrain_selector_we),
    .wd     (secure_04_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_04_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (secure_04_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_04_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_04_cfg_pudis_we),
    .wd     (secure_04_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_04_cfg.pudis.q ),

    // to register interface (read)
    .qs     (secure_04_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_04_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_04_cfg_rxdis_we),
    .wd     (secure_04_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_04_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (secure_04_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_04_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_04_cfg_slw_pgm_we),
    .wd     (secure_04_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_04_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (secure_04_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_04_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_04_cfg_trie_we),
    .wd     (secure_04_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_04_cfg.trie.q ),

    // to register interface (read)
    .qs     (secure_04_cfg_trie_qs)
  );


  // R[secure_04_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_04_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_04_mux_sel_we),
    .wd     (secure_04_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_04_mux_sel.q ),

    // to register interface (read)
    .qs     (secure_04_mux_sel_qs)
  );


  // R[secure_05_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_05_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_05_cfg_chip2pad_we),
    .wd     (secure_05_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_05_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (secure_05_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_05_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_05_cfg_drv0_we),
    .wd     (secure_05_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_05_cfg.drv0.q ),

    // to register interface (read)
    .qs     (secure_05_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_05_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_05_cfg_drv1_we),
    .wd     (secure_05_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_05_cfg.drv1.q ),

    // to register interface (read)
    .qs     (secure_05_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_05_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_05_cfg_drv2_we),
    .wd     (secure_05_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_05_cfg.drv2.q ),

    // to register interface (read)
    .qs     (secure_05_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_05_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_05_cfg_pde_we),
    .wd     (secure_05_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_05_cfg.pde.q ),

    // to register interface (read)
    .qs     (secure_05_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_05_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_05_cfg_pp_odrain_selector_we),
    .wd     (secure_05_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_05_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (secure_05_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_05_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_05_cfg_pudis_we),
    .wd     (secure_05_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_05_cfg.pudis.q ),

    // to register interface (read)
    .qs     (secure_05_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_05_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_05_cfg_rxdis_we),
    .wd     (secure_05_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_05_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (secure_05_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_05_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_05_cfg_slw_pgm_we),
    .wd     (secure_05_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_05_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (secure_05_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_05_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_05_cfg_trie_we),
    .wd     (secure_05_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_05_cfg.trie.q ),

    // to register interface (read)
    .qs     (secure_05_cfg_trie_qs)
  );


  // R[secure_05_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_05_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_05_mux_sel_we),
    .wd     (secure_05_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_05_mux_sel.q ),

    // to register interface (read)
    .qs     (secure_05_mux_sel_qs)
  );


  // R[secure_06_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_06_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_06_cfg_chip2pad_we),
    .wd     (secure_06_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_06_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (secure_06_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_06_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_06_cfg_drv0_we),
    .wd     (secure_06_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_06_cfg.drv0.q ),

    // to register interface (read)
    .qs     (secure_06_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_06_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_06_cfg_drv1_we),
    .wd     (secure_06_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_06_cfg.drv1.q ),

    // to register interface (read)
    .qs     (secure_06_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_06_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_06_cfg_drv2_we),
    .wd     (secure_06_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_06_cfg.drv2.q ),

    // to register interface (read)
    .qs     (secure_06_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_06_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_06_cfg_pde_we),
    .wd     (secure_06_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_06_cfg.pde.q ),

    // to register interface (read)
    .qs     (secure_06_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_06_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_06_cfg_pp_odrain_selector_we),
    .wd     (secure_06_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_06_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (secure_06_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_06_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_06_cfg_pudis_we),
    .wd     (secure_06_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_06_cfg.pudis.q ),

    // to register interface (read)
    .qs     (secure_06_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_06_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_06_cfg_rxdis_we),
    .wd     (secure_06_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_06_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (secure_06_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_06_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_06_cfg_slw_pgm_we),
    .wd     (secure_06_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_06_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (secure_06_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_06_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_06_cfg_trie_we),
    .wd     (secure_06_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_06_cfg.trie.q ),

    // to register interface (read)
    .qs     (secure_06_cfg_trie_qs)
  );


  // R[secure_06_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_06_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_06_mux_sel_we),
    .wd     (secure_06_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_06_mux_sel.q ),

    // to register interface (read)
    .qs     (secure_06_mux_sel_qs)
  );


  // R[secure_07_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_07_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_07_cfg_chip2pad_we),
    .wd     (secure_07_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_07_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (secure_07_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_07_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_07_cfg_drv0_we),
    .wd     (secure_07_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_07_cfg.drv0.q ),

    // to register interface (read)
    .qs     (secure_07_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_07_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_07_cfg_drv1_we),
    .wd     (secure_07_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_07_cfg.drv1.q ),

    // to register interface (read)
    .qs     (secure_07_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_07_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_07_cfg_drv2_we),
    .wd     (secure_07_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_07_cfg.drv2.q ),

    // to register interface (read)
    .qs     (secure_07_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_07_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_07_cfg_pde_we),
    .wd     (secure_07_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_07_cfg.pde.q ),

    // to register interface (read)
    .qs     (secure_07_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_07_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_07_cfg_pp_odrain_selector_we),
    .wd     (secure_07_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_07_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (secure_07_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_07_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_07_cfg_pudis_we),
    .wd     (secure_07_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_07_cfg.pudis.q ),

    // to register interface (read)
    .qs     (secure_07_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_secure_07_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_07_cfg_rxdis_we),
    .wd     (secure_07_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_07_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (secure_07_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_07_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_07_cfg_slw_pgm_we),
    .wd     (secure_07_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_07_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (secure_07_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_07_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_07_cfg_trie_we),
    .wd     (secure_07_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_07_cfg.trie.q ),

    // to register interface (read)
    .qs     (secure_07_cfg_trie_qs)
  );


  // R[secure_07_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_secure_07_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (secure_07_mux_sel_we),
    .wd     (secure_07_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.secure_07_mux_sel.q ),

    // to register interface (read)
    .qs     (secure_07_mux_sel_qs)
  );


  // R[gpio_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_00_cfg_chip2pad_we),
    .wd     (gpio_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_00_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_00_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_00_cfg_drv0_we),
    .wd     (gpio_00_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_00_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_00_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_00_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_00_cfg_drv1_we),
    .wd     (gpio_00_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_00_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_00_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_00_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_00_cfg_drv2_we),
    .wd     (gpio_00_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_00_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_00_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_00_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_00_cfg_pde_we),
    .wd     (gpio_00_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_00_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_00_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_00_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_00_cfg_pp_odrain_selector_we),
    .wd     (gpio_00_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_00_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_00_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_00_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_00_cfg_pudis_we),
    .wd     (gpio_00_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_00_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_00_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_00_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_00_cfg_rxdis_we),
    .wd     (gpio_00_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_00_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_00_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_00_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_00_cfg_slw_pgm_we),
    .wd     (gpio_00_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_00_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_00_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_00_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_00_cfg_trie_we),
    .wd     (gpio_00_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_00_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_00_cfg_trie_qs)
  );


  // R[gpio_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_00_mux_sel_we),
    .wd     (gpio_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_00_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_00_mux_sel_qs)
  );


  // R[gpio_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_01_cfg_chip2pad_we),
    .wd     (gpio_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_01_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_01_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_01_cfg_drv0_we),
    .wd     (gpio_01_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_01_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_01_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_01_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_01_cfg_drv1_we),
    .wd     (gpio_01_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_01_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_01_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_01_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_01_cfg_drv2_we),
    .wd     (gpio_01_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_01_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_01_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_01_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_01_cfg_pde_we),
    .wd     (gpio_01_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_01_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_01_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_01_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_01_cfg_pp_odrain_selector_we),
    .wd     (gpio_01_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_01_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_01_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_01_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_01_cfg_pudis_we),
    .wd     (gpio_01_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_01_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_01_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_01_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_01_cfg_rxdis_we),
    .wd     (gpio_01_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_01_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_01_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_01_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_01_cfg_slw_pgm_we),
    .wd     (gpio_01_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_01_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_01_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_01_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_01_cfg_trie_we),
    .wd     (gpio_01_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_01_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_01_cfg_trie_qs)
  );


  // R[gpio_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_01_mux_sel_we),
    .wd     (gpio_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_01_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_01_mux_sel_qs)
  );


  // R[gpio_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_02_cfg_chip2pad_we),
    .wd     (gpio_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_02_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_02_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_02_cfg_drv0_we),
    .wd     (gpio_02_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_02_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_02_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_02_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_02_cfg_drv1_we),
    .wd     (gpio_02_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_02_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_02_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_02_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_02_cfg_drv2_we),
    .wd     (gpio_02_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_02_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_02_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_02_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_02_cfg_pde_we),
    .wd     (gpio_02_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_02_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_02_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_02_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_02_cfg_pp_odrain_selector_we),
    .wd     (gpio_02_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_02_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_02_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_02_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_02_cfg_pudis_we),
    .wd     (gpio_02_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_02_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_02_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_02_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_02_cfg_rxdis_we),
    .wd     (gpio_02_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_02_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_02_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_02_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_02_cfg_slw_pgm_we),
    .wd     (gpio_02_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_02_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_02_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_02_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_02_cfg_trie_we),
    .wd     (gpio_02_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_02_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_02_cfg_trie_qs)
  );


  // R[gpio_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_02_mux_sel_we),
    .wd     (gpio_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_02_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_02_mux_sel_qs)
  );


  // R[gpio_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_03_cfg_chip2pad_we),
    .wd     (gpio_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_03_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_03_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_03_cfg_drv0_we),
    .wd     (gpio_03_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_03_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_03_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_03_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_03_cfg_drv1_we),
    .wd     (gpio_03_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_03_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_03_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_03_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_03_cfg_drv2_we),
    .wd     (gpio_03_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_03_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_03_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_03_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_03_cfg_pde_we),
    .wd     (gpio_03_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_03_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_03_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_03_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_03_cfg_pp_odrain_selector_we),
    .wd     (gpio_03_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_03_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_03_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_03_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_03_cfg_pudis_we),
    .wd     (gpio_03_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_03_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_03_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_03_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_03_cfg_rxdis_we),
    .wd     (gpio_03_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_03_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_03_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_03_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_03_cfg_slw_pgm_we),
    .wd     (gpio_03_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_03_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_03_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_03_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_03_cfg_trie_we),
    .wd     (gpio_03_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_03_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_03_cfg_trie_qs)
  );


  // R[gpio_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_03_mux_sel_we),
    .wd     (gpio_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_03_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_03_mux_sel_qs)
  );


  // R[gpio_04_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_04_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_04_cfg_chip2pad_we),
    .wd     (gpio_04_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_04_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_04_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_04_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_04_cfg_drv0_we),
    .wd     (gpio_04_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_04_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_04_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_04_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_04_cfg_drv1_we),
    .wd     (gpio_04_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_04_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_04_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_04_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_04_cfg_drv2_we),
    .wd     (gpio_04_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_04_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_04_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_04_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_04_cfg_pde_we),
    .wd     (gpio_04_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_04_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_04_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_04_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_04_cfg_pp_odrain_selector_we),
    .wd     (gpio_04_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_04_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_04_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_04_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_04_cfg_pudis_we),
    .wd     (gpio_04_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_04_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_04_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_04_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_04_cfg_rxdis_we),
    .wd     (gpio_04_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_04_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_04_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_04_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_04_cfg_slw_pgm_we),
    .wd     (gpio_04_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_04_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_04_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_04_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_04_cfg_trie_we),
    .wd     (gpio_04_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_04_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_04_cfg_trie_qs)
  );


  // R[gpio_04_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_04_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_04_mux_sel_we),
    .wd     (gpio_04_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_04_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_04_mux_sel_qs)
  );


  // R[gpio_05_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_05_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_05_cfg_chip2pad_we),
    .wd     (gpio_05_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_05_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_05_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_05_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_05_cfg_drv0_we),
    .wd     (gpio_05_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_05_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_05_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_05_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_05_cfg_drv1_we),
    .wd     (gpio_05_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_05_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_05_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_05_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_05_cfg_drv2_we),
    .wd     (gpio_05_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_05_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_05_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_05_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_05_cfg_pde_we),
    .wd     (gpio_05_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_05_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_05_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_05_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_05_cfg_pp_odrain_selector_we),
    .wd     (gpio_05_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_05_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_05_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_05_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_05_cfg_pudis_we),
    .wd     (gpio_05_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_05_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_05_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_05_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_05_cfg_rxdis_we),
    .wd     (gpio_05_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_05_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_05_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_05_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_05_cfg_slw_pgm_we),
    .wd     (gpio_05_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_05_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_05_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_05_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_05_cfg_trie_we),
    .wd     (gpio_05_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_05_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_05_cfg_trie_qs)
  );


  // R[gpio_05_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_05_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_05_mux_sel_we),
    .wd     (gpio_05_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_05_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_05_mux_sel_qs)
  );


  // R[gpio_06_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_06_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_06_cfg_chip2pad_we),
    .wd     (gpio_06_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_06_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_06_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_06_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_06_cfg_drv0_we),
    .wd     (gpio_06_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_06_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_06_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_06_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_06_cfg_drv1_we),
    .wd     (gpio_06_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_06_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_06_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_06_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_06_cfg_drv2_we),
    .wd     (gpio_06_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_06_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_06_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_06_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_06_cfg_pde_we),
    .wd     (gpio_06_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_06_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_06_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_06_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_06_cfg_pp_odrain_selector_we),
    .wd     (gpio_06_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_06_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_06_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_06_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_06_cfg_pudis_we),
    .wd     (gpio_06_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_06_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_06_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_06_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_06_cfg_rxdis_we),
    .wd     (gpio_06_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_06_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_06_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_06_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_06_cfg_slw_pgm_we),
    .wd     (gpio_06_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_06_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_06_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_06_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_06_cfg_trie_we),
    .wd     (gpio_06_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_06_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_06_cfg_trie_qs)
  );


  // R[gpio_06_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_06_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_06_mux_sel_we),
    .wd     (gpio_06_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_06_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_06_mux_sel_qs)
  );


  // R[gpio_07_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_07_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_07_cfg_chip2pad_we),
    .wd     (gpio_07_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_07_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_07_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_07_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_07_cfg_drv0_we),
    .wd     (gpio_07_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_07_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_07_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_07_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_07_cfg_drv1_we),
    .wd     (gpio_07_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_07_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_07_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_07_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_07_cfg_drv2_we),
    .wd     (gpio_07_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_07_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_07_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_07_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_07_cfg_pde_we),
    .wd     (gpio_07_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_07_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_07_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_07_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_07_cfg_pp_odrain_selector_we),
    .wd     (gpio_07_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_07_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_07_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_07_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_07_cfg_pudis_we),
    .wd     (gpio_07_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_07_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_07_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_07_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_07_cfg_rxdis_we),
    .wd     (gpio_07_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_07_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_07_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_07_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_07_cfg_slw_pgm_we),
    .wd     (gpio_07_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_07_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_07_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_07_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_07_cfg_trie_we),
    .wd     (gpio_07_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_07_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_07_cfg_trie_qs)
  );


  // R[gpio_07_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_07_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_07_mux_sel_we),
    .wd     (gpio_07_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_07_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_07_mux_sel_qs)
  );


  // R[gpio_08_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_08_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_08_cfg_chip2pad_we),
    .wd     (gpio_08_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_08_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_08_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_08_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_08_cfg_drv0_we),
    .wd     (gpio_08_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_08_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_08_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_08_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_08_cfg_drv1_we),
    .wd     (gpio_08_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_08_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_08_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_08_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_08_cfg_drv2_we),
    .wd     (gpio_08_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_08_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_08_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_08_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_08_cfg_pde_we),
    .wd     (gpio_08_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_08_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_08_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_08_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_08_cfg_pp_odrain_selector_we),
    .wd     (gpio_08_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_08_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_08_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_08_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_08_cfg_pudis_we),
    .wd     (gpio_08_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_08_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_08_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_08_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_08_cfg_rxdis_we),
    .wd     (gpio_08_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_08_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_08_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_08_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_08_cfg_slw_pgm_we),
    .wd     (gpio_08_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_08_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_08_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_08_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_08_cfg_trie_we),
    .wd     (gpio_08_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_08_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_08_cfg_trie_qs)
  );


  // R[gpio_08_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_08_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_08_mux_sel_we),
    .wd     (gpio_08_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_08_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_08_mux_sel_qs)
  );


  // R[gpio_09_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_09_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_09_cfg_chip2pad_we),
    .wd     (gpio_09_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_09_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_09_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_09_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_09_cfg_drv0_we),
    .wd     (gpio_09_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_09_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_09_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_09_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_09_cfg_drv1_we),
    .wd     (gpio_09_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_09_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_09_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_09_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_09_cfg_drv2_we),
    .wd     (gpio_09_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_09_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_09_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_09_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_09_cfg_pde_we),
    .wd     (gpio_09_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_09_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_09_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_09_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_09_cfg_pp_odrain_selector_we),
    .wd     (gpio_09_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_09_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_09_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_09_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_09_cfg_pudis_we),
    .wd     (gpio_09_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_09_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_09_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_09_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_09_cfg_rxdis_we),
    .wd     (gpio_09_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_09_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_09_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_09_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_09_cfg_slw_pgm_we),
    .wd     (gpio_09_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_09_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_09_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_09_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_09_cfg_trie_we),
    .wd     (gpio_09_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_09_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_09_cfg_trie_qs)
  );


  // R[gpio_09_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_09_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_09_mux_sel_we),
    .wd     (gpio_09_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_09_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_09_mux_sel_qs)
  );


  // R[gpio_10_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_10_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_10_cfg_chip2pad_we),
    .wd     (gpio_10_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_10_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_10_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_10_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_10_cfg_drv0_we),
    .wd     (gpio_10_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_10_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_10_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_10_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_10_cfg_drv1_we),
    .wd     (gpio_10_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_10_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_10_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_10_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_10_cfg_drv2_we),
    .wd     (gpio_10_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_10_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_10_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_10_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_10_cfg_pde_we),
    .wd     (gpio_10_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_10_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_10_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_10_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_10_cfg_pp_odrain_selector_we),
    .wd     (gpio_10_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_10_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_10_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_10_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_10_cfg_pudis_we),
    .wd     (gpio_10_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_10_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_10_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_10_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_10_cfg_rxdis_we),
    .wd     (gpio_10_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_10_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_10_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_10_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_10_cfg_slw_pgm_we),
    .wd     (gpio_10_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_10_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_10_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_10_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_10_cfg_trie_we),
    .wd     (gpio_10_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_10_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_10_cfg_trie_qs)
  );


  // R[gpio_10_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_10_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_10_mux_sel_we),
    .wd     (gpio_10_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_10_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_10_mux_sel_qs)
  );


  // R[gpio_11_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_11_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_11_cfg_chip2pad_we),
    .wd     (gpio_11_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_11_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_11_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_11_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_11_cfg_drv0_we),
    .wd     (gpio_11_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_11_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_11_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_11_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_11_cfg_drv1_we),
    .wd     (gpio_11_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_11_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_11_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_11_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_11_cfg_drv2_we),
    .wd     (gpio_11_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_11_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_11_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_11_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_11_cfg_pde_we),
    .wd     (gpio_11_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_11_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_11_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_11_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_11_cfg_pp_odrain_selector_we),
    .wd     (gpio_11_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_11_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_11_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_11_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_11_cfg_pudis_we),
    .wd     (gpio_11_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_11_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_11_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_11_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_11_cfg_rxdis_we),
    .wd     (gpio_11_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_11_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_11_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_11_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_11_cfg_slw_pgm_we),
    .wd     (gpio_11_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_11_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_11_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_11_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_11_cfg_trie_we),
    .wd     (gpio_11_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_11_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_11_cfg_trie_qs)
  );


  // R[gpio_11_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_11_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_11_mux_sel_we),
    .wd     (gpio_11_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_11_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_11_mux_sel_qs)
  );


  // R[gpio_12_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_12_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_12_cfg_chip2pad_we),
    .wd     (gpio_12_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_12_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_12_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_12_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_12_cfg_drv0_we),
    .wd     (gpio_12_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_12_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_12_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_12_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_12_cfg_drv1_we),
    .wd     (gpio_12_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_12_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_12_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_12_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_12_cfg_drv2_we),
    .wd     (gpio_12_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_12_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_12_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_12_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_12_cfg_pde_we),
    .wd     (gpio_12_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_12_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_12_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_12_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_12_cfg_pp_odrain_selector_we),
    .wd     (gpio_12_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_12_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_12_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_12_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_12_cfg_pudis_we),
    .wd     (gpio_12_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_12_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_12_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_12_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_12_cfg_rxdis_we),
    .wd     (gpio_12_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_12_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_12_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_12_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_12_cfg_slw_pgm_we),
    .wd     (gpio_12_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_12_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_12_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_12_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_12_cfg_trie_we),
    .wd     (gpio_12_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_12_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_12_cfg_trie_qs)
  );


  // R[gpio_12_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_12_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_12_mux_sel_we),
    .wd     (gpio_12_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_12_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_12_mux_sel_qs)
  );


  // R[gpio_13_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_13_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_13_cfg_chip2pad_we),
    .wd     (gpio_13_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_13_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_13_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_13_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_13_cfg_drv0_we),
    .wd     (gpio_13_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_13_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_13_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_13_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_13_cfg_drv1_we),
    .wd     (gpio_13_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_13_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_13_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_13_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_13_cfg_drv2_we),
    .wd     (gpio_13_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_13_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_13_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_13_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_13_cfg_pde_we),
    .wd     (gpio_13_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_13_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_13_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_13_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_13_cfg_pp_odrain_selector_we),
    .wd     (gpio_13_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_13_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_13_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_13_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_13_cfg_pudis_we),
    .wd     (gpio_13_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_13_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_13_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_13_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_13_cfg_rxdis_we),
    .wd     (gpio_13_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_13_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_13_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_13_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_13_cfg_slw_pgm_we),
    .wd     (gpio_13_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_13_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_13_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_13_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_13_cfg_trie_we),
    .wd     (gpio_13_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_13_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_13_cfg_trie_qs)
  );


  // R[gpio_13_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_13_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_13_mux_sel_we),
    .wd     (gpio_13_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_13_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_13_mux_sel_qs)
  );


  // R[gpio_14_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_14_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_14_cfg_chip2pad_we),
    .wd     (gpio_14_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_14_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_14_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_14_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_14_cfg_drv0_we),
    .wd     (gpio_14_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_14_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_14_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_14_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_14_cfg_drv1_we),
    .wd     (gpio_14_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_14_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_14_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_14_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_14_cfg_drv2_we),
    .wd     (gpio_14_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_14_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_14_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_14_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_14_cfg_pde_we),
    .wd     (gpio_14_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_14_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_14_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_14_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_14_cfg_pp_odrain_selector_we),
    .wd     (gpio_14_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_14_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_14_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_14_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_14_cfg_pudis_we),
    .wd     (gpio_14_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_14_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_14_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_14_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_14_cfg_rxdis_we),
    .wd     (gpio_14_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_14_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_14_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_14_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_14_cfg_slw_pgm_we),
    .wd     (gpio_14_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_14_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_14_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_14_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_14_cfg_trie_we),
    .wd     (gpio_14_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_14_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_14_cfg_trie_qs)
  );


  // R[gpio_14_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_14_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_14_mux_sel_we),
    .wd     (gpio_14_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_14_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_14_mux_sel_qs)
  );


  // R[gpio_15_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_15_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_15_cfg_chip2pad_we),
    .wd     (gpio_15_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_15_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (gpio_15_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_15_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_15_cfg_drv0_we),
    .wd     (gpio_15_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_15_cfg.drv0.q ),

    // to register interface (read)
    .qs     (gpio_15_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_15_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_15_cfg_drv1_we),
    .wd     (gpio_15_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_15_cfg.drv1.q ),

    // to register interface (read)
    .qs     (gpio_15_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_15_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_15_cfg_drv2_we),
    .wd     (gpio_15_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_15_cfg.drv2.q ),

    // to register interface (read)
    .qs     (gpio_15_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_15_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_15_cfg_pde_we),
    .wd     (gpio_15_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_15_cfg.pde.q ),

    // to register interface (read)
    .qs     (gpio_15_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_15_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_15_cfg_pp_odrain_selector_we),
    .wd     (gpio_15_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_15_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (gpio_15_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_15_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_15_cfg_pudis_we),
    .wd     (gpio_15_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_15_cfg.pudis.q ),

    // to register interface (read)
    .qs     (gpio_15_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_15_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_15_cfg_rxdis_we),
    .wd     (gpio_15_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_15_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (gpio_15_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_15_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_15_cfg_slw_pgm_we),
    .wd     (gpio_15_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_15_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (gpio_15_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_15_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_15_cfg_trie_we),
    .wd     (gpio_15_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_15_cfg.trie.q ),

    // to register interface (read)
    .qs     (gpio_15_cfg_trie_qs)
  );


  // R[gpio_15_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_gpio_15_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_15_mux_sel_we),
    .wd     (gpio_15_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_15_mux_sel.q ),

    // to register interface (read)
    .qs     (gpio_15_mux_sel_qs)
  );


  // R[periph_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_00_cfg_chip2pad_we),
    .wd     (periph_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_00_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_00_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_00_cfg_drv0_we),
    .wd     (periph_00_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_00_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_00_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_00_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_00_cfg_drv1_we),
    .wd     (periph_00_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_00_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_00_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_00_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_00_cfg_drv2_we),
    .wd     (periph_00_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_00_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_00_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_00_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_00_cfg_pde_we),
    .wd     (periph_00_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_00_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_00_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_00_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_00_cfg_pp_odrain_selector_we),
    .wd     (periph_00_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_00_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_00_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_00_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_00_cfg_pudis_we),
    .wd     (periph_00_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_00_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_00_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_00_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_00_cfg_rxdis_we),
    .wd     (periph_00_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_00_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_00_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_00_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_00_cfg_slw_pgm_we),
    .wd     (periph_00_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_00_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_00_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_00_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_00_cfg_trie_we),
    .wd     (periph_00_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_00_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_00_cfg_trie_qs)
  );


  // R[periph_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_00_mux_sel_we),
    .wd     (periph_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_00_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_00_mux_sel_qs)
  );


  // R[periph_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_01_cfg_chip2pad_we),
    .wd     (periph_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_01_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_01_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_01_cfg_drv0_we),
    .wd     (periph_01_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_01_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_01_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_01_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_01_cfg_drv1_we),
    .wd     (periph_01_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_01_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_01_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_01_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_01_cfg_drv2_we),
    .wd     (periph_01_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_01_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_01_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_01_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_01_cfg_pde_we),
    .wd     (periph_01_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_01_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_01_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_01_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_01_cfg_pp_odrain_selector_we),
    .wd     (periph_01_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_01_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_01_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_01_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_01_cfg_pudis_we),
    .wd     (periph_01_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_01_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_01_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_01_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_01_cfg_rxdis_we),
    .wd     (periph_01_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_01_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_01_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_01_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_01_cfg_slw_pgm_we),
    .wd     (periph_01_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_01_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_01_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_01_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_01_cfg_trie_we),
    .wd     (periph_01_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_01_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_01_cfg_trie_qs)
  );


  // R[periph_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_01_mux_sel_we),
    .wd     (periph_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_01_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_01_mux_sel_qs)
  );


  // R[periph_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_02_cfg_chip2pad_we),
    .wd     (periph_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_02_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_02_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_02_cfg_drv0_we),
    .wd     (periph_02_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_02_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_02_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_02_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_02_cfg_drv1_we),
    .wd     (periph_02_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_02_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_02_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_02_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_02_cfg_drv2_we),
    .wd     (periph_02_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_02_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_02_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_02_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_02_cfg_pde_we),
    .wd     (periph_02_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_02_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_02_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_02_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_02_cfg_pp_odrain_selector_we),
    .wd     (periph_02_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_02_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_02_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_02_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_02_cfg_pudis_we),
    .wd     (periph_02_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_02_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_02_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_02_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_02_cfg_rxdis_we),
    .wd     (periph_02_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_02_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_02_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_02_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_02_cfg_slw_pgm_we),
    .wd     (periph_02_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_02_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_02_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_02_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_02_cfg_trie_we),
    .wd     (periph_02_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_02_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_02_cfg_trie_qs)
  );


  // R[periph_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_02_mux_sel_we),
    .wd     (periph_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_02_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_02_mux_sel_qs)
  );


  // R[periph_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_03_cfg_chip2pad_we),
    .wd     (periph_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_03_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_03_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_03_cfg_drv0_we),
    .wd     (periph_03_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_03_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_03_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_03_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_03_cfg_drv1_we),
    .wd     (periph_03_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_03_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_03_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_03_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_03_cfg_drv2_we),
    .wd     (periph_03_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_03_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_03_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_03_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_03_cfg_pde_we),
    .wd     (periph_03_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_03_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_03_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_03_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_03_cfg_pp_odrain_selector_we),
    .wd     (periph_03_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_03_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_03_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_03_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_03_cfg_pudis_we),
    .wd     (periph_03_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_03_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_03_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_03_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_03_cfg_rxdis_we),
    .wd     (periph_03_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_03_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_03_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_03_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_03_cfg_slw_pgm_we),
    .wd     (periph_03_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_03_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_03_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_03_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_03_cfg_trie_we),
    .wd     (periph_03_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_03_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_03_cfg_trie_qs)
  );


  // R[periph_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_03_mux_sel_we),
    .wd     (periph_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_03_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_03_mux_sel_qs)
  );


  // R[periph_04_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_04_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_04_cfg_chip2pad_we),
    .wd     (periph_04_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_04_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_04_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_04_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_04_cfg_drv0_we),
    .wd     (periph_04_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_04_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_04_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_04_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_04_cfg_drv1_we),
    .wd     (periph_04_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_04_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_04_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_04_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_04_cfg_drv2_we),
    .wd     (periph_04_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_04_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_04_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_04_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_04_cfg_pde_we),
    .wd     (periph_04_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_04_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_04_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_04_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_04_cfg_pp_odrain_selector_we),
    .wd     (periph_04_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_04_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_04_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_04_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_04_cfg_pudis_we),
    .wd     (periph_04_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_04_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_04_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_04_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_04_cfg_rxdis_we),
    .wd     (periph_04_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_04_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_04_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_04_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_04_cfg_slw_pgm_we),
    .wd     (periph_04_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_04_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_04_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_04_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_04_cfg_trie_we),
    .wd     (periph_04_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_04_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_04_cfg_trie_qs)
  );


  // R[periph_04_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_04_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_04_mux_sel_we),
    .wd     (periph_04_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_04_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_04_mux_sel_qs)
  );


  // R[periph_05_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_05_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_05_cfg_chip2pad_we),
    .wd     (periph_05_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_05_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_05_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_05_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_05_cfg_drv0_we),
    .wd     (periph_05_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_05_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_05_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_05_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_05_cfg_drv1_we),
    .wd     (periph_05_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_05_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_05_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_05_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_05_cfg_drv2_we),
    .wd     (periph_05_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_05_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_05_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_05_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_05_cfg_pde_we),
    .wd     (periph_05_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_05_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_05_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_05_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_05_cfg_pp_odrain_selector_we),
    .wd     (periph_05_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_05_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_05_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_05_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_05_cfg_pudis_we),
    .wd     (periph_05_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_05_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_05_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_05_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_05_cfg_rxdis_we),
    .wd     (periph_05_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_05_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_05_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_05_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_05_cfg_slw_pgm_we),
    .wd     (periph_05_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_05_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_05_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_05_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_05_cfg_trie_we),
    .wd     (periph_05_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_05_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_05_cfg_trie_qs)
  );


  // R[periph_05_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_05_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_05_mux_sel_we),
    .wd     (periph_05_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_05_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_05_mux_sel_qs)
  );


  // R[periph_06_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_06_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_06_cfg_chip2pad_we),
    .wd     (periph_06_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_06_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_06_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_06_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_06_cfg_drv0_we),
    .wd     (periph_06_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_06_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_06_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_06_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_06_cfg_drv1_we),
    .wd     (periph_06_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_06_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_06_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_06_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_06_cfg_drv2_we),
    .wd     (periph_06_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_06_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_06_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_06_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_06_cfg_pde_we),
    .wd     (periph_06_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_06_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_06_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_06_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_06_cfg_pp_odrain_selector_we),
    .wd     (periph_06_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_06_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_06_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_06_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_06_cfg_pudis_we),
    .wd     (periph_06_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_06_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_06_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_06_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_06_cfg_rxdis_we),
    .wd     (periph_06_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_06_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_06_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_06_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_06_cfg_slw_pgm_we),
    .wd     (periph_06_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_06_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_06_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_06_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_06_cfg_trie_we),
    .wd     (periph_06_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_06_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_06_cfg_trie_qs)
  );


  // R[periph_06_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_06_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_06_mux_sel_we),
    .wd     (periph_06_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_06_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_06_mux_sel_qs)
  );


  // R[periph_07_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_07_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_07_cfg_chip2pad_we),
    .wd     (periph_07_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_07_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_07_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_07_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_07_cfg_drv0_we),
    .wd     (periph_07_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_07_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_07_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_07_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_07_cfg_drv1_we),
    .wd     (periph_07_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_07_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_07_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_07_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_07_cfg_drv2_we),
    .wd     (periph_07_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_07_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_07_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_07_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_07_cfg_pde_we),
    .wd     (periph_07_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_07_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_07_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_07_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_07_cfg_pp_odrain_selector_we),
    .wd     (periph_07_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_07_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_07_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_07_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_07_cfg_pudis_we),
    .wd     (periph_07_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_07_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_07_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_07_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_07_cfg_rxdis_we),
    .wd     (periph_07_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_07_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_07_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_07_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_07_cfg_slw_pgm_we),
    .wd     (periph_07_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_07_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_07_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_07_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_07_cfg_trie_we),
    .wd     (periph_07_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_07_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_07_cfg_trie_qs)
  );


  // R[periph_07_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_07_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_07_mux_sel_we),
    .wd     (periph_07_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_07_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_07_mux_sel_qs)
  );


  // R[periph_08_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_08_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_08_cfg_chip2pad_we),
    .wd     (periph_08_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_08_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_08_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_08_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_08_cfg_drv0_we),
    .wd     (periph_08_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_08_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_08_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_08_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_08_cfg_drv1_we),
    .wd     (periph_08_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_08_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_08_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_08_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_08_cfg_drv2_we),
    .wd     (periph_08_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_08_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_08_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_08_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_08_cfg_pde_we),
    .wd     (periph_08_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_08_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_08_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_08_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_08_cfg_pp_odrain_selector_we),
    .wd     (periph_08_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_08_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_08_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_08_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_08_cfg_pudis_we),
    .wd     (periph_08_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_08_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_08_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_08_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_08_cfg_rxdis_we),
    .wd     (periph_08_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_08_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_08_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_08_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_08_cfg_slw_pgm_we),
    .wd     (periph_08_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_08_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_08_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_08_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_08_cfg_trie_we),
    .wd     (periph_08_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_08_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_08_cfg_trie_qs)
  );


  // R[periph_08_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_08_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_08_mux_sel_we),
    .wd     (periph_08_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_08_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_08_mux_sel_qs)
  );


  // R[periph_09_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_09_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_09_cfg_chip2pad_we),
    .wd     (periph_09_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_09_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_09_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_09_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_09_cfg_drv0_we),
    .wd     (periph_09_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_09_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_09_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_09_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_09_cfg_drv1_we),
    .wd     (periph_09_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_09_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_09_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_09_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_09_cfg_drv2_we),
    .wd     (periph_09_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_09_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_09_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_09_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_09_cfg_pde_we),
    .wd     (periph_09_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_09_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_09_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_09_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_09_cfg_pp_odrain_selector_we),
    .wd     (periph_09_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_09_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_09_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_09_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_09_cfg_pudis_we),
    .wd     (periph_09_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_09_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_09_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_09_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_09_cfg_rxdis_we),
    .wd     (periph_09_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_09_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_09_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_09_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_09_cfg_slw_pgm_we),
    .wd     (periph_09_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_09_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_09_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_09_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_09_cfg_trie_we),
    .wd     (periph_09_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_09_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_09_cfg_trie_qs)
  );


  // R[periph_09_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_09_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_09_mux_sel_we),
    .wd     (periph_09_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_09_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_09_mux_sel_qs)
  );


  // R[periph_10_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_10_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_10_cfg_chip2pad_we),
    .wd     (periph_10_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_10_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_10_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_10_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_10_cfg_drv0_we),
    .wd     (periph_10_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_10_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_10_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_10_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_10_cfg_drv1_we),
    .wd     (periph_10_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_10_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_10_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_10_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_10_cfg_drv2_we),
    .wd     (periph_10_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_10_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_10_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_10_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_10_cfg_pde_we),
    .wd     (periph_10_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_10_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_10_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_10_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_10_cfg_pp_odrain_selector_we),
    .wd     (periph_10_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_10_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_10_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_10_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_10_cfg_pudis_we),
    .wd     (periph_10_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_10_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_10_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_10_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_10_cfg_rxdis_we),
    .wd     (periph_10_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_10_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_10_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_10_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_10_cfg_slw_pgm_we),
    .wd     (periph_10_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_10_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_10_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_10_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_10_cfg_trie_we),
    .wd     (periph_10_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_10_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_10_cfg_trie_qs)
  );


  // R[periph_10_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_10_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_10_mux_sel_we),
    .wd     (periph_10_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_10_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_10_mux_sel_qs)
  );


  // R[periph_11_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_11_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_11_cfg_chip2pad_we),
    .wd     (periph_11_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_11_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_11_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_11_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_11_cfg_drv0_we),
    .wd     (periph_11_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_11_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_11_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_11_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_11_cfg_drv1_we),
    .wd     (periph_11_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_11_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_11_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_11_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_11_cfg_drv2_we),
    .wd     (periph_11_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_11_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_11_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_11_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_11_cfg_pde_we),
    .wd     (periph_11_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_11_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_11_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_11_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_11_cfg_pp_odrain_selector_we),
    .wd     (periph_11_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_11_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_11_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_11_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_11_cfg_pudis_we),
    .wd     (periph_11_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_11_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_11_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_11_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_11_cfg_rxdis_we),
    .wd     (periph_11_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_11_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_11_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_11_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_11_cfg_slw_pgm_we),
    .wd     (periph_11_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_11_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_11_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_11_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_11_cfg_trie_we),
    .wd     (periph_11_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_11_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_11_cfg_trie_qs)
  );


  // R[periph_11_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_11_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_11_mux_sel_we),
    .wd     (periph_11_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_11_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_11_mux_sel_qs)
  );


  // R[periph_12_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_12_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_12_cfg_chip2pad_we),
    .wd     (periph_12_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_12_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_12_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_12_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_12_cfg_drv0_we),
    .wd     (periph_12_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_12_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_12_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_12_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_12_cfg_drv1_we),
    .wd     (periph_12_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_12_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_12_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_12_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_12_cfg_drv2_we),
    .wd     (periph_12_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_12_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_12_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_12_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_12_cfg_pde_we),
    .wd     (periph_12_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_12_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_12_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_12_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_12_cfg_pp_odrain_selector_we),
    .wd     (periph_12_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_12_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_12_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_12_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_12_cfg_pudis_we),
    .wd     (periph_12_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_12_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_12_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_12_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_12_cfg_rxdis_we),
    .wd     (periph_12_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_12_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_12_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_12_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_12_cfg_slw_pgm_we),
    .wd     (periph_12_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_12_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_12_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_12_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_12_cfg_trie_we),
    .wd     (periph_12_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_12_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_12_cfg_trie_qs)
  );


  // R[periph_12_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_12_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_12_mux_sel_we),
    .wd     (periph_12_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_12_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_12_mux_sel_qs)
  );


  // R[periph_13_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_13_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_13_cfg_chip2pad_we),
    .wd     (periph_13_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_13_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_13_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_13_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_13_cfg_drv0_we),
    .wd     (periph_13_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_13_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_13_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_13_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_13_cfg_drv1_we),
    .wd     (periph_13_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_13_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_13_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_13_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_13_cfg_drv2_we),
    .wd     (periph_13_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_13_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_13_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_13_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_13_cfg_pde_we),
    .wd     (periph_13_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_13_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_13_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_13_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_13_cfg_pp_odrain_selector_we),
    .wd     (periph_13_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_13_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_13_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_13_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_13_cfg_pudis_we),
    .wd     (periph_13_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_13_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_13_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_13_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_13_cfg_rxdis_we),
    .wd     (periph_13_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_13_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_13_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_13_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_13_cfg_slw_pgm_we),
    .wd     (periph_13_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_13_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_13_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_13_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_13_cfg_trie_we),
    .wd     (periph_13_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_13_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_13_cfg_trie_qs)
  );


  // R[periph_13_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_13_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_13_mux_sel_we),
    .wd     (periph_13_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_13_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_13_mux_sel_qs)
  );


  // R[periph_14_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_14_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_14_cfg_chip2pad_we),
    .wd     (periph_14_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_14_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_14_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_14_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_14_cfg_drv0_we),
    .wd     (periph_14_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_14_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_14_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_14_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_14_cfg_drv1_we),
    .wd     (periph_14_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_14_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_14_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_14_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_14_cfg_drv2_we),
    .wd     (periph_14_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_14_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_14_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_14_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_14_cfg_pde_we),
    .wd     (periph_14_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_14_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_14_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_14_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_14_cfg_pp_odrain_selector_we),
    .wd     (periph_14_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_14_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_14_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_14_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_14_cfg_pudis_we),
    .wd     (periph_14_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_14_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_14_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_14_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_14_cfg_rxdis_we),
    .wd     (periph_14_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_14_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_14_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_14_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_14_cfg_slw_pgm_we),
    .wd     (periph_14_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_14_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_14_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_14_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_14_cfg_trie_we),
    .wd     (periph_14_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_14_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_14_cfg_trie_qs)
  );


  // R[periph_14_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_14_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_14_mux_sel_we),
    .wd     (periph_14_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_14_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_14_mux_sel_qs)
  );


  // R[periph_15_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_15_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_15_cfg_chip2pad_we),
    .wd     (periph_15_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_15_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_15_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_15_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_15_cfg_drv0_we),
    .wd     (periph_15_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_15_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_15_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_15_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_15_cfg_drv1_we),
    .wd     (periph_15_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_15_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_15_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_15_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_15_cfg_drv2_we),
    .wd     (periph_15_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_15_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_15_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_15_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_15_cfg_pde_we),
    .wd     (periph_15_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_15_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_15_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_15_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_15_cfg_pp_odrain_selector_we),
    .wd     (periph_15_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_15_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_15_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_15_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_15_cfg_pudis_we),
    .wd     (periph_15_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_15_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_15_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_15_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_15_cfg_rxdis_we),
    .wd     (periph_15_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_15_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_15_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_15_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_15_cfg_slw_pgm_we),
    .wd     (periph_15_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_15_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_15_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_15_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_15_cfg_trie_we),
    .wd     (periph_15_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_15_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_15_cfg_trie_qs)
  );


  // R[periph_15_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_15_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_15_mux_sel_we),
    .wd     (periph_15_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_15_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_15_mux_sel_qs)
  );


  // R[periph_16_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_16_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_16_cfg_chip2pad_we),
    .wd     (periph_16_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_16_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (periph_16_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_16_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_16_cfg_drv0_we),
    .wd     (periph_16_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_16_cfg.drv0.q ),

    // to register interface (read)
    .qs     (periph_16_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_16_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_16_cfg_drv1_we),
    .wd     (periph_16_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_16_cfg.drv1.q ),

    // to register interface (read)
    .qs     (periph_16_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_16_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_16_cfg_drv2_we),
    .wd     (periph_16_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_16_cfg.drv2.q ),

    // to register interface (read)
    .qs     (periph_16_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_16_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_16_cfg_pde_we),
    .wd     (periph_16_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_16_cfg.pde.q ),

    // to register interface (read)
    .qs     (periph_16_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_16_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_16_cfg_pp_odrain_selector_we),
    .wd     (periph_16_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_16_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (periph_16_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_16_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_16_cfg_pudis_we),
    .wd     (periph_16_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_16_cfg.pudis.q ),

    // to register interface (read)
    .qs     (periph_16_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_16_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_16_cfg_rxdis_we),
    .wd     (periph_16_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_16_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (periph_16_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_16_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_16_cfg_slw_pgm_we),
    .wd     (periph_16_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_16_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (periph_16_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_16_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_16_cfg_trie_we),
    .wd     (periph_16_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_16_cfg.trie.q ),

    // to register interface (read)
    .qs     (periph_16_cfg_trie_qs)
  );


  // R[periph_16_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_16_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_16_mux_sel_we),
    .wd     (periph_16_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_16_mux_sel.q ),

    // to register interface (read)
    .qs     (periph_16_mux_sel_qs)
  );


  // R[debug_out0_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out0_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out0_cfg_chip2pad_we),
    .wd     (debug_out0_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out0_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (debug_out0_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out0_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out0_cfg_drv0_we),
    .wd     (debug_out0_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out0_cfg.drv0.q ),

    // to register interface (read)
    .qs     (debug_out0_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out0_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out0_cfg_drv1_we),
    .wd     (debug_out0_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out0_cfg.drv1.q ),

    // to register interface (read)
    .qs     (debug_out0_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out0_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out0_cfg_drv2_we),
    .wd     (debug_out0_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out0_cfg.drv2.q ),

    // to register interface (read)
    .qs     (debug_out0_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out0_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out0_cfg_pde_we),
    .wd     (debug_out0_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out0_cfg.pde.q ),

    // to register interface (read)
    .qs     (debug_out0_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out0_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out0_cfg_pp_odrain_selector_we),
    .wd     (debug_out0_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out0_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (debug_out0_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out0_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out0_cfg_pudis_we),
    .wd     (debug_out0_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out0_cfg.pudis.q ),

    // to register interface (read)
    .qs     (debug_out0_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out0_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out0_cfg_rxdis_we),
    .wd     (debug_out0_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out0_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (debug_out0_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out0_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out0_cfg_slw_pgm_we),
    .wd     (debug_out0_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out0_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (debug_out0_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out0_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out0_cfg_trie_we),
    .wd     (debug_out0_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out0_cfg.trie.q ),

    // to register interface (read)
    .qs     (debug_out0_cfg_trie_qs)
  );


  // R[debug_out0_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h4)
  ) u_debug_out0_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out0_mux_sel_we),
    .wd     (debug_out0_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out0_mux_sel.q ),

    // to register interface (read)
    .qs     (debug_out0_mux_sel_qs)
  );


  // R[debug_out1_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out1_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out1_cfg_chip2pad_we),
    .wd     (debug_out1_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out1_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (debug_out1_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out1_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out1_cfg_drv0_we),
    .wd     (debug_out1_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out1_cfg.drv0.q ),

    // to register interface (read)
    .qs     (debug_out1_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out1_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out1_cfg_drv1_we),
    .wd     (debug_out1_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out1_cfg.drv1.q ),

    // to register interface (read)
    .qs     (debug_out1_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out1_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out1_cfg_drv2_we),
    .wd     (debug_out1_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out1_cfg.drv2.q ),

    // to register interface (read)
    .qs     (debug_out1_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out1_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out1_cfg_pde_we),
    .wd     (debug_out1_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out1_cfg.pde.q ),

    // to register interface (read)
    .qs     (debug_out1_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out1_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out1_cfg_pp_odrain_selector_we),
    .wd     (debug_out1_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out1_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (debug_out1_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out1_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out1_cfg_pudis_we),
    .wd     (debug_out1_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out1_cfg.pudis.q ),

    // to register interface (read)
    .qs     (debug_out1_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out1_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out1_cfg_rxdis_we),
    .wd     (debug_out1_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out1_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (debug_out1_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out1_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out1_cfg_slw_pgm_we),
    .wd     (debug_out1_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out1_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (debug_out1_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out1_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out1_cfg_trie_we),
    .wd     (debug_out1_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out1_cfg.trie.q ),

    // to register interface (read)
    .qs     (debug_out1_cfg_trie_qs)
  );


  // R[debug_out1_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h2)
  ) u_debug_out1_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out1_mux_sel_we),
    .wd     (debug_out1_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out1_mux_sel.q ),

    // to register interface (read)
    .qs     (debug_out1_mux_sel_qs)
  );


  // R[debug_out2_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out2_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out2_cfg_chip2pad_we),
    .wd     (debug_out2_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out2_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (debug_out2_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out2_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out2_cfg_drv0_we),
    .wd     (debug_out2_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out2_cfg.drv0.q ),

    // to register interface (read)
    .qs     (debug_out2_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out2_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out2_cfg_drv1_we),
    .wd     (debug_out2_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out2_cfg.drv1.q ),

    // to register interface (read)
    .qs     (debug_out2_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out2_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out2_cfg_drv2_we),
    .wd     (debug_out2_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out2_cfg.drv2.q ),

    // to register interface (read)
    .qs     (debug_out2_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out2_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out2_cfg_pde_we),
    .wd     (debug_out2_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out2_cfg.pde.q ),

    // to register interface (read)
    .qs     (debug_out2_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out2_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out2_cfg_pp_odrain_selector_we),
    .wd     (debug_out2_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out2_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (debug_out2_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out2_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out2_cfg_pudis_we),
    .wd     (debug_out2_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out2_cfg.pudis.q ),

    // to register interface (read)
    .qs     (debug_out2_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out2_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out2_cfg_rxdis_we),
    .wd     (debug_out2_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out2_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (debug_out2_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out2_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out2_cfg_slw_pgm_we),
    .wd     (debug_out2_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out2_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (debug_out2_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out2_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out2_cfg_trie_we),
    .wd     (debug_out2_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out2_cfg.trie.q ),

    // to register interface (read)
    .qs     (debug_out2_cfg_trie_qs)
  );


  // R[debug_out2_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h9)
  ) u_debug_out2_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out2_mux_sel_we),
    .wd     (debug_out2_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out2_mux_sel.q ),

    // to register interface (read)
    .qs     (debug_out2_mux_sel_qs)
  );


  // R[debug_out3_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out3_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out3_cfg_chip2pad_we),
    .wd     (debug_out3_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out3_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (debug_out3_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out3_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out3_cfg_drv0_we),
    .wd     (debug_out3_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out3_cfg.drv0.q ),

    // to register interface (read)
    .qs     (debug_out3_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out3_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out3_cfg_drv1_we),
    .wd     (debug_out3_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out3_cfg.drv1.q ),

    // to register interface (read)
    .qs     (debug_out3_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out3_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out3_cfg_drv2_we),
    .wd     (debug_out3_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out3_cfg.drv2.q ),

    // to register interface (read)
    .qs     (debug_out3_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out3_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out3_cfg_pde_we),
    .wd     (debug_out3_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out3_cfg.pde.q ),

    // to register interface (read)
    .qs     (debug_out3_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out3_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out3_cfg_pp_odrain_selector_we),
    .wd     (debug_out3_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out3_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (debug_out3_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out3_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out3_cfg_pudis_we),
    .wd     (debug_out3_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out3_cfg.pudis.q ),

    // to register interface (read)
    .qs     (debug_out3_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out3_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out3_cfg_rxdis_we),
    .wd     (debug_out3_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out3_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (debug_out3_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out3_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out3_cfg_slw_pgm_we),
    .wd     (debug_out3_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out3_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (debug_out3_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out3_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out3_cfg_trie_we),
    .wd     (debug_out3_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out3_cfg.trie.q ),

    // to register interface (read)
    .qs     (debug_out3_cfg_trie_qs)
  );


  // R[debug_out3_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h3)
  ) u_debug_out3_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out3_mux_sel_we),
    .wd     (debug_out3_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out3_mux_sel.q ),

    // to register interface (read)
    .qs     (debug_out3_mux_sel_qs)
  );


  // R[debug_out4_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out4_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out4_cfg_chip2pad_we),
    .wd     (debug_out4_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out4_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (debug_out4_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out4_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out4_cfg_drv0_we),
    .wd     (debug_out4_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out4_cfg.drv0.q ),

    // to register interface (read)
    .qs     (debug_out4_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out4_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out4_cfg_drv1_we),
    .wd     (debug_out4_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out4_cfg.drv1.q ),

    // to register interface (read)
    .qs     (debug_out4_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out4_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out4_cfg_drv2_we),
    .wd     (debug_out4_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out4_cfg.drv2.q ),

    // to register interface (read)
    .qs     (debug_out4_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out4_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out4_cfg_pde_we),
    .wd     (debug_out4_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out4_cfg.pde.q ),

    // to register interface (read)
    .qs     (debug_out4_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out4_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out4_cfg_pp_odrain_selector_we),
    .wd     (debug_out4_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out4_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (debug_out4_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out4_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out4_cfg_pudis_we),
    .wd     (debug_out4_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out4_cfg.pudis.q ),

    // to register interface (read)
    .qs     (debug_out4_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_debug_out4_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out4_cfg_rxdis_we),
    .wd     (debug_out4_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out4_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (debug_out4_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out4_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out4_cfg_slw_pgm_we),
    .wd     (debug_out4_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out4_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (debug_out4_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_debug_out4_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out4_cfg_trie_we),
    .wd     (debug_out4_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out4_cfg.trie.q ),

    // to register interface (read)
    .qs     (debug_out4_cfg_trie_qs)
  );


  // R[debug_out4_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h5)
  ) u_debug_out4_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (debug_out4_mux_sel_we),
    .wd     (debug_out4_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.debug_out4_mux_sel.q ),

    // to register interface (read)
    .qs     (debug_out4_mux_sel_qs)
  );


  // R[jtag_pll_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_00_cfg_chip2pad_we),
    .wd     (jtag_pll_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (jtag_pll_00_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_00_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_00_cfg_drv0_we),
    .wd     (jtag_pll_00_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_00_cfg.drv0.q ),

    // to register interface (read)
    .qs     (jtag_pll_00_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_00_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_00_cfg_drv1_we),
    .wd     (jtag_pll_00_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_00_cfg.drv1.q ),

    // to register interface (read)
    .qs     (jtag_pll_00_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_00_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_00_cfg_drv2_we),
    .wd     (jtag_pll_00_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_00_cfg.drv2.q ),

    // to register interface (read)
    .qs     (jtag_pll_00_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_00_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_00_cfg_pde_we),
    .wd     (jtag_pll_00_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_00_cfg.pde.q ),

    // to register interface (read)
    .qs     (jtag_pll_00_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_00_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_00_cfg_pp_odrain_selector_we),
    .wd     (jtag_pll_00_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_00_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (jtag_pll_00_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_00_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_00_cfg_pudis_we),
    .wd     (jtag_pll_00_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_00_cfg.pudis.q ),

    // to register interface (read)
    .qs     (jtag_pll_00_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_00_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_00_cfg_rxdis_we),
    .wd     (jtag_pll_00_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_00_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (jtag_pll_00_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_00_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_00_cfg_slw_pgm_we),
    .wd     (jtag_pll_00_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_00_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (jtag_pll_00_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_00_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_00_cfg_trie_we),
    .wd     (jtag_pll_00_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_00_cfg.trie.q ),

    // to register interface (read)
    .qs     (jtag_pll_00_cfg_trie_qs)
  );


  // R[jtag_pll_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h1)
  ) u_jtag_pll_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_00_mux_sel_we),
    .wd     (jtag_pll_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_00_mux_sel.q ),

    // to register interface (read)
    .qs     (jtag_pll_00_mux_sel_qs)
  );


  // R[jtag_pll_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_01_cfg_chip2pad_we),
    .wd     (jtag_pll_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (jtag_pll_01_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_01_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_01_cfg_drv0_we),
    .wd     (jtag_pll_01_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_01_cfg.drv0.q ),

    // to register interface (read)
    .qs     (jtag_pll_01_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_01_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_01_cfg_drv1_we),
    .wd     (jtag_pll_01_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_01_cfg.drv1.q ),

    // to register interface (read)
    .qs     (jtag_pll_01_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_01_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_01_cfg_drv2_we),
    .wd     (jtag_pll_01_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_01_cfg.drv2.q ),

    // to register interface (read)
    .qs     (jtag_pll_01_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_01_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_01_cfg_pde_we),
    .wd     (jtag_pll_01_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_01_cfg.pde.q ),

    // to register interface (read)
    .qs     (jtag_pll_01_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_01_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_01_cfg_pp_odrain_selector_we),
    .wd     (jtag_pll_01_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_01_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (jtag_pll_01_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_01_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_01_cfg_pudis_we),
    .wd     (jtag_pll_01_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_01_cfg.pudis.q ),

    // to register interface (read)
    .qs     (jtag_pll_01_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_01_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_01_cfg_rxdis_we),
    .wd     (jtag_pll_01_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_01_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (jtag_pll_01_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_01_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_01_cfg_slw_pgm_we),
    .wd     (jtag_pll_01_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_01_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (jtag_pll_01_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_01_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_01_cfg_trie_we),
    .wd     (jtag_pll_01_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_01_cfg.trie.q ),

    // to register interface (read)
    .qs     (jtag_pll_01_cfg_trie_qs)
  );


  // R[jtag_pll_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h1)
  ) u_jtag_pll_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_01_mux_sel_we),
    .wd     (jtag_pll_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_01_mux_sel.q ),

    // to register interface (read)
    .qs     (jtag_pll_01_mux_sel_qs)
  );


  // R[jtag_pll_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_02_cfg_chip2pad_we),
    .wd     (jtag_pll_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (jtag_pll_02_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_02_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_02_cfg_drv0_we),
    .wd     (jtag_pll_02_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_02_cfg.drv0.q ),

    // to register interface (read)
    .qs     (jtag_pll_02_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_02_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_02_cfg_drv1_we),
    .wd     (jtag_pll_02_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_02_cfg.drv1.q ),

    // to register interface (read)
    .qs     (jtag_pll_02_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_02_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_02_cfg_drv2_we),
    .wd     (jtag_pll_02_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_02_cfg.drv2.q ),

    // to register interface (read)
    .qs     (jtag_pll_02_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_02_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_02_cfg_pde_we),
    .wd     (jtag_pll_02_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_02_cfg.pde.q ),

    // to register interface (read)
    .qs     (jtag_pll_02_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_02_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_02_cfg_pp_odrain_selector_we),
    .wd     (jtag_pll_02_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_02_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (jtag_pll_02_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_02_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_02_cfg_pudis_we),
    .wd     (jtag_pll_02_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_02_cfg.pudis.q ),

    // to register interface (read)
    .qs     (jtag_pll_02_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_02_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_02_cfg_rxdis_we),
    .wd     (jtag_pll_02_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_02_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (jtag_pll_02_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_02_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_02_cfg_slw_pgm_we),
    .wd     (jtag_pll_02_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_02_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (jtag_pll_02_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_02_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_02_cfg_trie_we),
    .wd     (jtag_pll_02_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_02_cfg.trie.q ),

    // to register interface (read)
    .qs     (jtag_pll_02_cfg_trie_qs)
  );


  // R[jtag_pll_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h1)
  ) u_jtag_pll_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_02_mux_sel_we),
    .wd     (jtag_pll_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_02_mux_sel.q ),

    // to register interface (read)
    .qs     (jtag_pll_02_mux_sel_qs)
  );


  // R[jtag_pll_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_03_cfg_chip2pad_we),
    .wd     (jtag_pll_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (jtag_pll_03_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_03_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_03_cfg_drv0_we),
    .wd     (jtag_pll_03_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_03_cfg.drv0.q ),

    // to register interface (read)
    .qs     (jtag_pll_03_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_03_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_03_cfg_drv1_we),
    .wd     (jtag_pll_03_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_03_cfg.drv1.q ),

    // to register interface (read)
    .qs     (jtag_pll_03_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_03_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_03_cfg_drv2_we),
    .wd     (jtag_pll_03_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_03_cfg.drv2.q ),

    // to register interface (read)
    .qs     (jtag_pll_03_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_03_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_03_cfg_pde_we),
    .wd     (jtag_pll_03_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_03_cfg.pde.q ),

    // to register interface (read)
    .qs     (jtag_pll_03_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_03_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_03_cfg_pp_odrain_selector_we),
    .wd     (jtag_pll_03_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_03_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (jtag_pll_03_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_03_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_03_cfg_pudis_we),
    .wd     (jtag_pll_03_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_03_cfg.pudis.q ),

    // to register interface (read)
    .qs     (jtag_pll_03_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_03_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_03_cfg_rxdis_we),
    .wd     (jtag_pll_03_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_03_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (jtag_pll_03_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_03_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_03_cfg_slw_pgm_we),
    .wd     (jtag_pll_03_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_03_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (jtag_pll_03_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_03_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_03_cfg_trie_we),
    .wd     (jtag_pll_03_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_03_cfg.trie.q ),

    // to register interface (read)
    .qs     (jtag_pll_03_cfg_trie_qs)
  );


  // R[jtag_pll_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h1)
  ) u_jtag_pll_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_03_mux_sel_we),
    .wd     (jtag_pll_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_03_mux_sel.q ),

    // to register interface (read)
    .qs     (jtag_pll_03_mux_sel_qs)
  );


  // R[jtag_pll_04_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_04_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_04_cfg_chip2pad_we),
    .wd     (jtag_pll_04_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_04_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (jtag_pll_04_cfg_chip2pad_qs)
  );


  //   F[drv0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_04_cfg_drv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_04_cfg_drv0_we),
    .wd     (jtag_pll_04_cfg_drv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_04_cfg.drv0.q ),

    // to register interface (read)
    .qs     (jtag_pll_04_cfg_drv0_qs)
  );


  //   F[drv1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_04_cfg_drv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_04_cfg_drv1_we),
    .wd     (jtag_pll_04_cfg_drv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_04_cfg.drv1.q ),

    // to register interface (read)
    .qs     (jtag_pll_04_cfg_drv1_qs)
  );


  //   F[drv2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_04_cfg_drv2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_04_cfg_drv2_we),
    .wd     (jtag_pll_04_cfg_drv2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_04_cfg.drv2.q ),

    // to register interface (read)
    .qs     (jtag_pll_04_cfg_drv2_qs)
  );


  //   F[pde]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_04_cfg_pde (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_04_cfg_pde_we),
    .wd     (jtag_pll_04_cfg_pde_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_04_cfg.pde.q ),

    // to register interface (read)
    .qs     (jtag_pll_04_cfg_pde_qs)
  );


  //   F[pp_odrain_selector]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_04_cfg_pp_odrain_selector (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_04_cfg_pp_odrain_selector_we),
    .wd     (jtag_pll_04_cfg_pp_odrain_selector_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_04_cfg.pp_odrain_selector.q ),

    // to register interface (read)
    .qs     (jtag_pll_04_cfg_pp_odrain_selector_qs)
  );


  //   F[pudis]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_04_cfg_pudis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_04_cfg_pudis_we),
    .wd     (jtag_pll_04_cfg_pudis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_04_cfg.pudis.q ),

    // to register interface (read)
    .qs     (jtag_pll_04_cfg_pudis_qs)
  );


  //   F[rxdis]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_jtag_pll_04_cfg_rxdis (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_04_cfg_rxdis_we),
    .wd     (jtag_pll_04_cfg_rxdis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_04_cfg.rxdis.q ),

    // to register interface (read)
    .qs     (jtag_pll_04_cfg_rxdis_qs)
  );


  //   F[slw_pgm]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_04_cfg_slw_pgm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_04_cfg_slw_pgm_we),
    .wd     (jtag_pll_04_cfg_slw_pgm_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_04_cfg.slw_pgm.q ),

    // to register interface (read)
    .qs     (jtag_pll_04_cfg_slw_pgm_qs)
  );


  //   F[trie]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_jtag_pll_04_cfg_trie (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_04_cfg_trie_we),
    .wd     (jtag_pll_04_cfg_trie_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_04_cfg.trie.q ),

    // to register interface (read)
    .qs     (jtag_pll_04_cfg_trie_qs)
  );


  // R[jtag_pll_04_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h1)
  ) u_jtag_pll_04_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtag_pll_04_mux_sel_we),
    .wd     (jtag_pll_04_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_pll_04_mux_sel.q ),

    // to register interface (read)
    .qs     (jtag_pll_04_mux_sel_qs)
  );




  logic [124:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[  0] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_INFO_OFFSET);
    addr_hit[  1] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_00_CFG_OFFSET);
    addr_hit[  2] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_00_MUX_SEL_OFFSET);
    addr_hit[  3] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_01_CFG_OFFSET);
    addr_hit[  4] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_01_MUX_SEL_OFFSET);
    addr_hit[  5] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_02_CFG_OFFSET);
    addr_hit[  6] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_02_MUX_SEL_OFFSET);
    addr_hit[  7] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_03_CFG_OFFSET);
    addr_hit[  8] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_03_MUX_SEL_OFFSET);
    addr_hit[  9] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_04_CFG_OFFSET);
    addr_hit[ 10] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_04_MUX_SEL_OFFSET);
    addr_hit[ 11] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_05_CFG_OFFSET);
    addr_hit[ 12] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_05_MUX_SEL_OFFSET);
    addr_hit[ 13] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_06_CFG_OFFSET);
    addr_hit[ 14] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_06_MUX_SEL_OFFSET);
    addr_hit[ 15] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_07_CFG_OFFSET);
    addr_hit[ 16] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_07_MUX_SEL_OFFSET);
    addr_hit[ 17] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_08_CFG_OFFSET);
    addr_hit[ 18] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_08_MUX_SEL_OFFSET);
    addr_hit[ 19] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_09_CFG_OFFSET);
    addr_hit[ 20] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_09_MUX_SEL_OFFSET);
    addr_hit[ 21] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_10_CFG_OFFSET);
    addr_hit[ 22] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_HOST_10_MUX_SEL_OFFSET);
    addr_hit[ 23] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_00_CFG_OFFSET);
    addr_hit[ 24] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_00_MUX_SEL_OFFSET);
    addr_hit[ 25] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_01_CFG_OFFSET);
    addr_hit[ 26] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_01_MUX_SEL_OFFSET);
    addr_hit[ 27] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_02_CFG_OFFSET);
    addr_hit[ 28] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_02_MUX_SEL_OFFSET);
    addr_hit[ 29] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_03_CFG_OFFSET);
    addr_hit[ 30] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_03_MUX_SEL_OFFSET);
    addr_hit[ 31] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_04_CFG_OFFSET);
    addr_hit[ 32] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_04_MUX_SEL_OFFSET);
    addr_hit[ 33] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_05_CFG_OFFSET);
    addr_hit[ 34] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_05_MUX_SEL_OFFSET);
    addr_hit[ 35] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_06_CFG_OFFSET);
    addr_hit[ 36] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_06_MUX_SEL_OFFSET);
    addr_hit[ 37] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_07_CFG_OFFSET);
    addr_hit[ 38] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_SECURE_07_MUX_SEL_OFFSET);
    addr_hit[ 39] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_00_CFG_OFFSET);
    addr_hit[ 40] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_00_MUX_SEL_OFFSET);
    addr_hit[ 41] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_01_CFG_OFFSET);
    addr_hit[ 42] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_01_MUX_SEL_OFFSET);
    addr_hit[ 43] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_02_CFG_OFFSET);
    addr_hit[ 44] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_02_MUX_SEL_OFFSET);
    addr_hit[ 45] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_03_CFG_OFFSET);
    addr_hit[ 46] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_03_MUX_SEL_OFFSET);
    addr_hit[ 47] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_04_CFG_OFFSET);
    addr_hit[ 48] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_04_MUX_SEL_OFFSET);
    addr_hit[ 49] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_05_CFG_OFFSET);
    addr_hit[ 50] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_05_MUX_SEL_OFFSET);
    addr_hit[ 51] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_06_CFG_OFFSET);
    addr_hit[ 52] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_06_MUX_SEL_OFFSET);
    addr_hit[ 53] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_07_CFG_OFFSET);
    addr_hit[ 54] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_07_MUX_SEL_OFFSET);
    addr_hit[ 55] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_08_CFG_OFFSET);
    addr_hit[ 56] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_08_MUX_SEL_OFFSET);
    addr_hit[ 57] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_09_CFG_OFFSET);
    addr_hit[ 58] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_09_MUX_SEL_OFFSET);
    addr_hit[ 59] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_10_CFG_OFFSET);
    addr_hit[ 60] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_10_MUX_SEL_OFFSET);
    addr_hit[ 61] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_11_CFG_OFFSET);
    addr_hit[ 62] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_11_MUX_SEL_OFFSET);
    addr_hit[ 63] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_12_CFG_OFFSET);
    addr_hit[ 64] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_12_MUX_SEL_OFFSET);
    addr_hit[ 65] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_13_CFG_OFFSET);
    addr_hit[ 66] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_13_MUX_SEL_OFFSET);
    addr_hit[ 67] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_14_CFG_OFFSET);
    addr_hit[ 68] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_14_MUX_SEL_OFFSET);
    addr_hit[ 69] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_15_CFG_OFFSET);
    addr_hit[ 70] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_GPIO_15_MUX_SEL_OFFSET);
    addr_hit[ 71] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_00_CFG_OFFSET);
    addr_hit[ 72] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_00_MUX_SEL_OFFSET);
    addr_hit[ 73] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_01_CFG_OFFSET);
    addr_hit[ 74] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_01_MUX_SEL_OFFSET);
    addr_hit[ 75] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_02_CFG_OFFSET);
    addr_hit[ 76] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_02_MUX_SEL_OFFSET);
    addr_hit[ 77] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_03_CFG_OFFSET);
    addr_hit[ 78] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_03_MUX_SEL_OFFSET);
    addr_hit[ 79] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_04_CFG_OFFSET);
    addr_hit[ 80] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_04_MUX_SEL_OFFSET);
    addr_hit[ 81] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_05_CFG_OFFSET);
    addr_hit[ 82] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_05_MUX_SEL_OFFSET);
    addr_hit[ 83] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_06_CFG_OFFSET);
    addr_hit[ 84] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_06_MUX_SEL_OFFSET);
    addr_hit[ 85] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_07_CFG_OFFSET);
    addr_hit[ 86] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_07_MUX_SEL_OFFSET);
    addr_hit[ 87] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_08_CFG_OFFSET);
    addr_hit[ 88] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_08_MUX_SEL_OFFSET);
    addr_hit[ 89] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_09_CFG_OFFSET);
    addr_hit[ 90] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_09_MUX_SEL_OFFSET);
    addr_hit[ 91] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_10_CFG_OFFSET);
    addr_hit[ 92] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_10_MUX_SEL_OFFSET);
    addr_hit[ 93] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_11_CFG_OFFSET);
    addr_hit[ 94] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_11_MUX_SEL_OFFSET);
    addr_hit[ 95] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_12_CFG_OFFSET);
    addr_hit[ 96] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_12_MUX_SEL_OFFSET);
    addr_hit[ 97] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_13_CFG_OFFSET);
    addr_hit[ 98] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_13_MUX_SEL_OFFSET);
    addr_hit[ 99] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_14_CFG_OFFSET);
    addr_hit[100] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_14_MUX_SEL_OFFSET);
    addr_hit[101] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_15_CFG_OFFSET);
    addr_hit[102] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_15_MUX_SEL_OFFSET);
    addr_hit[103] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_16_CFG_OFFSET);
    addr_hit[104] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERIPH_16_MUX_SEL_OFFSET);
    addr_hit[105] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_DEBUG_OUT0_CFG_OFFSET);
    addr_hit[106] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_DEBUG_OUT0_MUX_SEL_OFFSET);
    addr_hit[107] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_DEBUG_OUT1_CFG_OFFSET);
    addr_hit[108] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_DEBUG_OUT1_MUX_SEL_OFFSET);
    addr_hit[109] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_DEBUG_OUT2_CFG_OFFSET);
    addr_hit[110] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_DEBUG_OUT2_MUX_SEL_OFFSET);
    addr_hit[111] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_DEBUG_OUT3_CFG_OFFSET);
    addr_hit[112] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_DEBUG_OUT3_MUX_SEL_OFFSET);
    addr_hit[113] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_DEBUG_OUT4_CFG_OFFSET);
    addr_hit[114] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_DEBUG_OUT4_MUX_SEL_OFFSET);
    addr_hit[115] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_JTAG_PLL_00_CFG_OFFSET);
    addr_hit[116] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_JTAG_PLL_00_MUX_SEL_OFFSET);
    addr_hit[117] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_JTAG_PLL_01_CFG_OFFSET);
    addr_hit[118] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_JTAG_PLL_01_MUX_SEL_OFFSET);
    addr_hit[119] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_JTAG_PLL_02_CFG_OFFSET);
    addr_hit[120] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_JTAG_PLL_02_MUX_SEL_OFFSET);
    addr_hit[121] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_JTAG_PLL_03_CFG_OFFSET);
    addr_hit[122] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_JTAG_PLL_03_MUX_SEL_OFFSET);
    addr_hit[123] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_JTAG_PLL_04_CFG_OFFSET);
    addr_hit[124] = (reg_addr == CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_JTAG_PLL_04_MUX_SEL_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[  0] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[  0] & ~reg_be))) |
               (addr_hit[  1] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[  1] & ~reg_be))) |
               (addr_hit[  2] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[  2] & ~reg_be))) |
               (addr_hit[  3] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[  3] & ~reg_be))) |
               (addr_hit[  4] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[  4] & ~reg_be))) |
               (addr_hit[  5] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[  5] & ~reg_be))) |
               (addr_hit[  6] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[  6] & ~reg_be))) |
               (addr_hit[  7] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[  7] & ~reg_be))) |
               (addr_hit[  8] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[  8] & ~reg_be))) |
               (addr_hit[  9] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[  9] & ~reg_be))) |
               (addr_hit[ 10] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 10] & ~reg_be))) |
               (addr_hit[ 11] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 11] & ~reg_be))) |
               (addr_hit[ 12] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 12] & ~reg_be))) |
               (addr_hit[ 13] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 13] & ~reg_be))) |
               (addr_hit[ 14] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 14] & ~reg_be))) |
               (addr_hit[ 15] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 15] & ~reg_be))) |
               (addr_hit[ 16] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 16] & ~reg_be))) |
               (addr_hit[ 17] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 17] & ~reg_be))) |
               (addr_hit[ 18] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 18] & ~reg_be))) |
               (addr_hit[ 19] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 19] & ~reg_be))) |
               (addr_hit[ 20] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 20] & ~reg_be))) |
               (addr_hit[ 21] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 21] & ~reg_be))) |
               (addr_hit[ 22] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 22] & ~reg_be))) |
               (addr_hit[ 23] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 23] & ~reg_be))) |
               (addr_hit[ 24] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 24] & ~reg_be))) |
               (addr_hit[ 25] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 25] & ~reg_be))) |
               (addr_hit[ 26] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 26] & ~reg_be))) |
               (addr_hit[ 27] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 27] & ~reg_be))) |
               (addr_hit[ 28] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 28] & ~reg_be))) |
               (addr_hit[ 29] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 29] & ~reg_be))) |
               (addr_hit[ 30] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 30] & ~reg_be))) |
               (addr_hit[ 31] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 31] & ~reg_be))) |
               (addr_hit[ 32] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 32] & ~reg_be))) |
               (addr_hit[ 33] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 33] & ~reg_be))) |
               (addr_hit[ 34] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 34] & ~reg_be))) |
               (addr_hit[ 35] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 35] & ~reg_be))) |
               (addr_hit[ 36] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 36] & ~reg_be))) |
               (addr_hit[ 37] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 37] & ~reg_be))) |
               (addr_hit[ 38] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 38] & ~reg_be))) |
               (addr_hit[ 39] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 39] & ~reg_be))) |
               (addr_hit[ 40] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 40] & ~reg_be))) |
               (addr_hit[ 41] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 41] & ~reg_be))) |
               (addr_hit[ 42] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 42] & ~reg_be))) |
               (addr_hit[ 43] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 43] & ~reg_be))) |
               (addr_hit[ 44] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 44] & ~reg_be))) |
               (addr_hit[ 45] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 45] & ~reg_be))) |
               (addr_hit[ 46] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 46] & ~reg_be))) |
               (addr_hit[ 47] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 47] & ~reg_be))) |
               (addr_hit[ 48] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 48] & ~reg_be))) |
               (addr_hit[ 49] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 49] & ~reg_be))) |
               (addr_hit[ 50] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 50] & ~reg_be))) |
               (addr_hit[ 51] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 51] & ~reg_be))) |
               (addr_hit[ 52] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 52] & ~reg_be))) |
               (addr_hit[ 53] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 53] & ~reg_be))) |
               (addr_hit[ 54] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 54] & ~reg_be))) |
               (addr_hit[ 55] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 55] & ~reg_be))) |
               (addr_hit[ 56] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 56] & ~reg_be))) |
               (addr_hit[ 57] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 57] & ~reg_be))) |
               (addr_hit[ 58] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 58] & ~reg_be))) |
               (addr_hit[ 59] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 59] & ~reg_be))) |
               (addr_hit[ 60] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 60] & ~reg_be))) |
               (addr_hit[ 61] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 61] & ~reg_be))) |
               (addr_hit[ 62] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 62] & ~reg_be))) |
               (addr_hit[ 63] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 63] & ~reg_be))) |
               (addr_hit[ 64] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 64] & ~reg_be))) |
               (addr_hit[ 65] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 65] & ~reg_be))) |
               (addr_hit[ 66] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 66] & ~reg_be))) |
               (addr_hit[ 67] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 67] & ~reg_be))) |
               (addr_hit[ 68] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 68] & ~reg_be))) |
               (addr_hit[ 69] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 69] & ~reg_be))) |
               (addr_hit[ 70] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 70] & ~reg_be))) |
               (addr_hit[ 71] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 71] & ~reg_be))) |
               (addr_hit[ 72] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 72] & ~reg_be))) |
               (addr_hit[ 73] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 73] & ~reg_be))) |
               (addr_hit[ 74] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 74] & ~reg_be))) |
               (addr_hit[ 75] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 75] & ~reg_be))) |
               (addr_hit[ 76] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 76] & ~reg_be))) |
               (addr_hit[ 77] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 77] & ~reg_be))) |
               (addr_hit[ 78] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 78] & ~reg_be))) |
               (addr_hit[ 79] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 79] & ~reg_be))) |
               (addr_hit[ 80] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 80] & ~reg_be))) |
               (addr_hit[ 81] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 81] & ~reg_be))) |
               (addr_hit[ 82] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 82] & ~reg_be))) |
               (addr_hit[ 83] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 83] & ~reg_be))) |
               (addr_hit[ 84] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 84] & ~reg_be))) |
               (addr_hit[ 85] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 85] & ~reg_be))) |
               (addr_hit[ 86] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 86] & ~reg_be))) |
               (addr_hit[ 87] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 87] & ~reg_be))) |
               (addr_hit[ 88] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 88] & ~reg_be))) |
               (addr_hit[ 89] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 89] & ~reg_be))) |
               (addr_hit[ 90] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 90] & ~reg_be))) |
               (addr_hit[ 91] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 91] & ~reg_be))) |
               (addr_hit[ 92] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 92] & ~reg_be))) |
               (addr_hit[ 93] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 93] & ~reg_be))) |
               (addr_hit[ 94] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 94] & ~reg_be))) |
               (addr_hit[ 95] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 95] & ~reg_be))) |
               (addr_hit[ 96] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 96] & ~reg_be))) |
               (addr_hit[ 97] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 97] & ~reg_be))) |
               (addr_hit[ 98] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 98] & ~reg_be))) |
               (addr_hit[ 99] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[ 99] & ~reg_be))) |
               (addr_hit[100] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[100] & ~reg_be))) |
               (addr_hit[101] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[101] & ~reg_be))) |
               (addr_hit[102] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[102] & ~reg_be))) |
               (addr_hit[103] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[103] & ~reg_be))) |
               (addr_hit[104] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[104] & ~reg_be))) |
               (addr_hit[105] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[105] & ~reg_be))) |
               (addr_hit[106] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[106] & ~reg_be))) |
               (addr_hit[107] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[107] & ~reg_be))) |
               (addr_hit[108] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[108] & ~reg_be))) |
               (addr_hit[109] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[109] & ~reg_be))) |
               (addr_hit[110] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[110] & ~reg_be))) |
               (addr_hit[111] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[111] & ~reg_be))) |
               (addr_hit[112] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[112] & ~reg_be))) |
               (addr_hit[113] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[113] & ~reg_be))) |
               (addr_hit[114] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[114] & ~reg_be))) |
               (addr_hit[115] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[115] & ~reg_be))) |
               (addr_hit[116] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[116] & ~reg_be))) |
               (addr_hit[117] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[117] & ~reg_be))) |
               (addr_hit[118] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[118] & ~reg_be))) |
               (addr_hit[119] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[119] & ~reg_be))) |
               (addr_hit[120] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[120] & ~reg_be))) |
               (addr_hit[121] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[121] & ~reg_be))) |
               (addr_hit[122] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[122] & ~reg_be))) |
               (addr_hit[123] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[123] & ~reg_be))) |
               (addr_hit[124] & (|(CARFIELD_PADFRAME_BEHAV_PERIPH_CONFIG_PERMIT[124] & ~reg_be)))));
  end

  assign host_00_cfg_chip2pad_we = addr_hit[1] & reg_we & !reg_error;
  assign host_00_cfg_chip2pad_wd = reg_wdata[0];

  assign host_00_cfg_drv0_we = addr_hit[1] & reg_we & !reg_error;
  assign host_00_cfg_drv0_wd = reg_wdata[1];

  assign host_00_cfg_drv1_we = addr_hit[1] & reg_we & !reg_error;
  assign host_00_cfg_drv1_wd = reg_wdata[2];

  assign host_00_cfg_drv2_we = addr_hit[1] & reg_we & !reg_error;
  assign host_00_cfg_drv2_wd = reg_wdata[3];

  assign host_00_cfg_pde_we = addr_hit[1] & reg_we & !reg_error;
  assign host_00_cfg_pde_wd = reg_wdata[4];

  assign host_00_cfg_pp_odrain_selector_we = addr_hit[1] & reg_we & !reg_error;
  assign host_00_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign host_00_cfg_pudis_we = addr_hit[1] & reg_we & !reg_error;
  assign host_00_cfg_pudis_wd = reg_wdata[6];

  assign host_00_cfg_rxdis_we = addr_hit[1] & reg_we & !reg_error;
  assign host_00_cfg_rxdis_wd = reg_wdata[7];

  assign host_00_cfg_slw_pgm_we = addr_hit[1] & reg_we & !reg_error;
  assign host_00_cfg_slw_pgm_wd = reg_wdata[8];

  assign host_00_cfg_trie_we = addr_hit[1] & reg_we & !reg_error;
  assign host_00_cfg_trie_wd = reg_wdata[9];

  assign host_00_mux_sel_we = addr_hit[2] & reg_we & !reg_error;
  assign host_00_mux_sel_wd = reg_wdata[0];

  assign host_01_cfg_chip2pad_we = addr_hit[3] & reg_we & !reg_error;
  assign host_01_cfg_chip2pad_wd = reg_wdata[0];

  assign host_01_cfg_drv0_we = addr_hit[3] & reg_we & !reg_error;
  assign host_01_cfg_drv0_wd = reg_wdata[1];

  assign host_01_cfg_drv1_we = addr_hit[3] & reg_we & !reg_error;
  assign host_01_cfg_drv1_wd = reg_wdata[2];

  assign host_01_cfg_drv2_we = addr_hit[3] & reg_we & !reg_error;
  assign host_01_cfg_drv2_wd = reg_wdata[3];

  assign host_01_cfg_pde_we = addr_hit[3] & reg_we & !reg_error;
  assign host_01_cfg_pde_wd = reg_wdata[4];

  assign host_01_cfg_pp_odrain_selector_we = addr_hit[3] & reg_we & !reg_error;
  assign host_01_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign host_01_cfg_pudis_we = addr_hit[3] & reg_we & !reg_error;
  assign host_01_cfg_pudis_wd = reg_wdata[6];

  assign host_01_cfg_rxdis_we = addr_hit[3] & reg_we & !reg_error;
  assign host_01_cfg_rxdis_wd = reg_wdata[7];

  assign host_01_cfg_slw_pgm_we = addr_hit[3] & reg_we & !reg_error;
  assign host_01_cfg_slw_pgm_wd = reg_wdata[8];

  assign host_01_cfg_trie_we = addr_hit[3] & reg_we & !reg_error;
  assign host_01_cfg_trie_wd = reg_wdata[9];

  assign host_01_mux_sel_we = addr_hit[4] & reg_we & !reg_error;
  assign host_01_mux_sel_wd = reg_wdata[0];

  assign host_02_cfg_chip2pad_we = addr_hit[5] & reg_we & !reg_error;
  assign host_02_cfg_chip2pad_wd = reg_wdata[0];

  assign host_02_cfg_drv0_we = addr_hit[5] & reg_we & !reg_error;
  assign host_02_cfg_drv0_wd = reg_wdata[1];

  assign host_02_cfg_drv1_we = addr_hit[5] & reg_we & !reg_error;
  assign host_02_cfg_drv1_wd = reg_wdata[2];

  assign host_02_cfg_drv2_we = addr_hit[5] & reg_we & !reg_error;
  assign host_02_cfg_drv2_wd = reg_wdata[3];

  assign host_02_cfg_pde_we = addr_hit[5] & reg_we & !reg_error;
  assign host_02_cfg_pde_wd = reg_wdata[4];

  assign host_02_cfg_pp_odrain_selector_we = addr_hit[5] & reg_we & !reg_error;
  assign host_02_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign host_02_cfg_pudis_we = addr_hit[5] & reg_we & !reg_error;
  assign host_02_cfg_pudis_wd = reg_wdata[6];

  assign host_02_cfg_rxdis_we = addr_hit[5] & reg_we & !reg_error;
  assign host_02_cfg_rxdis_wd = reg_wdata[7];

  assign host_02_cfg_slw_pgm_we = addr_hit[5] & reg_we & !reg_error;
  assign host_02_cfg_slw_pgm_wd = reg_wdata[8];

  assign host_02_cfg_trie_we = addr_hit[5] & reg_we & !reg_error;
  assign host_02_cfg_trie_wd = reg_wdata[9];

  assign host_02_mux_sel_we = addr_hit[6] & reg_we & !reg_error;
  assign host_02_mux_sel_wd = reg_wdata[0];

  assign host_03_cfg_chip2pad_we = addr_hit[7] & reg_we & !reg_error;
  assign host_03_cfg_chip2pad_wd = reg_wdata[0];

  assign host_03_cfg_drv0_we = addr_hit[7] & reg_we & !reg_error;
  assign host_03_cfg_drv0_wd = reg_wdata[1];

  assign host_03_cfg_drv1_we = addr_hit[7] & reg_we & !reg_error;
  assign host_03_cfg_drv1_wd = reg_wdata[2];

  assign host_03_cfg_drv2_we = addr_hit[7] & reg_we & !reg_error;
  assign host_03_cfg_drv2_wd = reg_wdata[3];

  assign host_03_cfg_pde_we = addr_hit[7] & reg_we & !reg_error;
  assign host_03_cfg_pde_wd = reg_wdata[4];

  assign host_03_cfg_pp_odrain_selector_we = addr_hit[7] & reg_we & !reg_error;
  assign host_03_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign host_03_cfg_pudis_we = addr_hit[7] & reg_we & !reg_error;
  assign host_03_cfg_pudis_wd = reg_wdata[6];

  assign host_03_cfg_rxdis_we = addr_hit[7] & reg_we & !reg_error;
  assign host_03_cfg_rxdis_wd = reg_wdata[7];

  assign host_03_cfg_slw_pgm_we = addr_hit[7] & reg_we & !reg_error;
  assign host_03_cfg_slw_pgm_wd = reg_wdata[8];

  assign host_03_cfg_trie_we = addr_hit[7] & reg_we & !reg_error;
  assign host_03_cfg_trie_wd = reg_wdata[9];

  assign host_03_mux_sel_we = addr_hit[8] & reg_we & !reg_error;
  assign host_03_mux_sel_wd = reg_wdata[0];

  assign host_04_cfg_chip2pad_we = addr_hit[9] & reg_we & !reg_error;
  assign host_04_cfg_chip2pad_wd = reg_wdata[0];

  assign host_04_cfg_drv0_we = addr_hit[9] & reg_we & !reg_error;
  assign host_04_cfg_drv0_wd = reg_wdata[1];

  assign host_04_cfg_drv1_we = addr_hit[9] & reg_we & !reg_error;
  assign host_04_cfg_drv1_wd = reg_wdata[2];

  assign host_04_cfg_drv2_we = addr_hit[9] & reg_we & !reg_error;
  assign host_04_cfg_drv2_wd = reg_wdata[3];

  assign host_04_cfg_pde_we = addr_hit[9] & reg_we & !reg_error;
  assign host_04_cfg_pde_wd = reg_wdata[4];

  assign host_04_cfg_pp_odrain_selector_we = addr_hit[9] & reg_we & !reg_error;
  assign host_04_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign host_04_cfg_pudis_we = addr_hit[9] & reg_we & !reg_error;
  assign host_04_cfg_pudis_wd = reg_wdata[6];

  assign host_04_cfg_rxdis_we = addr_hit[9] & reg_we & !reg_error;
  assign host_04_cfg_rxdis_wd = reg_wdata[7];

  assign host_04_cfg_slw_pgm_we = addr_hit[9] & reg_we & !reg_error;
  assign host_04_cfg_slw_pgm_wd = reg_wdata[8];

  assign host_04_cfg_trie_we = addr_hit[9] & reg_we & !reg_error;
  assign host_04_cfg_trie_wd = reg_wdata[9];

  assign host_04_mux_sel_we = addr_hit[10] & reg_we & !reg_error;
  assign host_04_mux_sel_wd = reg_wdata[0];

  assign host_05_cfg_chip2pad_we = addr_hit[11] & reg_we & !reg_error;
  assign host_05_cfg_chip2pad_wd = reg_wdata[0];

  assign host_05_cfg_drv0_we = addr_hit[11] & reg_we & !reg_error;
  assign host_05_cfg_drv0_wd = reg_wdata[1];

  assign host_05_cfg_drv1_we = addr_hit[11] & reg_we & !reg_error;
  assign host_05_cfg_drv1_wd = reg_wdata[2];

  assign host_05_cfg_drv2_we = addr_hit[11] & reg_we & !reg_error;
  assign host_05_cfg_drv2_wd = reg_wdata[3];

  assign host_05_cfg_pde_we = addr_hit[11] & reg_we & !reg_error;
  assign host_05_cfg_pde_wd = reg_wdata[4];

  assign host_05_cfg_pp_odrain_selector_we = addr_hit[11] & reg_we & !reg_error;
  assign host_05_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign host_05_cfg_pudis_we = addr_hit[11] & reg_we & !reg_error;
  assign host_05_cfg_pudis_wd = reg_wdata[6];

  assign host_05_cfg_rxdis_we = addr_hit[11] & reg_we & !reg_error;
  assign host_05_cfg_rxdis_wd = reg_wdata[7];

  assign host_05_cfg_slw_pgm_we = addr_hit[11] & reg_we & !reg_error;
  assign host_05_cfg_slw_pgm_wd = reg_wdata[8];

  assign host_05_cfg_trie_we = addr_hit[11] & reg_we & !reg_error;
  assign host_05_cfg_trie_wd = reg_wdata[9];

  assign host_05_mux_sel_we = addr_hit[12] & reg_we & !reg_error;
  assign host_05_mux_sel_wd = reg_wdata[0];

  assign host_06_cfg_chip2pad_we = addr_hit[13] & reg_we & !reg_error;
  assign host_06_cfg_chip2pad_wd = reg_wdata[0];

  assign host_06_cfg_drv0_we = addr_hit[13] & reg_we & !reg_error;
  assign host_06_cfg_drv0_wd = reg_wdata[1];

  assign host_06_cfg_drv1_we = addr_hit[13] & reg_we & !reg_error;
  assign host_06_cfg_drv1_wd = reg_wdata[2];

  assign host_06_cfg_drv2_we = addr_hit[13] & reg_we & !reg_error;
  assign host_06_cfg_drv2_wd = reg_wdata[3];

  assign host_06_cfg_pde_we = addr_hit[13] & reg_we & !reg_error;
  assign host_06_cfg_pde_wd = reg_wdata[4];

  assign host_06_cfg_pp_odrain_selector_we = addr_hit[13] & reg_we & !reg_error;
  assign host_06_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign host_06_cfg_pudis_we = addr_hit[13] & reg_we & !reg_error;
  assign host_06_cfg_pudis_wd = reg_wdata[6];

  assign host_06_cfg_rxdis_we = addr_hit[13] & reg_we & !reg_error;
  assign host_06_cfg_rxdis_wd = reg_wdata[7];

  assign host_06_cfg_slw_pgm_we = addr_hit[13] & reg_we & !reg_error;
  assign host_06_cfg_slw_pgm_wd = reg_wdata[8];

  assign host_06_cfg_trie_we = addr_hit[13] & reg_we & !reg_error;
  assign host_06_cfg_trie_wd = reg_wdata[9];

  assign host_06_mux_sel_we = addr_hit[14] & reg_we & !reg_error;
  assign host_06_mux_sel_wd = reg_wdata[0];

  assign host_07_cfg_chip2pad_we = addr_hit[15] & reg_we & !reg_error;
  assign host_07_cfg_chip2pad_wd = reg_wdata[0];

  assign host_07_cfg_drv0_we = addr_hit[15] & reg_we & !reg_error;
  assign host_07_cfg_drv0_wd = reg_wdata[1];

  assign host_07_cfg_drv1_we = addr_hit[15] & reg_we & !reg_error;
  assign host_07_cfg_drv1_wd = reg_wdata[2];

  assign host_07_cfg_drv2_we = addr_hit[15] & reg_we & !reg_error;
  assign host_07_cfg_drv2_wd = reg_wdata[3];

  assign host_07_cfg_pde_we = addr_hit[15] & reg_we & !reg_error;
  assign host_07_cfg_pde_wd = reg_wdata[4];

  assign host_07_cfg_pp_odrain_selector_we = addr_hit[15] & reg_we & !reg_error;
  assign host_07_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign host_07_cfg_pudis_we = addr_hit[15] & reg_we & !reg_error;
  assign host_07_cfg_pudis_wd = reg_wdata[6];

  assign host_07_cfg_rxdis_we = addr_hit[15] & reg_we & !reg_error;
  assign host_07_cfg_rxdis_wd = reg_wdata[7];

  assign host_07_cfg_slw_pgm_we = addr_hit[15] & reg_we & !reg_error;
  assign host_07_cfg_slw_pgm_wd = reg_wdata[8];

  assign host_07_cfg_trie_we = addr_hit[15] & reg_we & !reg_error;
  assign host_07_cfg_trie_wd = reg_wdata[9];

  assign host_07_mux_sel_we = addr_hit[16] & reg_we & !reg_error;
  assign host_07_mux_sel_wd = reg_wdata[0];

  assign host_08_cfg_chip2pad_we = addr_hit[17] & reg_we & !reg_error;
  assign host_08_cfg_chip2pad_wd = reg_wdata[0];

  assign host_08_cfg_drv0_we = addr_hit[17] & reg_we & !reg_error;
  assign host_08_cfg_drv0_wd = reg_wdata[1];

  assign host_08_cfg_drv1_we = addr_hit[17] & reg_we & !reg_error;
  assign host_08_cfg_drv1_wd = reg_wdata[2];

  assign host_08_cfg_drv2_we = addr_hit[17] & reg_we & !reg_error;
  assign host_08_cfg_drv2_wd = reg_wdata[3];

  assign host_08_cfg_pde_we = addr_hit[17] & reg_we & !reg_error;
  assign host_08_cfg_pde_wd = reg_wdata[4];

  assign host_08_cfg_pp_odrain_selector_we = addr_hit[17] & reg_we & !reg_error;
  assign host_08_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign host_08_cfg_pudis_we = addr_hit[17] & reg_we & !reg_error;
  assign host_08_cfg_pudis_wd = reg_wdata[6];

  assign host_08_cfg_rxdis_we = addr_hit[17] & reg_we & !reg_error;
  assign host_08_cfg_rxdis_wd = reg_wdata[7];

  assign host_08_cfg_slw_pgm_we = addr_hit[17] & reg_we & !reg_error;
  assign host_08_cfg_slw_pgm_wd = reg_wdata[8];

  assign host_08_cfg_trie_we = addr_hit[17] & reg_we & !reg_error;
  assign host_08_cfg_trie_wd = reg_wdata[9];

  assign host_08_mux_sel_we = addr_hit[18] & reg_we & !reg_error;
  assign host_08_mux_sel_wd = reg_wdata[0];

  assign host_09_cfg_chip2pad_we = addr_hit[19] & reg_we & !reg_error;
  assign host_09_cfg_chip2pad_wd = reg_wdata[0];

  assign host_09_cfg_drv0_we = addr_hit[19] & reg_we & !reg_error;
  assign host_09_cfg_drv0_wd = reg_wdata[1];

  assign host_09_cfg_drv1_we = addr_hit[19] & reg_we & !reg_error;
  assign host_09_cfg_drv1_wd = reg_wdata[2];

  assign host_09_cfg_drv2_we = addr_hit[19] & reg_we & !reg_error;
  assign host_09_cfg_drv2_wd = reg_wdata[3];

  assign host_09_cfg_pde_we = addr_hit[19] & reg_we & !reg_error;
  assign host_09_cfg_pde_wd = reg_wdata[4];

  assign host_09_cfg_pp_odrain_selector_we = addr_hit[19] & reg_we & !reg_error;
  assign host_09_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign host_09_cfg_pudis_we = addr_hit[19] & reg_we & !reg_error;
  assign host_09_cfg_pudis_wd = reg_wdata[6];

  assign host_09_cfg_rxdis_we = addr_hit[19] & reg_we & !reg_error;
  assign host_09_cfg_rxdis_wd = reg_wdata[7];

  assign host_09_cfg_slw_pgm_we = addr_hit[19] & reg_we & !reg_error;
  assign host_09_cfg_slw_pgm_wd = reg_wdata[8];

  assign host_09_cfg_trie_we = addr_hit[19] & reg_we & !reg_error;
  assign host_09_cfg_trie_wd = reg_wdata[9];

  assign host_09_mux_sel_we = addr_hit[20] & reg_we & !reg_error;
  assign host_09_mux_sel_wd = reg_wdata[0];

  assign host_10_cfg_chip2pad_we = addr_hit[21] & reg_we & !reg_error;
  assign host_10_cfg_chip2pad_wd = reg_wdata[0];

  assign host_10_cfg_drv0_we = addr_hit[21] & reg_we & !reg_error;
  assign host_10_cfg_drv0_wd = reg_wdata[1];

  assign host_10_cfg_drv1_we = addr_hit[21] & reg_we & !reg_error;
  assign host_10_cfg_drv1_wd = reg_wdata[2];

  assign host_10_cfg_drv2_we = addr_hit[21] & reg_we & !reg_error;
  assign host_10_cfg_drv2_wd = reg_wdata[3];

  assign host_10_cfg_pde_we = addr_hit[21] & reg_we & !reg_error;
  assign host_10_cfg_pde_wd = reg_wdata[4];

  assign host_10_cfg_pp_odrain_selector_we = addr_hit[21] & reg_we & !reg_error;
  assign host_10_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign host_10_cfg_pudis_we = addr_hit[21] & reg_we & !reg_error;
  assign host_10_cfg_pudis_wd = reg_wdata[6];

  assign host_10_cfg_rxdis_we = addr_hit[21] & reg_we & !reg_error;
  assign host_10_cfg_rxdis_wd = reg_wdata[7];

  assign host_10_cfg_slw_pgm_we = addr_hit[21] & reg_we & !reg_error;
  assign host_10_cfg_slw_pgm_wd = reg_wdata[8];

  assign host_10_cfg_trie_we = addr_hit[21] & reg_we & !reg_error;
  assign host_10_cfg_trie_wd = reg_wdata[9];

  assign host_10_mux_sel_we = addr_hit[22] & reg_we & !reg_error;
  assign host_10_mux_sel_wd = reg_wdata[0];

  assign secure_00_cfg_chip2pad_we = addr_hit[23] & reg_we & !reg_error;
  assign secure_00_cfg_chip2pad_wd = reg_wdata[0];

  assign secure_00_cfg_drv0_we = addr_hit[23] & reg_we & !reg_error;
  assign secure_00_cfg_drv0_wd = reg_wdata[1];

  assign secure_00_cfg_drv1_we = addr_hit[23] & reg_we & !reg_error;
  assign secure_00_cfg_drv1_wd = reg_wdata[2];

  assign secure_00_cfg_drv2_we = addr_hit[23] & reg_we & !reg_error;
  assign secure_00_cfg_drv2_wd = reg_wdata[3];

  assign secure_00_cfg_pde_we = addr_hit[23] & reg_we & !reg_error;
  assign secure_00_cfg_pde_wd = reg_wdata[4];

  assign secure_00_cfg_pp_odrain_selector_we = addr_hit[23] & reg_we & !reg_error;
  assign secure_00_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign secure_00_cfg_pudis_we = addr_hit[23] & reg_we & !reg_error;
  assign secure_00_cfg_pudis_wd = reg_wdata[6];

  assign secure_00_cfg_rxdis_we = addr_hit[23] & reg_we & !reg_error;
  assign secure_00_cfg_rxdis_wd = reg_wdata[7];

  assign secure_00_cfg_slw_pgm_we = addr_hit[23] & reg_we & !reg_error;
  assign secure_00_cfg_slw_pgm_wd = reg_wdata[8];

  assign secure_00_cfg_trie_we = addr_hit[23] & reg_we & !reg_error;
  assign secure_00_cfg_trie_wd = reg_wdata[9];

  assign secure_00_mux_sel_we = addr_hit[24] & reg_we & !reg_error;
  assign secure_00_mux_sel_wd = reg_wdata[0];

  assign secure_01_cfg_chip2pad_we = addr_hit[25] & reg_we & !reg_error;
  assign secure_01_cfg_chip2pad_wd = reg_wdata[0];

  assign secure_01_cfg_drv0_we = addr_hit[25] & reg_we & !reg_error;
  assign secure_01_cfg_drv0_wd = reg_wdata[1];

  assign secure_01_cfg_drv1_we = addr_hit[25] & reg_we & !reg_error;
  assign secure_01_cfg_drv1_wd = reg_wdata[2];

  assign secure_01_cfg_drv2_we = addr_hit[25] & reg_we & !reg_error;
  assign secure_01_cfg_drv2_wd = reg_wdata[3];

  assign secure_01_cfg_pde_we = addr_hit[25] & reg_we & !reg_error;
  assign secure_01_cfg_pde_wd = reg_wdata[4];

  assign secure_01_cfg_pp_odrain_selector_we = addr_hit[25] & reg_we & !reg_error;
  assign secure_01_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign secure_01_cfg_pudis_we = addr_hit[25] & reg_we & !reg_error;
  assign secure_01_cfg_pudis_wd = reg_wdata[6];

  assign secure_01_cfg_rxdis_we = addr_hit[25] & reg_we & !reg_error;
  assign secure_01_cfg_rxdis_wd = reg_wdata[7];

  assign secure_01_cfg_slw_pgm_we = addr_hit[25] & reg_we & !reg_error;
  assign secure_01_cfg_slw_pgm_wd = reg_wdata[8];

  assign secure_01_cfg_trie_we = addr_hit[25] & reg_we & !reg_error;
  assign secure_01_cfg_trie_wd = reg_wdata[9];

  assign secure_01_mux_sel_we = addr_hit[26] & reg_we & !reg_error;
  assign secure_01_mux_sel_wd = reg_wdata[0];

  assign secure_02_cfg_chip2pad_we = addr_hit[27] & reg_we & !reg_error;
  assign secure_02_cfg_chip2pad_wd = reg_wdata[0];

  assign secure_02_cfg_drv0_we = addr_hit[27] & reg_we & !reg_error;
  assign secure_02_cfg_drv0_wd = reg_wdata[1];

  assign secure_02_cfg_drv1_we = addr_hit[27] & reg_we & !reg_error;
  assign secure_02_cfg_drv1_wd = reg_wdata[2];

  assign secure_02_cfg_drv2_we = addr_hit[27] & reg_we & !reg_error;
  assign secure_02_cfg_drv2_wd = reg_wdata[3];

  assign secure_02_cfg_pde_we = addr_hit[27] & reg_we & !reg_error;
  assign secure_02_cfg_pde_wd = reg_wdata[4];

  assign secure_02_cfg_pp_odrain_selector_we = addr_hit[27] & reg_we & !reg_error;
  assign secure_02_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign secure_02_cfg_pudis_we = addr_hit[27] & reg_we & !reg_error;
  assign secure_02_cfg_pudis_wd = reg_wdata[6];

  assign secure_02_cfg_rxdis_we = addr_hit[27] & reg_we & !reg_error;
  assign secure_02_cfg_rxdis_wd = reg_wdata[7];

  assign secure_02_cfg_slw_pgm_we = addr_hit[27] & reg_we & !reg_error;
  assign secure_02_cfg_slw_pgm_wd = reg_wdata[8];

  assign secure_02_cfg_trie_we = addr_hit[27] & reg_we & !reg_error;
  assign secure_02_cfg_trie_wd = reg_wdata[9];

  assign secure_02_mux_sel_we = addr_hit[28] & reg_we & !reg_error;
  assign secure_02_mux_sel_wd = reg_wdata[0];

  assign secure_03_cfg_chip2pad_we = addr_hit[29] & reg_we & !reg_error;
  assign secure_03_cfg_chip2pad_wd = reg_wdata[0];

  assign secure_03_cfg_drv0_we = addr_hit[29] & reg_we & !reg_error;
  assign secure_03_cfg_drv0_wd = reg_wdata[1];

  assign secure_03_cfg_drv1_we = addr_hit[29] & reg_we & !reg_error;
  assign secure_03_cfg_drv1_wd = reg_wdata[2];

  assign secure_03_cfg_drv2_we = addr_hit[29] & reg_we & !reg_error;
  assign secure_03_cfg_drv2_wd = reg_wdata[3];

  assign secure_03_cfg_pde_we = addr_hit[29] & reg_we & !reg_error;
  assign secure_03_cfg_pde_wd = reg_wdata[4];

  assign secure_03_cfg_pp_odrain_selector_we = addr_hit[29] & reg_we & !reg_error;
  assign secure_03_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign secure_03_cfg_pudis_we = addr_hit[29] & reg_we & !reg_error;
  assign secure_03_cfg_pudis_wd = reg_wdata[6];

  assign secure_03_cfg_rxdis_we = addr_hit[29] & reg_we & !reg_error;
  assign secure_03_cfg_rxdis_wd = reg_wdata[7];

  assign secure_03_cfg_slw_pgm_we = addr_hit[29] & reg_we & !reg_error;
  assign secure_03_cfg_slw_pgm_wd = reg_wdata[8];

  assign secure_03_cfg_trie_we = addr_hit[29] & reg_we & !reg_error;
  assign secure_03_cfg_trie_wd = reg_wdata[9];

  assign secure_03_mux_sel_we = addr_hit[30] & reg_we & !reg_error;
  assign secure_03_mux_sel_wd = reg_wdata[0];

  assign secure_04_cfg_chip2pad_we = addr_hit[31] & reg_we & !reg_error;
  assign secure_04_cfg_chip2pad_wd = reg_wdata[0];

  assign secure_04_cfg_drv0_we = addr_hit[31] & reg_we & !reg_error;
  assign secure_04_cfg_drv0_wd = reg_wdata[1];

  assign secure_04_cfg_drv1_we = addr_hit[31] & reg_we & !reg_error;
  assign secure_04_cfg_drv1_wd = reg_wdata[2];

  assign secure_04_cfg_drv2_we = addr_hit[31] & reg_we & !reg_error;
  assign secure_04_cfg_drv2_wd = reg_wdata[3];

  assign secure_04_cfg_pde_we = addr_hit[31] & reg_we & !reg_error;
  assign secure_04_cfg_pde_wd = reg_wdata[4];

  assign secure_04_cfg_pp_odrain_selector_we = addr_hit[31] & reg_we & !reg_error;
  assign secure_04_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign secure_04_cfg_pudis_we = addr_hit[31] & reg_we & !reg_error;
  assign secure_04_cfg_pudis_wd = reg_wdata[6];

  assign secure_04_cfg_rxdis_we = addr_hit[31] & reg_we & !reg_error;
  assign secure_04_cfg_rxdis_wd = reg_wdata[7];

  assign secure_04_cfg_slw_pgm_we = addr_hit[31] & reg_we & !reg_error;
  assign secure_04_cfg_slw_pgm_wd = reg_wdata[8];

  assign secure_04_cfg_trie_we = addr_hit[31] & reg_we & !reg_error;
  assign secure_04_cfg_trie_wd = reg_wdata[9];

  assign secure_04_mux_sel_we = addr_hit[32] & reg_we & !reg_error;
  assign secure_04_mux_sel_wd = reg_wdata[0];

  assign secure_05_cfg_chip2pad_we = addr_hit[33] & reg_we & !reg_error;
  assign secure_05_cfg_chip2pad_wd = reg_wdata[0];

  assign secure_05_cfg_drv0_we = addr_hit[33] & reg_we & !reg_error;
  assign secure_05_cfg_drv0_wd = reg_wdata[1];

  assign secure_05_cfg_drv1_we = addr_hit[33] & reg_we & !reg_error;
  assign secure_05_cfg_drv1_wd = reg_wdata[2];

  assign secure_05_cfg_drv2_we = addr_hit[33] & reg_we & !reg_error;
  assign secure_05_cfg_drv2_wd = reg_wdata[3];

  assign secure_05_cfg_pde_we = addr_hit[33] & reg_we & !reg_error;
  assign secure_05_cfg_pde_wd = reg_wdata[4];

  assign secure_05_cfg_pp_odrain_selector_we = addr_hit[33] & reg_we & !reg_error;
  assign secure_05_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign secure_05_cfg_pudis_we = addr_hit[33] & reg_we & !reg_error;
  assign secure_05_cfg_pudis_wd = reg_wdata[6];

  assign secure_05_cfg_rxdis_we = addr_hit[33] & reg_we & !reg_error;
  assign secure_05_cfg_rxdis_wd = reg_wdata[7];

  assign secure_05_cfg_slw_pgm_we = addr_hit[33] & reg_we & !reg_error;
  assign secure_05_cfg_slw_pgm_wd = reg_wdata[8];

  assign secure_05_cfg_trie_we = addr_hit[33] & reg_we & !reg_error;
  assign secure_05_cfg_trie_wd = reg_wdata[9];

  assign secure_05_mux_sel_we = addr_hit[34] & reg_we & !reg_error;
  assign secure_05_mux_sel_wd = reg_wdata[0];

  assign secure_06_cfg_chip2pad_we = addr_hit[35] & reg_we & !reg_error;
  assign secure_06_cfg_chip2pad_wd = reg_wdata[0];

  assign secure_06_cfg_drv0_we = addr_hit[35] & reg_we & !reg_error;
  assign secure_06_cfg_drv0_wd = reg_wdata[1];

  assign secure_06_cfg_drv1_we = addr_hit[35] & reg_we & !reg_error;
  assign secure_06_cfg_drv1_wd = reg_wdata[2];

  assign secure_06_cfg_drv2_we = addr_hit[35] & reg_we & !reg_error;
  assign secure_06_cfg_drv2_wd = reg_wdata[3];

  assign secure_06_cfg_pde_we = addr_hit[35] & reg_we & !reg_error;
  assign secure_06_cfg_pde_wd = reg_wdata[4];

  assign secure_06_cfg_pp_odrain_selector_we = addr_hit[35] & reg_we & !reg_error;
  assign secure_06_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign secure_06_cfg_pudis_we = addr_hit[35] & reg_we & !reg_error;
  assign secure_06_cfg_pudis_wd = reg_wdata[6];

  assign secure_06_cfg_rxdis_we = addr_hit[35] & reg_we & !reg_error;
  assign secure_06_cfg_rxdis_wd = reg_wdata[7];

  assign secure_06_cfg_slw_pgm_we = addr_hit[35] & reg_we & !reg_error;
  assign secure_06_cfg_slw_pgm_wd = reg_wdata[8];

  assign secure_06_cfg_trie_we = addr_hit[35] & reg_we & !reg_error;
  assign secure_06_cfg_trie_wd = reg_wdata[9];

  assign secure_06_mux_sel_we = addr_hit[36] & reg_we & !reg_error;
  assign secure_06_mux_sel_wd = reg_wdata[0];

  assign secure_07_cfg_chip2pad_we = addr_hit[37] & reg_we & !reg_error;
  assign secure_07_cfg_chip2pad_wd = reg_wdata[0];

  assign secure_07_cfg_drv0_we = addr_hit[37] & reg_we & !reg_error;
  assign secure_07_cfg_drv0_wd = reg_wdata[1];

  assign secure_07_cfg_drv1_we = addr_hit[37] & reg_we & !reg_error;
  assign secure_07_cfg_drv1_wd = reg_wdata[2];

  assign secure_07_cfg_drv2_we = addr_hit[37] & reg_we & !reg_error;
  assign secure_07_cfg_drv2_wd = reg_wdata[3];

  assign secure_07_cfg_pde_we = addr_hit[37] & reg_we & !reg_error;
  assign secure_07_cfg_pde_wd = reg_wdata[4];

  assign secure_07_cfg_pp_odrain_selector_we = addr_hit[37] & reg_we & !reg_error;
  assign secure_07_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign secure_07_cfg_pudis_we = addr_hit[37] & reg_we & !reg_error;
  assign secure_07_cfg_pudis_wd = reg_wdata[6];

  assign secure_07_cfg_rxdis_we = addr_hit[37] & reg_we & !reg_error;
  assign secure_07_cfg_rxdis_wd = reg_wdata[7];

  assign secure_07_cfg_slw_pgm_we = addr_hit[37] & reg_we & !reg_error;
  assign secure_07_cfg_slw_pgm_wd = reg_wdata[8];

  assign secure_07_cfg_trie_we = addr_hit[37] & reg_we & !reg_error;
  assign secure_07_cfg_trie_wd = reg_wdata[9];

  assign secure_07_mux_sel_we = addr_hit[38] & reg_we & !reg_error;
  assign secure_07_mux_sel_wd = reg_wdata[0];

  assign gpio_00_cfg_chip2pad_we = addr_hit[39] & reg_we & !reg_error;
  assign gpio_00_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_00_cfg_drv0_we = addr_hit[39] & reg_we & !reg_error;
  assign gpio_00_cfg_drv0_wd = reg_wdata[1];

  assign gpio_00_cfg_drv1_we = addr_hit[39] & reg_we & !reg_error;
  assign gpio_00_cfg_drv1_wd = reg_wdata[2];

  assign gpio_00_cfg_drv2_we = addr_hit[39] & reg_we & !reg_error;
  assign gpio_00_cfg_drv2_wd = reg_wdata[3];

  assign gpio_00_cfg_pde_we = addr_hit[39] & reg_we & !reg_error;
  assign gpio_00_cfg_pde_wd = reg_wdata[4];

  assign gpio_00_cfg_pp_odrain_selector_we = addr_hit[39] & reg_we & !reg_error;
  assign gpio_00_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_00_cfg_pudis_we = addr_hit[39] & reg_we & !reg_error;
  assign gpio_00_cfg_pudis_wd = reg_wdata[6];

  assign gpio_00_cfg_rxdis_we = addr_hit[39] & reg_we & !reg_error;
  assign gpio_00_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_00_cfg_slw_pgm_we = addr_hit[39] & reg_we & !reg_error;
  assign gpio_00_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_00_cfg_trie_we = addr_hit[39] & reg_we & !reg_error;
  assign gpio_00_cfg_trie_wd = reg_wdata[9];

  assign gpio_00_mux_sel_we = addr_hit[40] & reg_we & !reg_error;
  assign gpio_00_mux_sel_wd = reg_wdata[0];

  assign gpio_01_cfg_chip2pad_we = addr_hit[41] & reg_we & !reg_error;
  assign gpio_01_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_01_cfg_drv0_we = addr_hit[41] & reg_we & !reg_error;
  assign gpio_01_cfg_drv0_wd = reg_wdata[1];

  assign gpio_01_cfg_drv1_we = addr_hit[41] & reg_we & !reg_error;
  assign gpio_01_cfg_drv1_wd = reg_wdata[2];

  assign gpio_01_cfg_drv2_we = addr_hit[41] & reg_we & !reg_error;
  assign gpio_01_cfg_drv2_wd = reg_wdata[3];

  assign gpio_01_cfg_pde_we = addr_hit[41] & reg_we & !reg_error;
  assign gpio_01_cfg_pde_wd = reg_wdata[4];

  assign gpio_01_cfg_pp_odrain_selector_we = addr_hit[41] & reg_we & !reg_error;
  assign gpio_01_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_01_cfg_pudis_we = addr_hit[41] & reg_we & !reg_error;
  assign gpio_01_cfg_pudis_wd = reg_wdata[6];

  assign gpio_01_cfg_rxdis_we = addr_hit[41] & reg_we & !reg_error;
  assign gpio_01_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_01_cfg_slw_pgm_we = addr_hit[41] & reg_we & !reg_error;
  assign gpio_01_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_01_cfg_trie_we = addr_hit[41] & reg_we & !reg_error;
  assign gpio_01_cfg_trie_wd = reg_wdata[9];

  assign gpio_01_mux_sel_we = addr_hit[42] & reg_we & !reg_error;
  assign gpio_01_mux_sel_wd = reg_wdata[0];

  assign gpio_02_cfg_chip2pad_we = addr_hit[43] & reg_we & !reg_error;
  assign gpio_02_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_02_cfg_drv0_we = addr_hit[43] & reg_we & !reg_error;
  assign gpio_02_cfg_drv0_wd = reg_wdata[1];

  assign gpio_02_cfg_drv1_we = addr_hit[43] & reg_we & !reg_error;
  assign gpio_02_cfg_drv1_wd = reg_wdata[2];

  assign gpio_02_cfg_drv2_we = addr_hit[43] & reg_we & !reg_error;
  assign gpio_02_cfg_drv2_wd = reg_wdata[3];

  assign gpio_02_cfg_pde_we = addr_hit[43] & reg_we & !reg_error;
  assign gpio_02_cfg_pde_wd = reg_wdata[4];

  assign gpio_02_cfg_pp_odrain_selector_we = addr_hit[43] & reg_we & !reg_error;
  assign gpio_02_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_02_cfg_pudis_we = addr_hit[43] & reg_we & !reg_error;
  assign gpio_02_cfg_pudis_wd = reg_wdata[6];

  assign gpio_02_cfg_rxdis_we = addr_hit[43] & reg_we & !reg_error;
  assign gpio_02_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_02_cfg_slw_pgm_we = addr_hit[43] & reg_we & !reg_error;
  assign gpio_02_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_02_cfg_trie_we = addr_hit[43] & reg_we & !reg_error;
  assign gpio_02_cfg_trie_wd = reg_wdata[9];

  assign gpio_02_mux_sel_we = addr_hit[44] & reg_we & !reg_error;
  assign gpio_02_mux_sel_wd = reg_wdata[0];

  assign gpio_03_cfg_chip2pad_we = addr_hit[45] & reg_we & !reg_error;
  assign gpio_03_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_03_cfg_drv0_we = addr_hit[45] & reg_we & !reg_error;
  assign gpio_03_cfg_drv0_wd = reg_wdata[1];

  assign gpio_03_cfg_drv1_we = addr_hit[45] & reg_we & !reg_error;
  assign gpio_03_cfg_drv1_wd = reg_wdata[2];

  assign gpio_03_cfg_drv2_we = addr_hit[45] & reg_we & !reg_error;
  assign gpio_03_cfg_drv2_wd = reg_wdata[3];

  assign gpio_03_cfg_pde_we = addr_hit[45] & reg_we & !reg_error;
  assign gpio_03_cfg_pde_wd = reg_wdata[4];

  assign gpio_03_cfg_pp_odrain_selector_we = addr_hit[45] & reg_we & !reg_error;
  assign gpio_03_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_03_cfg_pudis_we = addr_hit[45] & reg_we & !reg_error;
  assign gpio_03_cfg_pudis_wd = reg_wdata[6];

  assign gpio_03_cfg_rxdis_we = addr_hit[45] & reg_we & !reg_error;
  assign gpio_03_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_03_cfg_slw_pgm_we = addr_hit[45] & reg_we & !reg_error;
  assign gpio_03_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_03_cfg_trie_we = addr_hit[45] & reg_we & !reg_error;
  assign gpio_03_cfg_trie_wd = reg_wdata[9];

  assign gpio_03_mux_sel_we = addr_hit[46] & reg_we & !reg_error;
  assign gpio_03_mux_sel_wd = reg_wdata[0];

  assign gpio_04_cfg_chip2pad_we = addr_hit[47] & reg_we & !reg_error;
  assign gpio_04_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_04_cfg_drv0_we = addr_hit[47] & reg_we & !reg_error;
  assign gpio_04_cfg_drv0_wd = reg_wdata[1];

  assign gpio_04_cfg_drv1_we = addr_hit[47] & reg_we & !reg_error;
  assign gpio_04_cfg_drv1_wd = reg_wdata[2];

  assign gpio_04_cfg_drv2_we = addr_hit[47] & reg_we & !reg_error;
  assign gpio_04_cfg_drv2_wd = reg_wdata[3];

  assign gpio_04_cfg_pde_we = addr_hit[47] & reg_we & !reg_error;
  assign gpio_04_cfg_pde_wd = reg_wdata[4];

  assign gpio_04_cfg_pp_odrain_selector_we = addr_hit[47] & reg_we & !reg_error;
  assign gpio_04_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_04_cfg_pudis_we = addr_hit[47] & reg_we & !reg_error;
  assign gpio_04_cfg_pudis_wd = reg_wdata[6];

  assign gpio_04_cfg_rxdis_we = addr_hit[47] & reg_we & !reg_error;
  assign gpio_04_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_04_cfg_slw_pgm_we = addr_hit[47] & reg_we & !reg_error;
  assign gpio_04_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_04_cfg_trie_we = addr_hit[47] & reg_we & !reg_error;
  assign gpio_04_cfg_trie_wd = reg_wdata[9];

  assign gpio_04_mux_sel_we = addr_hit[48] & reg_we & !reg_error;
  assign gpio_04_mux_sel_wd = reg_wdata[0];

  assign gpio_05_cfg_chip2pad_we = addr_hit[49] & reg_we & !reg_error;
  assign gpio_05_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_05_cfg_drv0_we = addr_hit[49] & reg_we & !reg_error;
  assign gpio_05_cfg_drv0_wd = reg_wdata[1];

  assign gpio_05_cfg_drv1_we = addr_hit[49] & reg_we & !reg_error;
  assign gpio_05_cfg_drv1_wd = reg_wdata[2];

  assign gpio_05_cfg_drv2_we = addr_hit[49] & reg_we & !reg_error;
  assign gpio_05_cfg_drv2_wd = reg_wdata[3];

  assign gpio_05_cfg_pde_we = addr_hit[49] & reg_we & !reg_error;
  assign gpio_05_cfg_pde_wd = reg_wdata[4];

  assign gpio_05_cfg_pp_odrain_selector_we = addr_hit[49] & reg_we & !reg_error;
  assign gpio_05_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_05_cfg_pudis_we = addr_hit[49] & reg_we & !reg_error;
  assign gpio_05_cfg_pudis_wd = reg_wdata[6];

  assign gpio_05_cfg_rxdis_we = addr_hit[49] & reg_we & !reg_error;
  assign gpio_05_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_05_cfg_slw_pgm_we = addr_hit[49] & reg_we & !reg_error;
  assign gpio_05_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_05_cfg_trie_we = addr_hit[49] & reg_we & !reg_error;
  assign gpio_05_cfg_trie_wd = reg_wdata[9];

  assign gpio_05_mux_sel_we = addr_hit[50] & reg_we & !reg_error;
  assign gpio_05_mux_sel_wd = reg_wdata[0];

  assign gpio_06_cfg_chip2pad_we = addr_hit[51] & reg_we & !reg_error;
  assign gpio_06_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_06_cfg_drv0_we = addr_hit[51] & reg_we & !reg_error;
  assign gpio_06_cfg_drv0_wd = reg_wdata[1];

  assign gpio_06_cfg_drv1_we = addr_hit[51] & reg_we & !reg_error;
  assign gpio_06_cfg_drv1_wd = reg_wdata[2];

  assign gpio_06_cfg_drv2_we = addr_hit[51] & reg_we & !reg_error;
  assign gpio_06_cfg_drv2_wd = reg_wdata[3];

  assign gpio_06_cfg_pde_we = addr_hit[51] & reg_we & !reg_error;
  assign gpio_06_cfg_pde_wd = reg_wdata[4];

  assign gpio_06_cfg_pp_odrain_selector_we = addr_hit[51] & reg_we & !reg_error;
  assign gpio_06_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_06_cfg_pudis_we = addr_hit[51] & reg_we & !reg_error;
  assign gpio_06_cfg_pudis_wd = reg_wdata[6];

  assign gpio_06_cfg_rxdis_we = addr_hit[51] & reg_we & !reg_error;
  assign gpio_06_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_06_cfg_slw_pgm_we = addr_hit[51] & reg_we & !reg_error;
  assign gpio_06_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_06_cfg_trie_we = addr_hit[51] & reg_we & !reg_error;
  assign gpio_06_cfg_trie_wd = reg_wdata[9];

  assign gpio_06_mux_sel_we = addr_hit[52] & reg_we & !reg_error;
  assign gpio_06_mux_sel_wd = reg_wdata[0];

  assign gpio_07_cfg_chip2pad_we = addr_hit[53] & reg_we & !reg_error;
  assign gpio_07_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_07_cfg_drv0_we = addr_hit[53] & reg_we & !reg_error;
  assign gpio_07_cfg_drv0_wd = reg_wdata[1];

  assign gpio_07_cfg_drv1_we = addr_hit[53] & reg_we & !reg_error;
  assign gpio_07_cfg_drv1_wd = reg_wdata[2];

  assign gpio_07_cfg_drv2_we = addr_hit[53] & reg_we & !reg_error;
  assign gpio_07_cfg_drv2_wd = reg_wdata[3];

  assign gpio_07_cfg_pde_we = addr_hit[53] & reg_we & !reg_error;
  assign gpio_07_cfg_pde_wd = reg_wdata[4];

  assign gpio_07_cfg_pp_odrain_selector_we = addr_hit[53] & reg_we & !reg_error;
  assign gpio_07_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_07_cfg_pudis_we = addr_hit[53] & reg_we & !reg_error;
  assign gpio_07_cfg_pudis_wd = reg_wdata[6];

  assign gpio_07_cfg_rxdis_we = addr_hit[53] & reg_we & !reg_error;
  assign gpio_07_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_07_cfg_slw_pgm_we = addr_hit[53] & reg_we & !reg_error;
  assign gpio_07_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_07_cfg_trie_we = addr_hit[53] & reg_we & !reg_error;
  assign gpio_07_cfg_trie_wd = reg_wdata[9];

  assign gpio_07_mux_sel_we = addr_hit[54] & reg_we & !reg_error;
  assign gpio_07_mux_sel_wd = reg_wdata[0];

  assign gpio_08_cfg_chip2pad_we = addr_hit[55] & reg_we & !reg_error;
  assign gpio_08_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_08_cfg_drv0_we = addr_hit[55] & reg_we & !reg_error;
  assign gpio_08_cfg_drv0_wd = reg_wdata[1];

  assign gpio_08_cfg_drv1_we = addr_hit[55] & reg_we & !reg_error;
  assign gpio_08_cfg_drv1_wd = reg_wdata[2];

  assign gpio_08_cfg_drv2_we = addr_hit[55] & reg_we & !reg_error;
  assign gpio_08_cfg_drv2_wd = reg_wdata[3];

  assign gpio_08_cfg_pde_we = addr_hit[55] & reg_we & !reg_error;
  assign gpio_08_cfg_pde_wd = reg_wdata[4];

  assign gpio_08_cfg_pp_odrain_selector_we = addr_hit[55] & reg_we & !reg_error;
  assign gpio_08_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_08_cfg_pudis_we = addr_hit[55] & reg_we & !reg_error;
  assign gpio_08_cfg_pudis_wd = reg_wdata[6];

  assign gpio_08_cfg_rxdis_we = addr_hit[55] & reg_we & !reg_error;
  assign gpio_08_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_08_cfg_slw_pgm_we = addr_hit[55] & reg_we & !reg_error;
  assign gpio_08_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_08_cfg_trie_we = addr_hit[55] & reg_we & !reg_error;
  assign gpio_08_cfg_trie_wd = reg_wdata[9];

  assign gpio_08_mux_sel_we = addr_hit[56] & reg_we & !reg_error;
  assign gpio_08_mux_sel_wd = reg_wdata[0];

  assign gpio_09_cfg_chip2pad_we = addr_hit[57] & reg_we & !reg_error;
  assign gpio_09_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_09_cfg_drv0_we = addr_hit[57] & reg_we & !reg_error;
  assign gpio_09_cfg_drv0_wd = reg_wdata[1];

  assign gpio_09_cfg_drv1_we = addr_hit[57] & reg_we & !reg_error;
  assign gpio_09_cfg_drv1_wd = reg_wdata[2];

  assign gpio_09_cfg_drv2_we = addr_hit[57] & reg_we & !reg_error;
  assign gpio_09_cfg_drv2_wd = reg_wdata[3];

  assign gpio_09_cfg_pde_we = addr_hit[57] & reg_we & !reg_error;
  assign gpio_09_cfg_pde_wd = reg_wdata[4];

  assign gpio_09_cfg_pp_odrain_selector_we = addr_hit[57] & reg_we & !reg_error;
  assign gpio_09_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_09_cfg_pudis_we = addr_hit[57] & reg_we & !reg_error;
  assign gpio_09_cfg_pudis_wd = reg_wdata[6];

  assign gpio_09_cfg_rxdis_we = addr_hit[57] & reg_we & !reg_error;
  assign gpio_09_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_09_cfg_slw_pgm_we = addr_hit[57] & reg_we & !reg_error;
  assign gpio_09_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_09_cfg_trie_we = addr_hit[57] & reg_we & !reg_error;
  assign gpio_09_cfg_trie_wd = reg_wdata[9];

  assign gpio_09_mux_sel_we = addr_hit[58] & reg_we & !reg_error;
  assign gpio_09_mux_sel_wd = reg_wdata[0];

  assign gpio_10_cfg_chip2pad_we = addr_hit[59] & reg_we & !reg_error;
  assign gpio_10_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_10_cfg_drv0_we = addr_hit[59] & reg_we & !reg_error;
  assign gpio_10_cfg_drv0_wd = reg_wdata[1];

  assign gpio_10_cfg_drv1_we = addr_hit[59] & reg_we & !reg_error;
  assign gpio_10_cfg_drv1_wd = reg_wdata[2];

  assign gpio_10_cfg_drv2_we = addr_hit[59] & reg_we & !reg_error;
  assign gpio_10_cfg_drv2_wd = reg_wdata[3];

  assign gpio_10_cfg_pde_we = addr_hit[59] & reg_we & !reg_error;
  assign gpio_10_cfg_pde_wd = reg_wdata[4];

  assign gpio_10_cfg_pp_odrain_selector_we = addr_hit[59] & reg_we & !reg_error;
  assign gpio_10_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_10_cfg_pudis_we = addr_hit[59] & reg_we & !reg_error;
  assign gpio_10_cfg_pudis_wd = reg_wdata[6];

  assign gpio_10_cfg_rxdis_we = addr_hit[59] & reg_we & !reg_error;
  assign gpio_10_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_10_cfg_slw_pgm_we = addr_hit[59] & reg_we & !reg_error;
  assign gpio_10_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_10_cfg_trie_we = addr_hit[59] & reg_we & !reg_error;
  assign gpio_10_cfg_trie_wd = reg_wdata[9];

  assign gpio_10_mux_sel_we = addr_hit[60] & reg_we & !reg_error;
  assign gpio_10_mux_sel_wd = reg_wdata[0];

  assign gpio_11_cfg_chip2pad_we = addr_hit[61] & reg_we & !reg_error;
  assign gpio_11_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_11_cfg_drv0_we = addr_hit[61] & reg_we & !reg_error;
  assign gpio_11_cfg_drv0_wd = reg_wdata[1];

  assign gpio_11_cfg_drv1_we = addr_hit[61] & reg_we & !reg_error;
  assign gpio_11_cfg_drv1_wd = reg_wdata[2];

  assign gpio_11_cfg_drv2_we = addr_hit[61] & reg_we & !reg_error;
  assign gpio_11_cfg_drv2_wd = reg_wdata[3];

  assign gpio_11_cfg_pde_we = addr_hit[61] & reg_we & !reg_error;
  assign gpio_11_cfg_pde_wd = reg_wdata[4];

  assign gpio_11_cfg_pp_odrain_selector_we = addr_hit[61] & reg_we & !reg_error;
  assign gpio_11_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_11_cfg_pudis_we = addr_hit[61] & reg_we & !reg_error;
  assign gpio_11_cfg_pudis_wd = reg_wdata[6];

  assign gpio_11_cfg_rxdis_we = addr_hit[61] & reg_we & !reg_error;
  assign gpio_11_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_11_cfg_slw_pgm_we = addr_hit[61] & reg_we & !reg_error;
  assign gpio_11_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_11_cfg_trie_we = addr_hit[61] & reg_we & !reg_error;
  assign gpio_11_cfg_trie_wd = reg_wdata[9];

  assign gpio_11_mux_sel_we = addr_hit[62] & reg_we & !reg_error;
  assign gpio_11_mux_sel_wd = reg_wdata[0];

  assign gpio_12_cfg_chip2pad_we = addr_hit[63] & reg_we & !reg_error;
  assign gpio_12_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_12_cfg_drv0_we = addr_hit[63] & reg_we & !reg_error;
  assign gpio_12_cfg_drv0_wd = reg_wdata[1];

  assign gpio_12_cfg_drv1_we = addr_hit[63] & reg_we & !reg_error;
  assign gpio_12_cfg_drv1_wd = reg_wdata[2];

  assign gpio_12_cfg_drv2_we = addr_hit[63] & reg_we & !reg_error;
  assign gpio_12_cfg_drv2_wd = reg_wdata[3];

  assign gpio_12_cfg_pde_we = addr_hit[63] & reg_we & !reg_error;
  assign gpio_12_cfg_pde_wd = reg_wdata[4];

  assign gpio_12_cfg_pp_odrain_selector_we = addr_hit[63] & reg_we & !reg_error;
  assign gpio_12_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_12_cfg_pudis_we = addr_hit[63] & reg_we & !reg_error;
  assign gpio_12_cfg_pudis_wd = reg_wdata[6];

  assign gpio_12_cfg_rxdis_we = addr_hit[63] & reg_we & !reg_error;
  assign gpio_12_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_12_cfg_slw_pgm_we = addr_hit[63] & reg_we & !reg_error;
  assign gpio_12_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_12_cfg_trie_we = addr_hit[63] & reg_we & !reg_error;
  assign gpio_12_cfg_trie_wd = reg_wdata[9];

  assign gpio_12_mux_sel_we = addr_hit[64] & reg_we & !reg_error;
  assign gpio_12_mux_sel_wd = reg_wdata[0];

  assign gpio_13_cfg_chip2pad_we = addr_hit[65] & reg_we & !reg_error;
  assign gpio_13_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_13_cfg_drv0_we = addr_hit[65] & reg_we & !reg_error;
  assign gpio_13_cfg_drv0_wd = reg_wdata[1];

  assign gpio_13_cfg_drv1_we = addr_hit[65] & reg_we & !reg_error;
  assign gpio_13_cfg_drv1_wd = reg_wdata[2];

  assign gpio_13_cfg_drv2_we = addr_hit[65] & reg_we & !reg_error;
  assign gpio_13_cfg_drv2_wd = reg_wdata[3];

  assign gpio_13_cfg_pde_we = addr_hit[65] & reg_we & !reg_error;
  assign gpio_13_cfg_pde_wd = reg_wdata[4];

  assign gpio_13_cfg_pp_odrain_selector_we = addr_hit[65] & reg_we & !reg_error;
  assign gpio_13_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_13_cfg_pudis_we = addr_hit[65] & reg_we & !reg_error;
  assign gpio_13_cfg_pudis_wd = reg_wdata[6];

  assign gpio_13_cfg_rxdis_we = addr_hit[65] & reg_we & !reg_error;
  assign gpio_13_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_13_cfg_slw_pgm_we = addr_hit[65] & reg_we & !reg_error;
  assign gpio_13_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_13_cfg_trie_we = addr_hit[65] & reg_we & !reg_error;
  assign gpio_13_cfg_trie_wd = reg_wdata[9];

  assign gpio_13_mux_sel_we = addr_hit[66] & reg_we & !reg_error;
  assign gpio_13_mux_sel_wd = reg_wdata[0];

  assign gpio_14_cfg_chip2pad_we = addr_hit[67] & reg_we & !reg_error;
  assign gpio_14_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_14_cfg_drv0_we = addr_hit[67] & reg_we & !reg_error;
  assign gpio_14_cfg_drv0_wd = reg_wdata[1];

  assign gpio_14_cfg_drv1_we = addr_hit[67] & reg_we & !reg_error;
  assign gpio_14_cfg_drv1_wd = reg_wdata[2];

  assign gpio_14_cfg_drv2_we = addr_hit[67] & reg_we & !reg_error;
  assign gpio_14_cfg_drv2_wd = reg_wdata[3];

  assign gpio_14_cfg_pde_we = addr_hit[67] & reg_we & !reg_error;
  assign gpio_14_cfg_pde_wd = reg_wdata[4];

  assign gpio_14_cfg_pp_odrain_selector_we = addr_hit[67] & reg_we & !reg_error;
  assign gpio_14_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_14_cfg_pudis_we = addr_hit[67] & reg_we & !reg_error;
  assign gpio_14_cfg_pudis_wd = reg_wdata[6];

  assign gpio_14_cfg_rxdis_we = addr_hit[67] & reg_we & !reg_error;
  assign gpio_14_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_14_cfg_slw_pgm_we = addr_hit[67] & reg_we & !reg_error;
  assign gpio_14_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_14_cfg_trie_we = addr_hit[67] & reg_we & !reg_error;
  assign gpio_14_cfg_trie_wd = reg_wdata[9];

  assign gpio_14_mux_sel_we = addr_hit[68] & reg_we & !reg_error;
  assign gpio_14_mux_sel_wd = reg_wdata[0];

  assign gpio_15_cfg_chip2pad_we = addr_hit[69] & reg_we & !reg_error;
  assign gpio_15_cfg_chip2pad_wd = reg_wdata[0];

  assign gpio_15_cfg_drv0_we = addr_hit[69] & reg_we & !reg_error;
  assign gpio_15_cfg_drv0_wd = reg_wdata[1];

  assign gpio_15_cfg_drv1_we = addr_hit[69] & reg_we & !reg_error;
  assign gpio_15_cfg_drv1_wd = reg_wdata[2];

  assign gpio_15_cfg_drv2_we = addr_hit[69] & reg_we & !reg_error;
  assign gpio_15_cfg_drv2_wd = reg_wdata[3];

  assign gpio_15_cfg_pde_we = addr_hit[69] & reg_we & !reg_error;
  assign gpio_15_cfg_pde_wd = reg_wdata[4];

  assign gpio_15_cfg_pp_odrain_selector_we = addr_hit[69] & reg_we & !reg_error;
  assign gpio_15_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign gpio_15_cfg_pudis_we = addr_hit[69] & reg_we & !reg_error;
  assign gpio_15_cfg_pudis_wd = reg_wdata[6];

  assign gpio_15_cfg_rxdis_we = addr_hit[69] & reg_we & !reg_error;
  assign gpio_15_cfg_rxdis_wd = reg_wdata[7];

  assign gpio_15_cfg_slw_pgm_we = addr_hit[69] & reg_we & !reg_error;
  assign gpio_15_cfg_slw_pgm_wd = reg_wdata[8];

  assign gpio_15_cfg_trie_we = addr_hit[69] & reg_we & !reg_error;
  assign gpio_15_cfg_trie_wd = reg_wdata[9];

  assign gpio_15_mux_sel_we = addr_hit[70] & reg_we & !reg_error;
  assign gpio_15_mux_sel_wd = reg_wdata[0];

  assign periph_00_cfg_chip2pad_we = addr_hit[71] & reg_we & !reg_error;
  assign periph_00_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_00_cfg_drv0_we = addr_hit[71] & reg_we & !reg_error;
  assign periph_00_cfg_drv0_wd = reg_wdata[1];

  assign periph_00_cfg_drv1_we = addr_hit[71] & reg_we & !reg_error;
  assign periph_00_cfg_drv1_wd = reg_wdata[2];

  assign periph_00_cfg_drv2_we = addr_hit[71] & reg_we & !reg_error;
  assign periph_00_cfg_drv2_wd = reg_wdata[3];

  assign periph_00_cfg_pde_we = addr_hit[71] & reg_we & !reg_error;
  assign periph_00_cfg_pde_wd = reg_wdata[4];

  assign periph_00_cfg_pp_odrain_selector_we = addr_hit[71] & reg_we & !reg_error;
  assign periph_00_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_00_cfg_pudis_we = addr_hit[71] & reg_we & !reg_error;
  assign periph_00_cfg_pudis_wd = reg_wdata[6];

  assign periph_00_cfg_rxdis_we = addr_hit[71] & reg_we & !reg_error;
  assign periph_00_cfg_rxdis_wd = reg_wdata[7];

  assign periph_00_cfg_slw_pgm_we = addr_hit[71] & reg_we & !reg_error;
  assign periph_00_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_00_cfg_trie_we = addr_hit[71] & reg_we & !reg_error;
  assign periph_00_cfg_trie_wd = reg_wdata[9];

  assign periph_00_mux_sel_we = addr_hit[72] & reg_we & !reg_error;
  assign periph_00_mux_sel_wd = reg_wdata[0];

  assign periph_01_cfg_chip2pad_we = addr_hit[73] & reg_we & !reg_error;
  assign periph_01_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_01_cfg_drv0_we = addr_hit[73] & reg_we & !reg_error;
  assign periph_01_cfg_drv0_wd = reg_wdata[1];

  assign periph_01_cfg_drv1_we = addr_hit[73] & reg_we & !reg_error;
  assign periph_01_cfg_drv1_wd = reg_wdata[2];

  assign periph_01_cfg_drv2_we = addr_hit[73] & reg_we & !reg_error;
  assign periph_01_cfg_drv2_wd = reg_wdata[3];

  assign periph_01_cfg_pde_we = addr_hit[73] & reg_we & !reg_error;
  assign periph_01_cfg_pde_wd = reg_wdata[4];

  assign periph_01_cfg_pp_odrain_selector_we = addr_hit[73] & reg_we & !reg_error;
  assign periph_01_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_01_cfg_pudis_we = addr_hit[73] & reg_we & !reg_error;
  assign periph_01_cfg_pudis_wd = reg_wdata[6];

  assign periph_01_cfg_rxdis_we = addr_hit[73] & reg_we & !reg_error;
  assign periph_01_cfg_rxdis_wd = reg_wdata[7];

  assign periph_01_cfg_slw_pgm_we = addr_hit[73] & reg_we & !reg_error;
  assign periph_01_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_01_cfg_trie_we = addr_hit[73] & reg_we & !reg_error;
  assign periph_01_cfg_trie_wd = reg_wdata[9];

  assign periph_01_mux_sel_we = addr_hit[74] & reg_we & !reg_error;
  assign periph_01_mux_sel_wd = reg_wdata[0];

  assign periph_02_cfg_chip2pad_we = addr_hit[75] & reg_we & !reg_error;
  assign periph_02_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_02_cfg_drv0_we = addr_hit[75] & reg_we & !reg_error;
  assign periph_02_cfg_drv0_wd = reg_wdata[1];

  assign periph_02_cfg_drv1_we = addr_hit[75] & reg_we & !reg_error;
  assign periph_02_cfg_drv1_wd = reg_wdata[2];

  assign periph_02_cfg_drv2_we = addr_hit[75] & reg_we & !reg_error;
  assign periph_02_cfg_drv2_wd = reg_wdata[3];

  assign periph_02_cfg_pde_we = addr_hit[75] & reg_we & !reg_error;
  assign periph_02_cfg_pde_wd = reg_wdata[4];

  assign periph_02_cfg_pp_odrain_selector_we = addr_hit[75] & reg_we & !reg_error;
  assign periph_02_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_02_cfg_pudis_we = addr_hit[75] & reg_we & !reg_error;
  assign periph_02_cfg_pudis_wd = reg_wdata[6];

  assign periph_02_cfg_rxdis_we = addr_hit[75] & reg_we & !reg_error;
  assign periph_02_cfg_rxdis_wd = reg_wdata[7];

  assign periph_02_cfg_slw_pgm_we = addr_hit[75] & reg_we & !reg_error;
  assign periph_02_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_02_cfg_trie_we = addr_hit[75] & reg_we & !reg_error;
  assign periph_02_cfg_trie_wd = reg_wdata[9];

  assign periph_02_mux_sel_we = addr_hit[76] & reg_we & !reg_error;
  assign periph_02_mux_sel_wd = reg_wdata[0];

  assign periph_03_cfg_chip2pad_we = addr_hit[77] & reg_we & !reg_error;
  assign periph_03_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_03_cfg_drv0_we = addr_hit[77] & reg_we & !reg_error;
  assign periph_03_cfg_drv0_wd = reg_wdata[1];

  assign periph_03_cfg_drv1_we = addr_hit[77] & reg_we & !reg_error;
  assign periph_03_cfg_drv1_wd = reg_wdata[2];

  assign periph_03_cfg_drv2_we = addr_hit[77] & reg_we & !reg_error;
  assign periph_03_cfg_drv2_wd = reg_wdata[3];

  assign periph_03_cfg_pde_we = addr_hit[77] & reg_we & !reg_error;
  assign periph_03_cfg_pde_wd = reg_wdata[4];

  assign periph_03_cfg_pp_odrain_selector_we = addr_hit[77] & reg_we & !reg_error;
  assign periph_03_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_03_cfg_pudis_we = addr_hit[77] & reg_we & !reg_error;
  assign periph_03_cfg_pudis_wd = reg_wdata[6];

  assign periph_03_cfg_rxdis_we = addr_hit[77] & reg_we & !reg_error;
  assign periph_03_cfg_rxdis_wd = reg_wdata[7];

  assign periph_03_cfg_slw_pgm_we = addr_hit[77] & reg_we & !reg_error;
  assign periph_03_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_03_cfg_trie_we = addr_hit[77] & reg_we & !reg_error;
  assign periph_03_cfg_trie_wd = reg_wdata[9];

  assign periph_03_mux_sel_we = addr_hit[78] & reg_we & !reg_error;
  assign periph_03_mux_sel_wd = reg_wdata[0];

  assign periph_04_cfg_chip2pad_we = addr_hit[79] & reg_we & !reg_error;
  assign periph_04_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_04_cfg_drv0_we = addr_hit[79] & reg_we & !reg_error;
  assign periph_04_cfg_drv0_wd = reg_wdata[1];

  assign periph_04_cfg_drv1_we = addr_hit[79] & reg_we & !reg_error;
  assign periph_04_cfg_drv1_wd = reg_wdata[2];

  assign periph_04_cfg_drv2_we = addr_hit[79] & reg_we & !reg_error;
  assign periph_04_cfg_drv2_wd = reg_wdata[3];

  assign periph_04_cfg_pde_we = addr_hit[79] & reg_we & !reg_error;
  assign periph_04_cfg_pde_wd = reg_wdata[4];

  assign periph_04_cfg_pp_odrain_selector_we = addr_hit[79] & reg_we & !reg_error;
  assign periph_04_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_04_cfg_pudis_we = addr_hit[79] & reg_we & !reg_error;
  assign periph_04_cfg_pudis_wd = reg_wdata[6];

  assign periph_04_cfg_rxdis_we = addr_hit[79] & reg_we & !reg_error;
  assign periph_04_cfg_rxdis_wd = reg_wdata[7];

  assign periph_04_cfg_slw_pgm_we = addr_hit[79] & reg_we & !reg_error;
  assign periph_04_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_04_cfg_trie_we = addr_hit[79] & reg_we & !reg_error;
  assign periph_04_cfg_trie_wd = reg_wdata[9];

  assign periph_04_mux_sel_we = addr_hit[80] & reg_we & !reg_error;
  assign periph_04_mux_sel_wd = reg_wdata[0];

  assign periph_05_cfg_chip2pad_we = addr_hit[81] & reg_we & !reg_error;
  assign periph_05_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_05_cfg_drv0_we = addr_hit[81] & reg_we & !reg_error;
  assign periph_05_cfg_drv0_wd = reg_wdata[1];

  assign periph_05_cfg_drv1_we = addr_hit[81] & reg_we & !reg_error;
  assign periph_05_cfg_drv1_wd = reg_wdata[2];

  assign periph_05_cfg_drv2_we = addr_hit[81] & reg_we & !reg_error;
  assign periph_05_cfg_drv2_wd = reg_wdata[3];

  assign periph_05_cfg_pde_we = addr_hit[81] & reg_we & !reg_error;
  assign periph_05_cfg_pde_wd = reg_wdata[4];

  assign periph_05_cfg_pp_odrain_selector_we = addr_hit[81] & reg_we & !reg_error;
  assign periph_05_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_05_cfg_pudis_we = addr_hit[81] & reg_we & !reg_error;
  assign periph_05_cfg_pudis_wd = reg_wdata[6];

  assign periph_05_cfg_rxdis_we = addr_hit[81] & reg_we & !reg_error;
  assign periph_05_cfg_rxdis_wd = reg_wdata[7];

  assign periph_05_cfg_slw_pgm_we = addr_hit[81] & reg_we & !reg_error;
  assign periph_05_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_05_cfg_trie_we = addr_hit[81] & reg_we & !reg_error;
  assign periph_05_cfg_trie_wd = reg_wdata[9];

  assign periph_05_mux_sel_we = addr_hit[82] & reg_we & !reg_error;
  assign periph_05_mux_sel_wd = reg_wdata[0];

  assign periph_06_cfg_chip2pad_we = addr_hit[83] & reg_we & !reg_error;
  assign periph_06_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_06_cfg_drv0_we = addr_hit[83] & reg_we & !reg_error;
  assign periph_06_cfg_drv0_wd = reg_wdata[1];

  assign periph_06_cfg_drv1_we = addr_hit[83] & reg_we & !reg_error;
  assign periph_06_cfg_drv1_wd = reg_wdata[2];

  assign periph_06_cfg_drv2_we = addr_hit[83] & reg_we & !reg_error;
  assign periph_06_cfg_drv2_wd = reg_wdata[3];

  assign periph_06_cfg_pde_we = addr_hit[83] & reg_we & !reg_error;
  assign periph_06_cfg_pde_wd = reg_wdata[4];

  assign periph_06_cfg_pp_odrain_selector_we = addr_hit[83] & reg_we & !reg_error;
  assign periph_06_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_06_cfg_pudis_we = addr_hit[83] & reg_we & !reg_error;
  assign periph_06_cfg_pudis_wd = reg_wdata[6];

  assign periph_06_cfg_rxdis_we = addr_hit[83] & reg_we & !reg_error;
  assign periph_06_cfg_rxdis_wd = reg_wdata[7];

  assign periph_06_cfg_slw_pgm_we = addr_hit[83] & reg_we & !reg_error;
  assign periph_06_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_06_cfg_trie_we = addr_hit[83] & reg_we & !reg_error;
  assign periph_06_cfg_trie_wd = reg_wdata[9];

  assign periph_06_mux_sel_we = addr_hit[84] & reg_we & !reg_error;
  assign periph_06_mux_sel_wd = reg_wdata[0];

  assign periph_07_cfg_chip2pad_we = addr_hit[85] & reg_we & !reg_error;
  assign periph_07_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_07_cfg_drv0_we = addr_hit[85] & reg_we & !reg_error;
  assign periph_07_cfg_drv0_wd = reg_wdata[1];

  assign periph_07_cfg_drv1_we = addr_hit[85] & reg_we & !reg_error;
  assign periph_07_cfg_drv1_wd = reg_wdata[2];

  assign periph_07_cfg_drv2_we = addr_hit[85] & reg_we & !reg_error;
  assign periph_07_cfg_drv2_wd = reg_wdata[3];

  assign periph_07_cfg_pde_we = addr_hit[85] & reg_we & !reg_error;
  assign periph_07_cfg_pde_wd = reg_wdata[4];

  assign periph_07_cfg_pp_odrain_selector_we = addr_hit[85] & reg_we & !reg_error;
  assign periph_07_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_07_cfg_pudis_we = addr_hit[85] & reg_we & !reg_error;
  assign periph_07_cfg_pudis_wd = reg_wdata[6];

  assign periph_07_cfg_rxdis_we = addr_hit[85] & reg_we & !reg_error;
  assign periph_07_cfg_rxdis_wd = reg_wdata[7];

  assign periph_07_cfg_slw_pgm_we = addr_hit[85] & reg_we & !reg_error;
  assign periph_07_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_07_cfg_trie_we = addr_hit[85] & reg_we & !reg_error;
  assign periph_07_cfg_trie_wd = reg_wdata[9];

  assign periph_07_mux_sel_we = addr_hit[86] & reg_we & !reg_error;
  assign periph_07_mux_sel_wd = reg_wdata[0];

  assign periph_08_cfg_chip2pad_we = addr_hit[87] & reg_we & !reg_error;
  assign periph_08_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_08_cfg_drv0_we = addr_hit[87] & reg_we & !reg_error;
  assign periph_08_cfg_drv0_wd = reg_wdata[1];

  assign periph_08_cfg_drv1_we = addr_hit[87] & reg_we & !reg_error;
  assign periph_08_cfg_drv1_wd = reg_wdata[2];

  assign periph_08_cfg_drv2_we = addr_hit[87] & reg_we & !reg_error;
  assign periph_08_cfg_drv2_wd = reg_wdata[3];

  assign periph_08_cfg_pde_we = addr_hit[87] & reg_we & !reg_error;
  assign periph_08_cfg_pde_wd = reg_wdata[4];

  assign periph_08_cfg_pp_odrain_selector_we = addr_hit[87] & reg_we & !reg_error;
  assign periph_08_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_08_cfg_pudis_we = addr_hit[87] & reg_we & !reg_error;
  assign periph_08_cfg_pudis_wd = reg_wdata[6];

  assign periph_08_cfg_rxdis_we = addr_hit[87] & reg_we & !reg_error;
  assign periph_08_cfg_rxdis_wd = reg_wdata[7];

  assign periph_08_cfg_slw_pgm_we = addr_hit[87] & reg_we & !reg_error;
  assign periph_08_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_08_cfg_trie_we = addr_hit[87] & reg_we & !reg_error;
  assign periph_08_cfg_trie_wd = reg_wdata[9];

  assign periph_08_mux_sel_we = addr_hit[88] & reg_we & !reg_error;
  assign periph_08_mux_sel_wd = reg_wdata[0];

  assign periph_09_cfg_chip2pad_we = addr_hit[89] & reg_we & !reg_error;
  assign periph_09_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_09_cfg_drv0_we = addr_hit[89] & reg_we & !reg_error;
  assign periph_09_cfg_drv0_wd = reg_wdata[1];

  assign periph_09_cfg_drv1_we = addr_hit[89] & reg_we & !reg_error;
  assign periph_09_cfg_drv1_wd = reg_wdata[2];

  assign periph_09_cfg_drv2_we = addr_hit[89] & reg_we & !reg_error;
  assign periph_09_cfg_drv2_wd = reg_wdata[3];

  assign periph_09_cfg_pde_we = addr_hit[89] & reg_we & !reg_error;
  assign periph_09_cfg_pde_wd = reg_wdata[4];

  assign periph_09_cfg_pp_odrain_selector_we = addr_hit[89] & reg_we & !reg_error;
  assign periph_09_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_09_cfg_pudis_we = addr_hit[89] & reg_we & !reg_error;
  assign periph_09_cfg_pudis_wd = reg_wdata[6];

  assign periph_09_cfg_rxdis_we = addr_hit[89] & reg_we & !reg_error;
  assign periph_09_cfg_rxdis_wd = reg_wdata[7];

  assign periph_09_cfg_slw_pgm_we = addr_hit[89] & reg_we & !reg_error;
  assign periph_09_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_09_cfg_trie_we = addr_hit[89] & reg_we & !reg_error;
  assign periph_09_cfg_trie_wd = reg_wdata[9];

  assign periph_09_mux_sel_we = addr_hit[90] & reg_we & !reg_error;
  assign periph_09_mux_sel_wd = reg_wdata[0];

  assign periph_10_cfg_chip2pad_we = addr_hit[91] & reg_we & !reg_error;
  assign periph_10_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_10_cfg_drv0_we = addr_hit[91] & reg_we & !reg_error;
  assign periph_10_cfg_drv0_wd = reg_wdata[1];

  assign periph_10_cfg_drv1_we = addr_hit[91] & reg_we & !reg_error;
  assign periph_10_cfg_drv1_wd = reg_wdata[2];

  assign periph_10_cfg_drv2_we = addr_hit[91] & reg_we & !reg_error;
  assign periph_10_cfg_drv2_wd = reg_wdata[3];

  assign periph_10_cfg_pde_we = addr_hit[91] & reg_we & !reg_error;
  assign periph_10_cfg_pde_wd = reg_wdata[4];

  assign periph_10_cfg_pp_odrain_selector_we = addr_hit[91] & reg_we & !reg_error;
  assign periph_10_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_10_cfg_pudis_we = addr_hit[91] & reg_we & !reg_error;
  assign periph_10_cfg_pudis_wd = reg_wdata[6];

  assign periph_10_cfg_rxdis_we = addr_hit[91] & reg_we & !reg_error;
  assign periph_10_cfg_rxdis_wd = reg_wdata[7];

  assign periph_10_cfg_slw_pgm_we = addr_hit[91] & reg_we & !reg_error;
  assign periph_10_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_10_cfg_trie_we = addr_hit[91] & reg_we & !reg_error;
  assign periph_10_cfg_trie_wd = reg_wdata[9];

  assign periph_10_mux_sel_we = addr_hit[92] & reg_we & !reg_error;
  assign periph_10_mux_sel_wd = reg_wdata[0];

  assign periph_11_cfg_chip2pad_we = addr_hit[93] & reg_we & !reg_error;
  assign periph_11_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_11_cfg_drv0_we = addr_hit[93] & reg_we & !reg_error;
  assign periph_11_cfg_drv0_wd = reg_wdata[1];

  assign periph_11_cfg_drv1_we = addr_hit[93] & reg_we & !reg_error;
  assign periph_11_cfg_drv1_wd = reg_wdata[2];

  assign periph_11_cfg_drv2_we = addr_hit[93] & reg_we & !reg_error;
  assign periph_11_cfg_drv2_wd = reg_wdata[3];

  assign periph_11_cfg_pde_we = addr_hit[93] & reg_we & !reg_error;
  assign periph_11_cfg_pde_wd = reg_wdata[4];

  assign periph_11_cfg_pp_odrain_selector_we = addr_hit[93] & reg_we & !reg_error;
  assign periph_11_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_11_cfg_pudis_we = addr_hit[93] & reg_we & !reg_error;
  assign periph_11_cfg_pudis_wd = reg_wdata[6];

  assign periph_11_cfg_rxdis_we = addr_hit[93] & reg_we & !reg_error;
  assign periph_11_cfg_rxdis_wd = reg_wdata[7];

  assign periph_11_cfg_slw_pgm_we = addr_hit[93] & reg_we & !reg_error;
  assign periph_11_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_11_cfg_trie_we = addr_hit[93] & reg_we & !reg_error;
  assign periph_11_cfg_trie_wd = reg_wdata[9];

  assign periph_11_mux_sel_we = addr_hit[94] & reg_we & !reg_error;
  assign periph_11_mux_sel_wd = reg_wdata[0];

  assign periph_12_cfg_chip2pad_we = addr_hit[95] & reg_we & !reg_error;
  assign periph_12_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_12_cfg_drv0_we = addr_hit[95] & reg_we & !reg_error;
  assign periph_12_cfg_drv0_wd = reg_wdata[1];

  assign periph_12_cfg_drv1_we = addr_hit[95] & reg_we & !reg_error;
  assign periph_12_cfg_drv1_wd = reg_wdata[2];

  assign periph_12_cfg_drv2_we = addr_hit[95] & reg_we & !reg_error;
  assign periph_12_cfg_drv2_wd = reg_wdata[3];

  assign periph_12_cfg_pde_we = addr_hit[95] & reg_we & !reg_error;
  assign periph_12_cfg_pde_wd = reg_wdata[4];

  assign periph_12_cfg_pp_odrain_selector_we = addr_hit[95] & reg_we & !reg_error;
  assign periph_12_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_12_cfg_pudis_we = addr_hit[95] & reg_we & !reg_error;
  assign periph_12_cfg_pudis_wd = reg_wdata[6];

  assign periph_12_cfg_rxdis_we = addr_hit[95] & reg_we & !reg_error;
  assign periph_12_cfg_rxdis_wd = reg_wdata[7];

  assign periph_12_cfg_slw_pgm_we = addr_hit[95] & reg_we & !reg_error;
  assign periph_12_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_12_cfg_trie_we = addr_hit[95] & reg_we & !reg_error;
  assign periph_12_cfg_trie_wd = reg_wdata[9];

  assign periph_12_mux_sel_we = addr_hit[96] & reg_we & !reg_error;
  assign periph_12_mux_sel_wd = reg_wdata[0];

  assign periph_13_cfg_chip2pad_we = addr_hit[97] & reg_we & !reg_error;
  assign periph_13_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_13_cfg_drv0_we = addr_hit[97] & reg_we & !reg_error;
  assign periph_13_cfg_drv0_wd = reg_wdata[1];

  assign periph_13_cfg_drv1_we = addr_hit[97] & reg_we & !reg_error;
  assign periph_13_cfg_drv1_wd = reg_wdata[2];

  assign periph_13_cfg_drv2_we = addr_hit[97] & reg_we & !reg_error;
  assign periph_13_cfg_drv2_wd = reg_wdata[3];

  assign periph_13_cfg_pde_we = addr_hit[97] & reg_we & !reg_error;
  assign periph_13_cfg_pde_wd = reg_wdata[4];

  assign periph_13_cfg_pp_odrain_selector_we = addr_hit[97] & reg_we & !reg_error;
  assign periph_13_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_13_cfg_pudis_we = addr_hit[97] & reg_we & !reg_error;
  assign periph_13_cfg_pudis_wd = reg_wdata[6];

  assign periph_13_cfg_rxdis_we = addr_hit[97] & reg_we & !reg_error;
  assign periph_13_cfg_rxdis_wd = reg_wdata[7];

  assign periph_13_cfg_slw_pgm_we = addr_hit[97] & reg_we & !reg_error;
  assign periph_13_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_13_cfg_trie_we = addr_hit[97] & reg_we & !reg_error;
  assign periph_13_cfg_trie_wd = reg_wdata[9];

  assign periph_13_mux_sel_we = addr_hit[98] & reg_we & !reg_error;
  assign periph_13_mux_sel_wd = reg_wdata[0];

  assign periph_14_cfg_chip2pad_we = addr_hit[99] & reg_we & !reg_error;
  assign periph_14_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_14_cfg_drv0_we = addr_hit[99] & reg_we & !reg_error;
  assign periph_14_cfg_drv0_wd = reg_wdata[1];

  assign periph_14_cfg_drv1_we = addr_hit[99] & reg_we & !reg_error;
  assign periph_14_cfg_drv1_wd = reg_wdata[2];

  assign periph_14_cfg_drv2_we = addr_hit[99] & reg_we & !reg_error;
  assign periph_14_cfg_drv2_wd = reg_wdata[3];

  assign periph_14_cfg_pde_we = addr_hit[99] & reg_we & !reg_error;
  assign periph_14_cfg_pde_wd = reg_wdata[4];

  assign periph_14_cfg_pp_odrain_selector_we = addr_hit[99] & reg_we & !reg_error;
  assign periph_14_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_14_cfg_pudis_we = addr_hit[99] & reg_we & !reg_error;
  assign periph_14_cfg_pudis_wd = reg_wdata[6];

  assign periph_14_cfg_rxdis_we = addr_hit[99] & reg_we & !reg_error;
  assign periph_14_cfg_rxdis_wd = reg_wdata[7];

  assign periph_14_cfg_slw_pgm_we = addr_hit[99] & reg_we & !reg_error;
  assign periph_14_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_14_cfg_trie_we = addr_hit[99] & reg_we & !reg_error;
  assign periph_14_cfg_trie_wd = reg_wdata[9];

  assign periph_14_mux_sel_we = addr_hit[100] & reg_we & !reg_error;
  assign periph_14_mux_sel_wd = reg_wdata[0];

  assign periph_15_cfg_chip2pad_we = addr_hit[101] & reg_we & !reg_error;
  assign periph_15_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_15_cfg_drv0_we = addr_hit[101] & reg_we & !reg_error;
  assign periph_15_cfg_drv0_wd = reg_wdata[1];

  assign periph_15_cfg_drv1_we = addr_hit[101] & reg_we & !reg_error;
  assign periph_15_cfg_drv1_wd = reg_wdata[2];

  assign periph_15_cfg_drv2_we = addr_hit[101] & reg_we & !reg_error;
  assign periph_15_cfg_drv2_wd = reg_wdata[3];

  assign periph_15_cfg_pde_we = addr_hit[101] & reg_we & !reg_error;
  assign periph_15_cfg_pde_wd = reg_wdata[4];

  assign periph_15_cfg_pp_odrain_selector_we = addr_hit[101] & reg_we & !reg_error;
  assign periph_15_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_15_cfg_pudis_we = addr_hit[101] & reg_we & !reg_error;
  assign periph_15_cfg_pudis_wd = reg_wdata[6];

  assign periph_15_cfg_rxdis_we = addr_hit[101] & reg_we & !reg_error;
  assign periph_15_cfg_rxdis_wd = reg_wdata[7];

  assign periph_15_cfg_slw_pgm_we = addr_hit[101] & reg_we & !reg_error;
  assign periph_15_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_15_cfg_trie_we = addr_hit[101] & reg_we & !reg_error;
  assign periph_15_cfg_trie_wd = reg_wdata[9];

  assign periph_15_mux_sel_we = addr_hit[102] & reg_we & !reg_error;
  assign periph_15_mux_sel_wd = reg_wdata[0];

  assign periph_16_cfg_chip2pad_we = addr_hit[103] & reg_we & !reg_error;
  assign periph_16_cfg_chip2pad_wd = reg_wdata[0];

  assign periph_16_cfg_drv0_we = addr_hit[103] & reg_we & !reg_error;
  assign periph_16_cfg_drv0_wd = reg_wdata[1];

  assign periph_16_cfg_drv1_we = addr_hit[103] & reg_we & !reg_error;
  assign periph_16_cfg_drv1_wd = reg_wdata[2];

  assign periph_16_cfg_drv2_we = addr_hit[103] & reg_we & !reg_error;
  assign periph_16_cfg_drv2_wd = reg_wdata[3];

  assign periph_16_cfg_pde_we = addr_hit[103] & reg_we & !reg_error;
  assign periph_16_cfg_pde_wd = reg_wdata[4];

  assign periph_16_cfg_pp_odrain_selector_we = addr_hit[103] & reg_we & !reg_error;
  assign periph_16_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign periph_16_cfg_pudis_we = addr_hit[103] & reg_we & !reg_error;
  assign periph_16_cfg_pudis_wd = reg_wdata[6];

  assign periph_16_cfg_rxdis_we = addr_hit[103] & reg_we & !reg_error;
  assign periph_16_cfg_rxdis_wd = reg_wdata[7];

  assign periph_16_cfg_slw_pgm_we = addr_hit[103] & reg_we & !reg_error;
  assign periph_16_cfg_slw_pgm_wd = reg_wdata[8];

  assign periph_16_cfg_trie_we = addr_hit[103] & reg_we & !reg_error;
  assign periph_16_cfg_trie_wd = reg_wdata[9];

  assign periph_16_mux_sel_we = addr_hit[104] & reg_we & !reg_error;
  assign periph_16_mux_sel_wd = reg_wdata[0];

  assign debug_out0_cfg_chip2pad_we = addr_hit[105] & reg_we & !reg_error;
  assign debug_out0_cfg_chip2pad_wd = reg_wdata[0];

  assign debug_out0_cfg_drv0_we = addr_hit[105] & reg_we & !reg_error;
  assign debug_out0_cfg_drv0_wd = reg_wdata[1];

  assign debug_out0_cfg_drv1_we = addr_hit[105] & reg_we & !reg_error;
  assign debug_out0_cfg_drv1_wd = reg_wdata[2];

  assign debug_out0_cfg_drv2_we = addr_hit[105] & reg_we & !reg_error;
  assign debug_out0_cfg_drv2_wd = reg_wdata[3];

  assign debug_out0_cfg_pde_we = addr_hit[105] & reg_we & !reg_error;
  assign debug_out0_cfg_pde_wd = reg_wdata[4];

  assign debug_out0_cfg_pp_odrain_selector_we = addr_hit[105] & reg_we & !reg_error;
  assign debug_out0_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign debug_out0_cfg_pudis_we = addr_hit[105] & reg_we & !reg_error;
  assign debug_out0_cfg_pudis_wd = reg_wdata[6];

  assign debug_out0_cfg_rxdis_we = addr_hit[105] & reg_we & !reg_error;
  assign debug_out0_cfg_rxdis_wd = reg_wdata[7];

  assign debug_out0_cfg_slw_pgm_we = addr_hit[105] & reg_we & !reg_error;
  assign debug_out0_cfg_slw_pgm_wd = reg_wdata[8];

  assign debug_out0_cfg_trie_we = addr_hit[105] & reg_we & !reg_error;
  assign debug_out0_cfg_trie_wd = reg_wdata[9];

  assign debug_out0_mux_sel_we = addr_hit[106] & reg_we & !reg_error;
  assign debug_out0_mux_sel_wd = reg_wdata[4:0];

  assign debug_out1_cfg_chip2pad_we = addr_hit[107] & reg_we & !reg_error;
  assign debug_out1_cfg_chip2pad_wd = reg_wdata[0];

  assign debug_out1_cfg_drv0_we = addr_hit[107] & reg_we & !reg_error;
  assign debug_out1_cfg_drv0_wd = reg_wdata[1];

  assign debug_out1_cfg_drv1_we = addr_hit[107] & reg_we & !reg_error;
  assign debug_out1_cfg_drv1_wd = reg_wdata[2];

  assign debug_out1_cfg_drv2_we = addr_hit[107] & reg_we & !reg_error;
  assign debug_out1_cfg_drv2_wd = reg_wdata[3];

  assign debug_out1_cfg_pde_we = addr_hit[107] & reg_we & !reg_error;
  assign debug_out1_cfg_pde_wd = reg_wdata[4];

  assign debug_out1_cfg_pp_odrain_selector_we = addr_hit[107] & reg_we & !reg_error;
  assign debug_out1_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign debug_out1_cfg_pudis_we = addr_hit[107] & reg_we & !reg_error;
  assign debug_out1_cfg_pudis_wd = reg_wdata[6];

  assign debug_out1_cfg_rxdis_we = addr_hit[107] & reg_we & !reg_error;
  assign debug_out1_cfg_rxdis_wd = reg_wdata[7];

  assign debug_out1_cfg_slw_pgm_we = addr_hit[107] & reg_we & !reg_error;
  assign debug_out1_cfg_slw_pgm_wd = reg_wdata[8];

  assign debug_out1_cfg_trie_we = addr_hit[107] & reg_we & !reg_error;
  assign debug_out1_cfg_trie_wd = reg_wdata[9];

  assign debug_out1_mux_sel_we = addr_hit[108] & reg_we & !reg_error;
  assign debug_out1_mux_sel_wd = reg_wdata[4:0];

  assign debug_out2_cfg_chip2pad_we = addr_hit[109] & reg_we & !reg_error;
  assign debug_out2_cfg_chip2pad_wd = reg_wdata[0];

  assign debug_out2_cfg_drv0_we = addr_hit[109] & reg_we & !reg_error;
  assign debug_out2_cfg_drv0_wd = reg_wdata[1];

  assign debug_out2_cfg_drv1_we = addr_hit[109] & reg_we & !reg_error;
  assign debug_out2_cfg_drv1_wd = reg_wdata[2];

  assign debug_out2_cfg_drv2_we = addr_hit[109] & reg_we & !reg_error;
  assign debug_out2_cfg_drv2_wd = reg_wdata[3];

  assign debug_out2_cfg_pde_we = addr_hit[109] & reg_we & !reg_error;
  assign debug_out2_cfg_pde_wd = reg_wdata[4];

  assign debug_out2_cfg_pp_odrain_selector_we = addr_hit[109] & reg_we & !reg_error;
  assign debug_out2_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign debug_out2_cfg_pudis_we = addr_hit[109] & reg_we & !reg_error;
  assign debug_out2_cfg_pudis_wd = reg_wdata[6];

  assign debug_out2_cfg_rxdis_we = addr_hit[109] & reg_we & !reg_error;
  assign debug_out2_cfg_rxdis_wd = reg_wdata[7];

  assign debug_out2_cfg_slw_pgm_we = addr_hit[109] & reg_we & !reg_error;
  assign debug_out2_cfg_slw_pgm_wd = reg_wdata[8];

  assign debug_out2_cfg_trie_we = addr_hit[109] & reg_we & !reg_error;
  assign debug_out2_cfg_trie_wd = reg_wdata[9];

  assign debug_out2_mux_sel_we = addr_hit[110] & reg_we & !reg_error;
  assign debug_out2_mux_sel_wd = reg_wdata[4:0];

  assign debug_out3_cfg_chip2pad_we = addr_hit[111] & reg_we & !reg_error;
  assign debug_out3_cfg_chip2pad_wd = reg_wdata[0];

  assign debug_out3_cfg_drv0_we = addr_hit[111] & reg_we & !reg_error;
  assign debug_out3_cfg_drv0_wd = reg_wdata[1];

  assign debug_out3_cfg_drv1_we = addr_hit[111] & reg_we & !reg_error;
  assign debug_out3_cfg_drv1_wd = reg_wdata[2];

  assign debug_out3_cfg_drv2_we = addr_hit[111] & reg_we & !reg_error;
  assign debug_out3_cfg_drv2_wd = reg_wdata[3];

  assign debug_out3_cfg_pde_we = addr_hit[111] & reg_we & !reg_error;
  assign debug_out3_cfg_pde_wd = reg_wdata[4];

  assign debug_out3_cfg_pp_odrain_selector_we = addr_hit[111] & reg_we & !reg_error;
  assign debug_out3_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign debug_out3_cfg_pudis_we = addr_hit[111] & reg_we & !reg_error;
  assign debug_out3_cfg_pudis_wd = reg_wdata[6];

  assign debug_out3_cfg_rxdis_we = addr_hit[111] & reg_we & !reg_error;
  assign debug_out3_cfg_rxdis_wd = reg_wdata[7];

  assign debug_out3_cfg_slw_pgm_we = addr_hit[111] & reg_we & !reg_error;
  assign debug_out3_cfg_slw_pgm_wd = reg_wdata[8];

  assign debug_out3_cfg_trie_we = addr_hit[111] & reg_we & !reg_error;
  assign debug_out3_cfg_trie_wd = reg_wdata[9];

  assign debug_out3_mux_sel_we = addr_hit[112] & reg_we & !reg_error;
  assign debug_out3_mux_sel_wd = reg_wdata[4:0];

  assign debug_out4_cfg_chip2pad_we = addr_hit[113] & reg_we & !reg_error;
  assign debug_out4_cfg_chip2pad_wd = reg_wdata[0];

  assign debug_out4_cfg_drv0_we = addr_hit[113] & reg_we & !reg_error;
  assign debug_out4_cfg_drv0_wd = reg_wdata[1];

  assign debug_out4_cfg_drv1_we = addr_hit[113] & reg_we & !reg_error;
  assign debug_out4_cfg_drv1_wd = reg_wdata[2];

  assign debug_out4_cfg_drv2_we = addr_hit[113] & reg_we & !reg_error;
  assign debug_out4_cfg_drv2_wd = reg_wdata[3];

  assign debug_out4_cfg_pde_we = addr_hit[113] & reg_we & !reg_error;
  assign debug_out4_cfg_pde_wd = reg_wdata[4];

  assign debug_out4_cfg_pp_odrain_selector_we = addr_hit[113] & reg_we & !reg_error;
  assign debug_out4_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign debug_out4_cfg_pudis_we = addr_hit[113] & reg_we & !reg_error;
  assign debug_out4_cfg_pudis_wd = reg_wdata[6];

  assign debug_out4_cfg_rxdis_we = addr_hit[113] & reg_we & !reg_error;
  assign debug_out4_cfg_rxdis_wd = reg_wdata[7];

  assign debug_out4_cfg_slw_pgm_we = addr_hit[113] & reg_we & !reg_error;
  assign debug_out4_cfg_slw_pgm_wd = reg_wdata[8];

  assign debug_out4_cfg_trie_we = addr_hit[113] & reg_we & !reg_error;
  assign debug_out4_cfg_trie_wd = reg_wdata[9];

  assign debug_out4_mux_sel_we = addr_hit[114] & reg_we & !reg_error;
  assign debug_out4_mux_sel_wd = reg_wdata[4:0];

  assign jtag_pll_00_cfg_chip2pad_we = addr_hit[115] & reg_we & !reg_error;
  assign jtag_pll_00_cfg_chip2pad_wd = reg_wdata[0];

  assign jtag_pll_00_cfg_drv0_we = addr_hit[115] & reg_we & !reg_error;
  assign jtag_pll_00_cfg_drv0_wd = reg_wdata[1];

  assign jtag_pll_00_cfg_drv1_we = addr_hit[115] & reg_we & !reg_error;
  assign jtag_pll_00_cfg_drv1_wd = reg_wdata[2];

  assign jtag_pll_00_cfg_drv2_we = addr_hit[115] & reg_we & !reg_error;
  assign jtag_pll_00_cfg_drv2_wd = reg_wdata[3];

  assign jtag_pll_00_cfg_pde_we = addr_hit[115] & reg_we & !reg_error;
  assign jtag_pll_00_cfg_pde_wd = reg_wdata[4];

  assign jtag_pll_00_cfg_pp_odrain_selector_we = addr_hit[115] & reg_we & !reg_error;
  assign jtag_pll_00_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign jtag_pll_00_cfg_pudis_we = addr_hit[115] & reg_we & !reg_error;
  assign jtag_pll_00_cfg_pudis_wd = reg_wdata[6];

  assign jtag_pll_00_cfg_rxdis_we = addr_hit[115] & reg_we & !reg_error;
  assign jtag_pll_00_cfg_rxdis_wd = reg_wdata[7];

  assign jtag_pll_00_cfg_slw_pgm_we = addr_hit[115] & reg_we & !reg_error;
  assign jtag_pll_00_cfg_slw_pgm_wd = reg_wdata[8];

  assign jtag_pll_00_cfg_trie_we = addr_hit[115] & reg_we & !reg_error;
  assign jtag_pll_00_cfg_trie_wd = reg_wdata[9];

  assign jtag_pll_00_mux_sel_we = addr_hit[116] & reg_we & !reg_error;
  assign jtag_pll_00_mux_sel_wd = reg_wdata[1:0];

  assign jtag_pll_01_cfg_chip2pad_we = addr_hit[117] & reg_we & !reg_error;
  assign jtag_pll_01_cfg_chip2pad_wd = reg_wdata[0];

  assign jtag_pll_01_cfg_drv0_we = addr_hit[117] & reg_we & !reg_error;
  assign jtag_pll_01_cfg_drv0_wd = reg_wdata[1];

  assign jtag_pll_01_cfg_drv1_we = addr_hit[117] & reg_we & !reg_error;
  assign jtag_pll_01_cfg_drv1_wd = reg_wdata[2];

  assign jtag_pll_01_cfg_drv2_we = addr_hit[117] & reg_we & !reg_error;
  assign jtag_pll_01_cfg_drv2_wd = reg_wdata[3];

  assign jtag_pll_01_cfg_pde_we = addr_hit[117] & reg_we & !reg_error;
  assign jtag_pll_01_cfg_pde_wd = reg_wdata[4];

  assign jtag_pll_01_cfg_pp_odrain_selector_we = addr_hit[117] & reg_we & !reg_error;
  assign jtag_pll_01_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign jtag_pll_01_cfg_pudis_we = addr_hit[117] & reg_we & !reg_error;
  assign jtag_pll_01_cfg_pudis_wd = reg_wdata[6];

  assign jtag_pll_01_cfg_rxdis_we = addr_hit[117] & reg_we & !reg_error;
  assign jtag_pll_01_cfg_rxdis_wd = reg_wdata[7];

  assign jtag_pll_01_cfg_slw_pgm_we = addr_hit[117] & reg_we & !reg_error;
  assign jtag_pll_01_cfg_slw_pgm_wd = reg_wdata[8];

  assign jtag_pll_01_cfg_trie_we = addr_hit[117] & reg_we & !reg_error;
  assign jtag_pll_01_cfg_trie_wd = reg_wdata[9];

  assign jtag_pll_01_mux_sel_we = addr_hit[118] & reg_we & !reg_error;
  assign jtag_pll_01_mux_sel_wd = reg_wdata[1:0];

  assign jtag_pll_02_cfg_chip2pad_we = addr_hit[119] & reg_we & !reg_error;
  assign jtag_pll_02_cfg_chip2pad_wd = reg_wdata[0];

  assign jtag_pll_02_cfg_drv0_we = addr_hit[119] & reg_we & !reg_error;
  assign jtag_pll_02_cfg_drv0_wd = reg_wdata[1];

  assign jtag_pll_02_cfg_drv1_we = addr_hit[119] & reg_we & !reg_error;
  assign jtag_pll_02_cfg_drv1_wd = reg_wdata[2];

  assign jtag_pll_02_cfg_drv2_we = addr_hit[119] & reg_we & !reg_error;
  assign jtag_pll_02_cfg_drv2_wd = reg_wdata[3];

  assign jtag_pll_02_cfg_pde_we = addr_hit[119] & reg_we & !reg_error;
  assign jtag_pll_02_cfg_pde_wd = reg_wdata[4];

  assign jtag_pll_02_cfg_pp_odrain_selector_we = addr_hit[119] & reg_we & !reg_error;
  assign jtag_pll_02_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign jtag_pll_02_cfg_pudis_we = addr_hit[119] & reg_we & !reg_error;
  assign jtag_pll_02_cfg_pudis_wd = reg_wdata[6];

  assign jtag_pll_02_cfg_rxdis_we = addr_hit[119] & reg_we & !reg_error;
  assign jtag_pll_02_cfg_rxdis_wd = reg_wdata[7];

  assign jtag_pll_02_cfg_slw_pgm_we = addr_hit[119] & reg_we & !reg_error;
  assign jtag_pll_02_cfg_slw_pgm_wd = reg_wdata[8];

  assign jtag_pll_02_cfg_trie_we = addr_hit[119] & reg_we & !reg_error;
  assign jtag_pll_02_cfg_trie_wd = reg_wdata[9];

  assign jtag_pll_02_mux_sel_we = addr_hit[120] & reg_we & !reg_error;
  assign jtag_pll_02_mux_sel_wd = reg_wdata[1:0];

  assign jtag_pll_03_cfg_chip2pad_we = addr_hit[121] & reg_we & !reg_error;
  assign jtag_pll_03_cfg_chip2pad_wd = reg_wdata[0];

  assign jtag_pll_03_cfg_drv0_we = addr_hit[121] & reg_we & !reg_error;
  assign jtag_pll_03_cfg_drv0_wd = reg_wdata[1];

  assign jtag_pll_03_cfg_drv1_we = addr_hit[121] & reg_we & !reg_error;
  assign jtag_pll_03_cfg_drv1_wd = reg_wdata[2];

  assign jtag_pll_03_cfg_drv2_we = addr_hit[121] & reg_we & !reg_error;
  assign jtag_pll_03_cfg_drv2_wd = reg_wdata[3];

  assign jtag_pll_03_cfg_pde_we = addr_hit[121] & reg_we & !reg_error;
  assign jtag_pll_03_cfg_pde_wd = reg_wdata[4];

  assign jtag_pll_03_cfg_pp_odrain_selector_we = addr_hit[121] & reg_we & !reg_error;
  assign jtag_pll_03_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign jtag_pll_03_cfg_pudis_we = addr_hit[121] & reg_we & !reg_error;
  assign jtag_pll_03_cfg_pudis_wd = reg_wdata[6];

  assign jtag_pll_03_cfg_rxdis_we = addr_hit[121] & reg_we & !reg_error;
  assign jtag_pll_03_cfg_rxdis_wd = reg_wdata[7];

  assign jtag_pll_03_cfg_slw_pgm_we = addr_hit[121] & reg_we & !reg_error;
  assign jtag_pll_03_cfg_slw_pgm_wd = reg_wdata[8];

  assign jtag_pll_03_cfg_trie_we = addr_hit[121] & reg_we & !reg_error;
  assign jtag_pll_03_cfg_trie_wd = reg_wdata[9];

  assign jtag_pll_03_mux_sel_we = addr_hit[122] & reg_we & !reg_error;
  assign jtag_pll_03_mux_sel_wd = reg_wdata[1:0];

  assign jtag_pll_04_cfg_chip2pad_we = addr_hit[123] & reg_we & !reg_error;
  assign jtag_pll_04_cfg_chip2pad_wd = reg_wdata[0];

  assign jtag_pll_04_cfg_drv0_we = addr_hit[123] & reg_we & !reg_error;
  assign jtag_pll_04_cfg_drv0_wd = reg_wdata[1];

  assign jtag_pll_04_cfg_drv1_we = addr_hit[123] & reg_we & !reg_error;
  assign jtag_pll_04_cfg_drv1_wd = reg_wdata[2];

  assign jtag_pll_04_cfg_drv2_we = addr_hit[123] & reg_we & !reg_error;
  assign jtag_pll_04_cfg_drv2_wd = reg_wdata[3];

  assign jtag_pll_04_cfg_pde_we = addr_hit[123] & reg_we & !reg_error;
  assign jtag_pll_04_cfg_pde_wd = reg_wdata[4];

  assign jtag_pll_04_cfg_pp_odrain_selector_we = addr_hit[123] & reg_we & !reg_error;
  assign jtag_pll_04_cfg_pp_odrain_selector_wd = reg_wdata[5];

  assign jtag_pll_04_cfg_pudis_we = addr_hit[123] & reg_we & !reg_error;
  assign jtag_pll_04_cfg_pudis_wd = reg_wdata[6];

  assign jtag_pll_04_cfg_rxdis_we = addr_hit[123] & reg_we & !reg_error;
  assign jtag_pll_04_cfg_rxdis_wd = reg_wdata[7];

  assign jtag_pll_04_cfg_slw_pgm_we = addr_hit[123] & reg_we & !reg_error;
  assign jtag_pll_04_cfg_slw_pgm_wd = reg_wdata[8];

  assign jtag_pll_04_cfg_trie_we = addr_hit[123] & reg_we & !reg_error;
  assign jtag_pll_04_cfg_trie_wd = reg_wdata[9];

  assign jtag_pll_04_mux_sel_we = addr_hit[124] & reg_we & !reg_error;
  assign jtag_pll_04_mux_sel_wd = reg_wdata[1:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[15:0] = info_hw_version_qs;
        reg_rdata_next[31:16] = info_padcount_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = host_00_cfg_chip2pad_qs;
        reg_rdata_next[1] = host_00_cfg_drv0_qs;
        reg_rdata_next[2] = host_00_cfg_drv1_qs;
        reg_rdata_next[3] = host_00_cfg_drv2_qs;
        reg_rdata_next[4] = host_00_cfg_pde_qs;
        reg_rdata_next[5] = host_00_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = host_00_cfg_pudis_qs;
        reg_rdata_next[7] = host_00_cfg_rxdis_qs;
        reg_rdata_next[8] = host_00_cfg_slw_pgm_qs;
        reg_rdata_next[9] = host_00_cfg_trie_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = host_00_mux_sel_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = host_01_cfg_chip2pad_qs;
        reg_rdata_next[1] = host_01_cfg_drv0_qs;
        reg_rdata_next[2] = host_01_cfg_drv1_qs;
        reg_rdata_next[3] = host_01_cfg_drv2_qs;
        reg_rdata_next[4] = host_01_cfg_pde_qs;
        reg_rdata_next[5] = host_01_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = host_01_cfg_pudis_qs;
        reg_rdata_next[7] = host_01_cfg_rxdis_qs;
        reg_rdata_next[8] = host_01_cfg_slw_pgm_qs;
        reg_rdata_next[9] = host_01_cfg_trie_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = host_01_mux_sel_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = host_02_cfg_chip2pad_qs;
        reg_rdata_next[1] = host_02_cfg_drv0_qs;
        reg_rdata_next[2] = host_02_cfg_drv1_qs;
        reg_rdata_next[3] = host_02_cfg_drv2_qs;
        reg_rdata_next[4] = host_02_cfg_pde_qs;
        reg_rdata_next[5] = host_02_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = host_02_cfg_pudis_qs;
        reg_rdata_next[7] = host_02_cfg_rxdis_qs;
        reg_rdata_next[8] = host_02_cfg_slw_pgm_qs;
        reg_rdata_next[9] = host_02_cfg_trie_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = host_02_mux_sel_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = host_03_cfg_chip2pad_qs;
        reg_rdata_next[1] = host_03_cfg_drv0_qs;
        reg_rdata_next[2] = host_03_cfg_drv1_qs;
        reg_rdata_next[3] = host_03_cfg_drv2_qs;
        reg_rdata_next[4] = host_03_cfg_pde_qs;
        reg_rdata_next[5] = host_03_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = host_03_cfg_pudis_qs;
        reg_rdata_next[7] = host_03_cfg_rxdis_qs;
        reg_rdata_next[8] = host_03_cfg_slw_pgm_qs;
        reg_rdata_next[9] = host_03_cfg_trie_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = host_03_mux_sel_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = host_04_cfg_chip2pad_qs;
        reg_rdata_next[1] = host_04_cfg_drv0_qs;
        reg_rdata_next[2] = host_04_cfg_drv1_qs;
        reg_rdata_next[3] = host_04_cfg_drv2_qs;
        reg_rdata_next[4] = host_04_cfg_pde_qs;
        reg_rdata_next[5] = host_04_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = host_04_cfg_pudis_qs;
        reg_rdata_next[7] = host_04_cfg_rxdis_qs;
        reg_rdata_next[8] = host_04_cfg_slw_pgm_qs;
        reg_rdata_next[9] = host_04_cfg_trie_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = host_04_mux_sel_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = host_05_cfg_chip2pad_qs;
        reg_rdata_next[1] = host_05_cfg_drv0_qs;
        reg_rdata_next[2] = host_05_cfg_drv1_qs;
        reg_rdata_next[3] = host_05_cfg_drv2_qs;
        reg_rdata_next[4] = host_05_cfg_pde_qs;
        reg_rdata_next[5] = host_05_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = host_05_cfg_pudis_qs;
        reg_rdata_next[7] = host_05_cfg_rxdis_qs;
        reg_rdata_next[8] = host_05_cfg_slw_pgm_qs;
        reg_rdata_next[9] = host_05_cfg_trie_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = host_05_mux_sel_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = host_06_cfg_chip2pad_qs;
        reg_rdata_next[1] = host_06_cfg_drv0_qs;
        reg_rdata_next[2] = host_06_cfg_drv1_qs;
        reg_rdata_next[3] = host_06_cfg_drv2_qs;
        reg_rdata_next[4] = host_06_cfg_pde_qs;
        reg_rdata_next[5] = host_06_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = host_06_cfg_pudis_qs;
        reg_rdata_next[7] = host_06_cfg_rxdis_qs;
        reg_rdata_next[8] = host_06_cfg_slw_pgm_qs;
        reg_rdata_next[9] = host_06_cfg_trie_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = host_06_mux_sel_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = host_07_cfg_chip2pad_qs;
        reg_rdata_next[1] = host_07_cfg_drv0_qs;
        reg_rdata_next[2] = host_07_cfg_drv1_qs;
        reg_rdata_next[3] = host_07_cfg_drv2_qs;
        reg_rdata_next[4] = host_07_cfg_pde_qs;
        reg_rdata_next[5] = host_07_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = host_07_cfg_pudis_qs;
        reg_rdata_next[7] = host_07_cfg_rxdis_qs;
        reg_rdata_next[8] = host_07_cfg_slw_pgm_qs;
        reg_rdata_next[9] = host_07_cfg_trie_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = host_07_mux_sel_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = host_08_cfg_chip2pad_qs;
        reg_rdata_next[1] = host_08_cfg_drv0_qs;
        reg_rdata_next[2] = host_08_cfg_drv1_qs;
        reg_rdata_next[3] = host_08_cfg_drv2_qs;
        reg_rdata_next[4] = host_08_cfg_pde_qs;
        reg_rdata_next[5] = host_08_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = host_08_cfg_pudis_qs;
        reg_rdata_next[7] = host_08_cfg_rxdis_qs;
        reg_rdata_next[8] = host_08_cfg_slw_pgm_qs;
        reg_rdata_next[9] = host_08_cfg_trie_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = host_08_mux_sel_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = host_09_cfg_chip2pad_qs;
        reg_rdata_next[1] = host_09_cfg_drv0_qs;
        reg_rdata_next[2] = host_09_cfg_drv1_qs;
        reg_rdata_next[3] = host_09_cfg_drv2_qs;
        reg_rdata_next[4] = host_09_cfg_pde_qs;
        reg_rdata_next[5] = host_09_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = host_09_cfg_pudis_qs;
        reg_rdata_next[7] = host_09_cfg_rxdis_qs;
        reg_rdata_next[8] = host_09_cfg_slw_pgm_qs;
        reg_rdata_next[9] = host_09_cfg_trie_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = host_09_mux_sel_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = host_10_cfg_chip2pad_qs;
        reg_rdata_next[1] = host_10_cfg_drv0_qs;
        reg_rdata_next[2] = host_10_cfg_drv1_qs;
        reg_rdata_next[3] = host_10_cfg_drv2_qs;
        reg_rdata_next[4] = host_10_cfg_pde_qs;
        reg_rdata_next[5] = host_10_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = host_10_cfg_pudis_qs;
        reg_rdata_next[7] = host_10_cfg_rxdis_qs;
        reg_rdata_next[8] = host_10_cfg_slw_pgm_qs;
        reg_rdata_next[9] = host_10_cfg_trie_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = host_10_mux_sel_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = secure_00_cfg_chip2pad_qs;
        reg_rdata_next[1] = secure_00_cfg_drv0_qs;
        reg_rdata_next[2] = secure_00_cfg_drv1_qs;
        reg_rdata_next[3] = secure_00_cfg_drv2_qs;
        reg_rdata_next[4] = secure_00_cfg_pde_qs;
        reg_rdata_next[5] = secure_00_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = secure_00_cfg_pudis_qs;
        reg_rdata_next[7] = secure_00_cfg_rxdis_qs;
        reg_rdata_next[8] = secure_00_cfg_slw_pgm_qs;
        reg_rdata_next[9] = secure_00_cfg_trie_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = secure_00_mux_sel_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = secure_01_cfg_chip2pad_qs;
        reg_rdata_next[1] = secure_01_cfg_drv0_qs;
        reg_rdata_next[2] = secure_01_cfg_drv1_qs;
        reg_rdata_next[3] = secure_01_cfg_drv2_qs;
        reg_rdata_next[4] = secure_01_cfg_pde_qs;
        reg_rdata_next[5] = secure_01_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = secure_01_cfg_pudis_qs;
        reg_rdata_next[7] = secure_01_cfg_rxdis_qs;
        reg_rdata_next[8] = secure_01_cfg_slw_pgm_qs;
        reg_rdata_next[9] = secure_01_cfg_trie_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = secure_01_mux_sel_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = secure_02_cfg_chip2pad_qs;
        reg_rdata_next[1] = secure_02_cfg_drv0_qs;
        reg_rdata_next[2] = secure_02_cfg_drv1_qs;
        reg_rdata_next[3] = secure_02_cfg_drv2_qs;
        reg_rdata_next[4] = secure_02_cfg_pde_qs;
        reg_rdata_next[5] = secure_02_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = secure_02_cfg_pudis_qs;
        reg_rdata_next[7] = secure_02_cfg_rxdis_qs;
        reg_rdata_next[8] = secure_02_cfg_slw_pgm_qs;
        reg_rdata_next[9] = secure_02_cfg_trie_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = secure_02_mux_sel_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = secure_03_cfg_chip2pad_qs;
        reg_rdata_next[1] = secure_03_cfg_drv0_qs;
        reg_rdata_next[2] = secure_03_cfg_drv1_qs;
        reg_rdata_next[3] = secure_03_cfg_drv2_qs;
        reg_rdata_next[4] = secure_03_cfg_pde_qs;
        reg_rdata_next[5] = secure_03_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = secure_03_cfg_pudis_qs;
        reg_rdata_next[7] = secure_03_cfg_rxdis_qs;
        reg_rdata_next[8] = secure_03_cfg_slw_pgm_qs;
        reg_rdata_next[9] = secure_03_cfg_trie_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = secure_03_mux_sel_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = secure_04_cfg_chip2pad_qs;
        reg_rdata_next[1] = secure_04_cfg_drv0_qs;
        reg_rdata_next[2] = secure_04_cfg_drv1_qs;
        reg_rdata_next[3] = secure_04_cfg_drv2_qs;
        reg_rdata_next[4] = secure_04_cfg_pde_qs;
        reg_rdata_next[5] = secure_04_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = secure_04_cfg_pudis_qs;
        reg_rdata_next[7] = secure_04_cfg_rxdis_qs;
        reg_rdata_next[8] = secure_04_cfg_slw_pgm_qs;
        reg_rdata_next[9] = secure_04_cfg_trie_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0] = secure_04_mux_sel_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[0] = secure_05_cfg_chip2pad_qs;
        reg_rdata_next[1] = secure_05_cfg_drv0_qs;
        reg_rdata_next[2] = secure_05_cfg_drv1_qs;
        reg_rdata_next[3] = secure_05_cfg_drv2_qs;
        reg_rdata_next[4] = secure_05_cfg_pde_qs;
        reg_rdata_next[5] = secure_05_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = secure_05_cfg_pudis_qs;
        reg_rdata_next[7] = secure_05_cfg_rxdis_qs;
        reg_rdata_next[8] = secure_05_cfg_slw_pgm_qs;
        reg_rdata_next[9] = secure_05_cfg_trie_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[0] = secure_05_mux_sel_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[0] = secure_06_cfg_chip2pad_qs;
        reg_rdata_next[1] = secure_06_cfg_drv0_qs;
        reg_rdata_next[2] = secure_06_cfg_drv1_qs;
        reg_rdata_next[3] = secure_06_cfg_drv2_qs;
        reg_rdata_next[4] = secure_06_cfg_pde_qs;
        reg_rdata_next[5] = secure_06_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = secure_06_cfg_pudis_qs;
        reg_rdata_next[7] = secure_06_cfg_rxdis_qs;
        reg_rdata_next[8] = secure_06_cfg_slw_pgm_qs;
        reg_rdata_next[9] = secure_06_cfg_trie_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[0] = secure_06_mux_sel_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[0] = secure_07_cfg_chip2pad_qs;
        reg_rdata_next[1] = secure_07_cfg_drv0_qs;
        reg_rdata_next[2] = secure_07_cfg_drv1_qs;
        reg_rdata_next[3] = secure_07_cfg_drv2_qs;
        reg_rdata_next[4] = secure_07_cfg_pde_qs;
        reg_rdata_next[5] = secure_07_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = secure_07_cfg_pudis_qs;
        reg_rdata_next[7] = secure_07_cfg_rxdis_qs;
        reg_rdata_next[8] = secure_07_cfg_slw_pgm_qs;
        reg_rdata_next[9] = secure_07_cfg_trie_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = secure_07_mux_sel_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[0] = gpio_00_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_00_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_00_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_00_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_00_cfg_pde_qs;
        reg_rdata_next[5] = gpio_00_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_00_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_00_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_00_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_00_cfg_trie_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[0] = gpio_00_mux_sel_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[0] = gpio_01_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_01_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_01_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_01_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_01_cfg_pde_qs;
        reg_rdata_next[5] = gpio_01_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_01_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_01_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_01_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_01_cfg_trie_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[0] = gpio_01_mux_sel_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[0] = gpio_02_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_02_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_02_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_02_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_02_cfg_pde_qs;
        reg_rdata_next[5] = gpio_02_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_02_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_02_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_02_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_02_cfg_trie_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[0] = gpio_02_mux_sel_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[0] = gpio_03_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_03_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_03_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_03_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_03_cfg_pde_qs;
        reg_rdata_next[5] = gpio_03_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_03_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_03_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_03_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_03_cfg_trie_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[0] = gpio_03_mux_sel_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[0] = gpio_04_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_04_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_04_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_04_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_04_cfg_pde_qs;
        reg_rdata_next[5] = gpio_04_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_04_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_04_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_04_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_04_cfg_trie_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[0] = gpio_04_mux_sel_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[0] = gpio_05_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_05_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_05_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_05_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_05_cfg_pde_qs;
        reg_rdata_next[5] = gpio_05_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_05_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_05_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_05_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_05_cfg_trie_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[0] = gpio_05_mux_sel_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[0] = gpio_06_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_06_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_06_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_06_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_06_cfg_pde_qs;
        reg_rdata_next[5] = gpio_06_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_06_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_06_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_06_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_06_cfg_trie_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[0] = gpio_06_mux_sel_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[0] = gpio_07_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_07_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_07_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_07_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_07_cfg_pde_qs;
        reg_rdata_next[5] = gpio_07_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_07_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_07_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_07_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_07_cfg_trie_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[0] = gpio_07_mux_sel_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[0] = gpio_08_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_08_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_08_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_08_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_08_cfg_pde_qs;
        reg_rdata_next[5] = gpio_08_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_08_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_08_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_08_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_08_cfg_trie_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = gpio_08_mux_sel_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[0] = gpio_09_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_09_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_09_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_09_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_09_cfg_pde_qs;
        reg_rdata_next[5] = gpio_09_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_09_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_09_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_09_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_09_cfg_trie_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[0] = gpio_09_mux_sel_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[0] = gpio_10_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_10_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_10_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_10_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_10_cfg_pde_qs;
        reg_rdata_next[5] = gpio_10_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_10_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_10_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_10_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_10_cfg_trie_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[0] = gpio_10_mux_sel_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[0] = gpio_11_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_11_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_11_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_11_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_11_cfg_pde_qs;
        reg_rdata_next[5] = gpio_11_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_11_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_11_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_11_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_11_cfg_trie_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[0] = gpio_11_mux_sel_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[0] = gpio_12_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_12_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_12_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_12_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_12_cfg_pde_qs;
        reg_rdata_next[5] = gpio_12_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_12_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_12_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_12_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_12_cfg_trie_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[0] = gpio_12_mux_sel_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[0] = gpio_13_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_13_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_13_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_13_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_13_cfg_pde_qs;
        reg_rdata_next[5] = gpio_13_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_13_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_13_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_13_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_13_cfg_trie_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[0] = gpio_13_mux_sel_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[0] = gpio_14_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_14_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_14_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_14_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_14_cfg_pde_qs;
        reg_rdata_next[5] = gpio_14_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_14_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_14_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_14_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_14_cfg_trie_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[0] = gpio_14_mux_sel_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[0] = gpio_15_cfg_chip2pad_qs;
        reg_rdata_next[1] = gpio_15_cfg_drv0_qs;
        reg_rdata_next[2] = gpio_15_cfg_drv1_qs;
        reg_rdata_next[3] = gpio_15_cfg_drv2_qs;
        reg_rdata_next[4] = gpio_15_cfg_pde_qs;
        reg_rdata_next[5] = gpio_15_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = gpio_15_cfg_pudis_qs;
        reg_rdata_next[7] = gpio_15_cfg_rxdis_qs;
        reg_rdata_next[8] = gpio_15_cfg_slw_pgm_qs;
        reg_rdata_next[9] = gpio_15_cfg_trie_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[0] = gpio_15_mux_sel_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[0] = periph_00_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_00_cfg_drv0_qs;
        reg_rdata_next[2] = periph_00_cfg_drv1_qs;
        reg_rdata_next[3] = periph_00_cfg_drv2_qs;
        reg_rdata_next[4] = periph_00_cfg_pde_qs;
        reg_rdata_next[5] = periph_00_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_00_cfg_pudis_qs;
        reg_rdata_next[7] = periph_00_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_00_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_00_cfg_trie_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[0] = periph_00_mux_sel_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[0] = periph_01_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_01_cfg_drv0_qs;
        reg_rdata_next[2] = periph_01_cfg_drv1_qs;
        reg_rdata_next[3] = periph_01_cfg_drv2_qs;
        reg_rdata_next[4] = periph_01_cfg_pde_qs;
        reg_rdata_next[5] = periph_01_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_01_cfg_pudis_qs;
        reg_rdata_next[7] = periph_01_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_01_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_01_cfg_trie_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[0] = periph_01_mux_sel_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[0] = periph_02_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_02_cfg_drv0_qs;
        reg_rdata_next[2] = periph_02_cfg_drv1_qs;
        reg_rdata_next[3] = periph_02_cfg_drv2_qs;
        reg_rdata_next[4] = periph_02_cfg_pde_qs;
        reg_rdata_next[5] = periph_02_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_02_cfg_pudis_qs;
        reg_rdata_next[7] = periph_02_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_02_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_02_cfg_trie_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[0] = periph_02_mux_sel_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[0] = periph_03_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_03_cfg_drv0_qs;
        reg_rdata_next[2] = periph_03_cfg_drv1_qs;
        reg_rdata_next[3] = periph_03_cfg_drv2_qs;
        reg_rdata_next[4] = periph_03_cfg_pde_qs;
        reg_rdata_next[5] = periph_03_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_03_cfg_pudis_qs;
        reg_rdata_next[7] = periph_03_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_03_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_03_cfg_trie_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[0] = periph_03_mux_sel_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[0] = periph_04_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_04_cfg_drv0_qs;
        reg_rdata_next[2] = periph_04_cfg_drv1_qs;
        reg_rdata_next[3] = periph_04_cfg_drv2_qs;
        reg_rdata_next[4] = periph_04_cfg_pde_qs;
        reg_rdata_next[5] = periph_04_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_04_cfg_pudis_qs;
        reg_rdata_next[7] = periph_04_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_04_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_04_cfg_trie_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[0] = periph_04_mux_sel_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[0] = periph_05_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_05_cfg_drv0_qs;
        reg_rdata_next[2] = periph_05_cfg_drv1_qs;
        reg_rdata_next[3] = periph_05_cfg_drv2_qs;
        reg_rdata_next[4] = periph_05_cfg_pde_qs;
        reg_rdata_next[5] = periph_05_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_05_cfg_pudis_qs;
        reg_rdata_next[7] = periph_05_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_05_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_05_cfg_trie_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[0] = periph_05_mux_sel_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[0] = periph_06_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_06_cfg_drv0_qs;
        reg_rdata_next[2] = periph_06_cfg_drv1_qs;
        reg_rdata_next[3] = periph_06_cfg_drv2_qs;
        reg_rdata_next[4] = periph_06_cfg_pde_qs;
        reg_rdata_next[5] = periph_06_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_06_cfg_pudis_qs;
        reg_rdata_next[7] = periph_06_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_06_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_06_cfg_trie_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[0] = periph_06_mux_sel_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[0] = periph_07_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_07_cfg_drv0_qs;
        reg_rdata_next[2] = periph_07_cfg_drv1_qs;
        reg_rdata_next[3] = periph_07_cfg_drv2_qs;
        reg_rdata_next[4] = periph_07_cfg_pde_qs;
        reg_rdata_next[5] = periph_07_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_07_cfg_pudis_qs;
        reg_rdata_next[7] = periph_07_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_07_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_07_cfg_trie_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[0] = periph_07_mux_sel_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[0] = periph_08_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_08_cfg_drv0_qs;
        reg_rdata_next[2] = periph_08_cfg_drv1_qs;
        reg_rdata_next[3] = periph_08_cfg_drv2_qs;
        reg_rdata_next[4] = periph_08_cfg_pde_qs;
        reg_rdata_next[5] = periph_08_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_08_cfg_pudis_qs;
        reg_rdata_next[7] = periph_08_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_08_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_08_cfg_trie_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[0] = periph_08_mux_sel_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[0] = periph_09_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_09_cfg_drv0_qs;
        reg_rdata_next[2] = periph_09_cfg_drv1_qs;
        reg_rdata_next[3] = periph_09_cfg_drv2_qs;
        reg_rdata_next[4] = periph_09_cfg_pde_qs;
        reg_rdata_next[5] = periph_09_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_09_cfg_pudis_qs;
        reg_rdata_next[7] = periph_09_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_09_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_09_cfg_trie_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[0] = periph_09_mux_sel_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[0] = periph_10_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_10_cfg_drv0_qs;
        reg_rdata_next[2] = periph_10_cfg_drv1_qs;
        reg_rdata_next[3] = periph_10_cfg_drv2_qs;
        reg_rdata_next[4] = periph_10_cfg_pde_qs;
        reg_rdata_next[5] = periph_10_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_10_cfg_pudis_qs;
        reg_rdata_next[7] = periph_10_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_10_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_10_cfg_trie_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[0] = periph_10_mux_sel_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[0] = periph_11_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_11_cfg_drv0_qs;
        reg_rdata_next[2] = periph_11_cfg_drv1_qs;
        reg_rdata_next[3] = periph_11_cfg_drv2_qs;
        reg_rdata_next[4] = periph_11_cfg_pde_qs;
        reg_rdata_next[5] = periph_11_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_11_cfg_pudis_qs;
        reg_rdata_next[7] = periph_11_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_11_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_11_cfg_trie_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[0] = periph_11_mux_sel_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[0] = periph_12_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_12_cfg_drv0_qs;
        reg_rdata_next[2] = periph_12_cfg_drv1_qs;
        reg_rdata_next[3] = periph_12_cfg_drv2_qs;
        reg_rdata_next[4] = periph_12_cfg_pde_qs;
        reg_rdata_next[5] = periph_12_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_12_cfg_pudis_qs;
        reg_rdata_next[7] = periph_12_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_12_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_12_cfg_trie_qs;
      end

      addr_hit[96]: begin
        reg_rdata_next[0] = periph_12_mux_sel_qs;
      end

      addr_hit[97]: begin
        reg_rdata_next[0] = periph_13_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_13_cfg_drv0_qs;
        reg_rdata_next[2] = periph_13_cfg_drv1_qs;
        reg_rdata_next[3] = periph_13_cfg_drv2_qs;
        reg_rdata_next[4] = periph_13_cfg_pde_qs;
        reg_rdata_next[5] = periph_13_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_13_cfg_pudis_qs;
        reg_rdata_next[7] = periph_13_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_13_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_13_cfg_trie_qs;
      end

      addr_hit[98]: begin
        reg_rdata_next[0] = periph_13_mux_sel_qs;
      end

      addr_hit[99]: begin
        reg_rdata_next[0] = periph_14_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_14_cfg_drv0_qs;
        reg_rdata_next[2] = periph_14_cfg_drv1_qs;
        reg_rdata_next[3] = periph_14_cfg_drv2_qs;
        reg_rdata_next[4] = periph_14_cfg_pde_qs;
        reg_rdata_next[5] = periph_14_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_14_cfg_pudis_qs;
        reg_rdata_next[7] = periph_14_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_14_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_14_cfg_trie_qs;
      end

      addr_hit[100]: begin
        reg_rdata_next[0] = periph_14_mux_sel_qs;
      end

      addr_hit[101]: begin
        reg_rdata_next[0] = periph_15_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_15_cfg_drv0_qs;
        reg_rdata_next[2] = periph_15_cfg_drv1_qs;
        reg_rdata_next[3] = periph_15_cfg_drv2_qs;
        reg_rdata_next[4] = periph_15_cfg_pde_qs;
        reg_rdata_next[5] = periph_15_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_15_cfg_pudis_qs;
        reg_rdata_next[7] = periph_15_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_15_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_15_cfg_trie_qs;
      end

      addr_hit[102]: begin
        reg_rdata_next[0] = periph_15_mux_sel_qs;
      end

      addr_hit[103]: begin
        reg_rdata_next[0] = periph_16_cfg_chip2pad_qs;
        reg_rdata_next[1] = periph_16_cfg_drv0_qs;
        reg_rdata_next[2] = periph_16_cfg_drv1_qs;
        reg_rdata_next[3] = periph_16_cfg_drv2_qs;
        reg_rdata_next[4] = periph_16_cfg_pde_qs;
        reg_rdata_next[5] = periph_16_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = periph_16_cfg_pudis_qs;
        reg_rdata_next[7] = periph_16_cfg_rxdis_qs;
        reg_rdata_next[8] = periph_16_cfg_slw_pgm_qs;
        reg_rdata_next[9] = periph_16_cfg_trie_qs;
      end

      addr_hit[104]: begin
        reg_rdata_next[0] = periph_16_mux_sel_qs;
      end

      addr_hit[105]: begin
        reg_rdata_next[0] = debug_out0_cfg_chip2pad_qs;
        reg_rdata_next[1] = debug_out0_cfg_drv0_qs;
        reg_rdata_next[2] = debug_out0_cfg_drv1_qs;
        reg_rdata_next[3] = debug_out0_cfg_drv2_qs;
        reg_rdata_next[4] = debug_out0_cfg_pde_qs;
        reg_rdata_next[5] = debug_out0_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = debug_out0_cfg_pudis_qs;
        reg_rdata_next[7] = debug_out0_cfg_rxdis_qs;
        reg_rdata_next[8] = debug_out0_cfg_slw_pgm_qs;
        reg_rdata_next[9] = debug_out0_cfg_trie_qs;
      end

      addr_hit[106]: begin
        reg_rdata_next[4:0] = debug_out0_mux_sel_qs;
      end

      addr_hit[107]: begin
        reg_rdata_next[0] = debug_out1_cfg_chip2pad_qs;
        reg_rdata_next[1] = debug_out1_cfg_drv0_qs;
        reg_rdata_next[2] = debug_out1_cfg_drv1_qs;
        reg_rdata_next[3] = debug_out1_cfg_drv2_qs;
        reg_rdata_next[4] = debug_out1_cfg_pde_qs;
        reg_rdata_next[5] = debug_out1_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = debug_out1_cfg_pudis_qs;
        reg_rdata_next[7] = debug_out1_cfg_rxdis_qs;
        reg_rdata_next[8] = debug_out1_cfg_slw_pgm_qs;
        reg_rdata_next[9] = debug_out1_cfg_trie_qs;
      end

      addr_hit[108]: begin
        reg_rdata_next[4:0] = debug_out1_mux_sel_qs;
      end

      addr_hit[109]: begin
        reg_rdata_next[0] = debug_out2_cfg_chip2pad_qs;
        reg_rdata_next[1] = debug_out2_cfg_drv0_qs;
        reg_rdata_next[2] = debug_out2_cfg_drv1_qs;
        reg_rdata_next[3] = debug_out2_cfg_drv2_qs;
        reg_rdata_next[4] = debug_out2_cfg_pde_qs;
        reg_rdata_next[5] = debug_out2_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = debug_out2_cfg_pudis_qs;
        reg_rdata_next[7] = debug_out2_cfg_rxdis_qs;
        reg_rdata_next[8] = debug_out2_cfg_slw_pgm_qs;
        reg_rdata_next[9] = debug_out2_cfg_trie_qs;
      end

      addr_hit[110]: begin
        reg_rdata_next[4:0] = debug_out2_mux_sel_qs;
      end

      addr_hit[111]: begin
        reg_rdata_next[0] = debug_out3_cfg_chip2pad_qs;
        reg_rdata_next[1] = debug_out3_cfg_drv0_qs;
        reg_rdata_next[2] = debug_out3_cfg_drv1_qs;
        reg_rdata_next[3] = debug_out3_cfg_drv2_qs;
        reg_rdata_next[4] = debug_out3_cfg_pde_qs;
        reg_rdata_next[5] = debug_out3_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = debug_out3_cfg_pudis_qs;
        reg_rdata_next[7] = debug_out3_cfg_rxdis_qs;
        reg_rdata_next[8] = debug_out3_cfg_slw_pgm_qs;
        reg_rdata_next[9] = debug_out3_cfg_trie_qs;
      end

      addr_hit[112]: begin
        reg_rdata_next[4:0] = debug_out3_mux_sel_qs;
      end

      addr_hit[113]: begin
        reg_rdata_next[0] = debug_out4_cfg_chip2pad_qs;
        reg_rdata_next[1] = debug_out4_cfg_drv0_qs;
        reg_rdata_next[2] = debug_out4_cfg_drv1_qs;
        reg_rdata_next[3] = debug_out4_cfg_drv2_qs;
        reg_rdata_next[4] = debug_out4_cfg_pde_qs;
        reg_rdata_next[5] = debug_out4_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = debug_out4_cfg_pudis_qs;
        reg_rdata_next[7] = debug_out4_cfg_rxdis_qs;
        reg_rdata_next[8] = debug_out4_cfg_slw_pgm_qs;
        reg_rdata_next[9] = debug_out4_cfg_trie_qs;
      end

      addr_hit[114]: begin
        reg_rdata_next[4:0] = debug_out4_mux_sel_qs;
      end

      addr_hit[115]: begin
        reg_rdata_next[0] = jtag_pll_00_cfg_chip2pad_qs;
        reg_rdata_next[1] = jtag_pll_00_cfg_drv0_qs;
        reg_rdata_next[2] = jtag_pll_00_cfg_drv1_qs;
        reg_rdata_next[3] = jtag_pll_00_cfg_drv2_qs;
        reg_rdata_next[4] = jtag_pll_00_cfg_pde_qs;
        reg_rdata_next[5] = jtag_pll_00_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = jtag_pll_00_cfg_pudis_qs;
        reg_rdata_next[7] = jtag_pll_00_cfg_rxdis_qs;
        reg_rdata_next[8] = jtag_pll_00_cfg_slw_pgm_qs;
        reg_rdata_next[9] = jtag_pll_00_cfg_trie_qs;
      end

      addr_hit[116]: begin
        reg_rdata_next[1:0] = jtag_pll_00_mux_sel_qs;
      end

      addr_hit[117]: begin
        reg_rdata_next[0] = jtag_pll_01_cfg_chip2pad_qs;
        reg_rdata_next[1] = jtag_pll_01_cfg_drv0_qs;
        reg_rdata_next[2] = jtag_pll_01_cfg_drv1_qs;
        reg_rdata_next[3] = jtag_pll_01_cfg_drv2_qs;
        reg_rdata_next[4] = jtag_pll_01_cfg_pde_qs;
        reg_rdata_next[5] = jtag_pll_01_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = jtag_pll_01_cfg_pudis_qs;
        reg_rdata_next[7] = jtag_pll_01_cfg_rxdis_qs;
        reg_rdata_next[8] = jtag_pll_01_cfg_slw_pgm_qs;
        reg_rdata_next[9] = jtag_pll_01_cfg_trie_qs;
      end

      addr_hit[118]: begin
        reg_rdata_next[1:0] = jtag_pll_01_mux_sel_qs;
      end

      addr_hit[119]: begin
        reg_rdata_next[0] = jtag_pll_02_cfg_chip2pad_qs;
        reg_rdata_next[1] = jtag_pll_02_cfg_drv0_qs;
        reg_rdata_next[2] = jtag_pll_02_cfg_drv1_qs;
        reg_rdata_next[3] = jtag_pll_02_cfg_drv2_qs;
        reg_rdata_next[4] = jtag_pll_02_cfg_pde_qs;
        reg_rdata_next[5] = jtag_pll_02_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = jtag_pll_02_cfg_pudis_qs;
        reg_rdata_next[7] = jtag_pll_02_cfg_rxdis_qs;
        reg_rdata_next[8] = jtag_pll_02_cfg_slw_pgm_qs;
        reg_rdata_next[9] = jtag_pll_02_cfg_trie_qs;
      end

      addr_hit[120]: begin
        reg_rdata_next[1:0] = jtag_pll_02_mux_sel_qs;
      end

      addr_hit[121]: begin
        reg_rdata_next[0] = jtag_pll_03_cfg_chip2pad_qs;
        reg_rdata_next[1] = jtag_pll_03_cfg_drv0_qs;
        reg_rdata_next[2] = jtag_pll_03_cfg_drv1_qs;
        reg_rdata_next[3] = jtag_pll_03_cfg_drv2_qs;
        reg_rdata_next[4] = jtag_pll_03_cfg_pde_qs;
        reg_rdata_next[5] = jtag_pll_03_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = jtag_pll_03_cfg_pudis_qs;
        reg_rdata_next[7] = jtag_pll_03_cfg_rxdis_qs;
        reg_rdata_next[8] = jtag_pll_03_cfg_slw_pgm_qs;
        reg_rdata_next[9] = jtag_pll_03_cfg_trie_qs;
      end

      addr_hit[122]: begin
        reg_rdata_next[1:0] = jtag_pll_03_mux_sel_qs;
      end

      addr_hit[123]: begin
        reg_rdata_next[0] = jtag_pll_04_cfg_chip2pad_qs;
        reg_rdata_next[1] = jtag_pll_04_cfg_drv0_qs;
        reg_rdata_next[2] = jtag_pll_04_cfg_drv1_qs;
        reg_rdata_next[3] = jtag_pll_04_cfg_drv2_qs;
        reg_rdata_next[4] = jtag_pll_04_cfg_pde_qs;
        reg_rdata_next[5] = jtag_pll_04_cfg_pp_odrain_selector_qs;
        reg_rdata_next[6] = jtag_pll_04_cfg_pudis_qs;
        reg_rdata_next[7] = jtag_pll_04_cfg_rxdis_qs;
        reg_rdata_next[8] = jtag_pll_04_cfg_slw_pgm_qs;
        reg_rdata_next[9] = jtag_pll_04_cfg_trie_qs;
      end

      addr_hit[124]: begin
        reg_rdata_next[1:0] = jtag_pll_04_mux_sel_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
