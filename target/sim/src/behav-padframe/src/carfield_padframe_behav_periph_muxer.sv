
// File auto-generated by Padrick unknown
module carfield_padframe_behav_periph_muxer
  import pkg_internal_carfield_padframe_behav_periph::*;
  import pkg_carfield_padframe_behav::*;
  import carfield_padframe_behav_periph_config_reg_pkg::*;
#(
  parameter type              req_t  = logic, // reg_interface request type
  parameter type             resp_t  = logic // reg_interface response type
) (
  input logic clk_i,
  input logic rst_ni,
  input pad_domain_periph_ports_soc2pad_t port_signals_soc2pad_i,
  output pad_domain_periph_ports_pad2soc_t port_signals_pad2soc_o,
  output mux_to_pads_t mux_to_pads_o,
  input pads_to_mux_t pads_to_mux_i,
  // Configuration interface using register_interface protocol
  input req_t config_req_i,
  output resp_t config_rsp_o
);
   // Connections between register file and pads
     carfield_padframe_behav_periph_config_reg2hw_t s_reg2hw;

  // Register File Instantiation
  carfield_padframe_behav_periph_config_reg_top #(
    .reg_req_t(req_t),
    .reg_rsp_t(resp_t)
    ) i_regfile (
    .clk_i,
    .rst_ni,
    .reg2hw(s_reg2hw),
    .reg_req_i(config_req_i),
    .reg_rsp_o(config_rsp_o),
    .devmode_i(1'b1)
  );


   // SoC -> Pad Multiplex Logic
   // Pad host_00
   always_comb begin
     unique case (s_reg2hw.host_00_mux_sel.q)
       PAD_MUX_GROUP_HOST_00_SEL_DEFAULT: begin
         mux_to_pads_o.host_00.chip2pad = s_reg2hw.host_00_cfg.chip2pad.q;
         mux_to_pads_o.host_00.drv0 = s_reg2hw.host_00_cfg.drv0.q;
         mux_to_pads_o.host_00.drv1 = s_reg2hw.host_00_cfg.drv1.q;
         mux_to_pads_o.host_00.drv2 = s_reg2hw.host_00_cfg.drv2.q;
         mux_to_pads_o.host_00.pde = s_reg2hw.host_00_cfg.pde.q;
         mux_to_pads_o.host_00.pp_odrain_selector = s_reg2hw.host_00_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_00.pudis = s_reg2hw.host_00_cfg.pudis.q;
         mux_to_pads_o.host_00.rxdis = s_reg2hw.host_00_cfg.rxdis.q;
         mux_to_pads_o.host_00.slw_pgm = s_reg2hw.host_00_cfg.slw_pgm.q;
         mux_to_pads_o.host_00.trie = s_reg2hw.host_00_cfg.trie.q;
       end
       PAD_MUX_GROUP_HOST_00_SEL_UART0_HOST_RX: begin
          mux_to_pads_o.host_00.chip2pad = 1'b1;
          mux_to_pads_o.host_00.drv0 = s_reg2hw.host_00_cfg.drv0.q;
          mux_to_pads_o.host_00.drv1 = s_reg2hw.host_00_cfg.drv1.q;
          mux_to_pads_o.host_00.drv2 = s_reg2hw.host_00_cfg.drv2.q;
          mux_to_pads_o.host_00.pde = s_reg2hw.host_00_cfg.pde.q;
          mux_to_pads_o.host_00.pp_odrain_selector = s_reg2hw.host_00_cfg.pp_odrain_selector.q;
          mux_to_pads_o.host_00.pudis = s_reg2hw.host_00_cfg.pudis.q;
          mux_to_pads_o.host_00.rxdis = 1'b0;
          mux_to_pads_o.host_00.slw_pgm = s_reg2hw.host_00_cfg.slw_pgm.q;
          mux_to_pads_o.host_00.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.host_00.chip2pad = s_reg2hw.host_00_cfg.chip2pad.q;
         mux_to_pads_o.host_00.drv0 = s_reg2hw.host_00_cfg.drv0.q;
         mux_to_pads_o.host_00.drv1 = s_reg2hw.host_00_cfg.drv1.q;
         mux_to_pads_o.host_00.drv2 = s_reg2hw.host_00_cfg.drv2.q;
         mux_to_pads_o.host_00.pde = s_reg2hw.host_00_cfg.pde.q;
         mux_to_pads_o.host_00.pp_odrain_selector = s_reg2hw.host_00_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_00.pudis = s_reg2hw.host_00_cfg.pudis.q;
         mux_to_pads_o.host_00.rxdis = s_reg2hw.host_00_cfg.rxdis.q;
         mux_to_pads_o.host_00.slw_pgm = s_reg2hw.host_00_cfg.slw_pgm.q;
         mux_to_pads_o.host_00.trie = s_reg2hw.host_00_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad host_01
   always_comb begin
     unique case (s_reg2hw.host_01_mux_sel.q)
       PAD_MUX_GROUP_HOST_01_SEL_DEFAULT: begin
         mux_to_pads_o.host_01.chip2pad = s_reg2hw.host_01_cfg.chip2pad.q;
         mux_to_pads_o.host_01.drv0 = s_reg2hw.host_01_cfg.drv0.q;
         mux_to_pads_o.host_01.drv1 = s_reg2hw.host_01_cfg.drv1.q;
         mux_to_pads_o.host_01.drv2 = s_reg2hw.host_01_cfg.drv2.q;
         mux_to_pads_o.host_01.pde = s_reg2hw.host_01_cfg.pde.q;
         mux_to_pads_o.host_01.pp_odrain_selector = s_reg2hw.host_01_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_01.pudis = s_reg2hw.host_01_cfg.pudis.q;
         mux_to_pads_o.host_01.rxdis = s_reg2hw.host_01_cfg.rxdis.q;
         mux_to_pads_o.host_01.slw_pgm = s_reg2hw.host_01_cfg.slw_pgm.q;
         mux_to_pads_o.host_01.trie = s_reg2hw.host_01_cfg.trie.q;
       end
       PAD_MUX_GROUP_HOST_01_SEL_UART0_HOST_TX: begin
          mux_to_pads_o.host_01.chip2pad = port_signals_soc2pad_i.uart0_host.tx_o;
          mux_to_pads_o.host_01.drv0 = s_reg2hw.host_01_cfg.drv0.q;
          mux_to_pads_o.host_01.drv1 = s_reg2hw.host_01_cfg.drv1.q;
          mux_to_pads_o.host_01.drv2 = s_reg2hw.host_01_cfg.drv2.q;
          mux_to_pads_o.host_01.pde = s_reg2hw.host_01_cfg.pde.q;
          mux_to_pads_o.host_01.pp_odrain_selector = s_reg2hw.host_01_cfg.pp_odrain_selector.q;
          mux_to_pads_o.host_01.pudis = s_reg2hw.host_01_cfg.pudis.q;
          mux_to_pads_o.host_01.rxdis = 1'b1;
          mux_to_pads_o.host_01.slw_pgm = s_reg2hw.host_01_cfg.slw_pgm.q;
          mux_to_pads_o.host_01.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.host_01.chip2pad = s_reg2hw.host_01_cfg.chip2pad.q;
         mux_to_pads_o.host_01.drv0 = s_reg2hw.host_01_cfg.drv0.q;
         mux_to_pads_o.host_01.drv1 = s_reg2hw.host_01_cfg.drv1.q;
         mux_to_pads_o.host_01.drv2 = s_reg2hw.host_01_cfg.drv2.q;
         mux_to_pads_o.host_01.pde = s_reg2hw.host_01_cfg.pde.q;
         mux_to_pads_o.host_01.pp_odrain_selector = s_reg2hw.host_01_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_01.pudis = s_reg2hw.host_01_cfg.pudis.q;
         mux_to_pads_o.host_01.rxdis = s_reg2hw.host_01_cfg.rxdis.q;
         mux_to_pads_o.host_01.slw_pgm = s_reg2hw.host_01_cfg.slw_pgm.q;
         mux_to_pads_o.host_01.trie = s_reg2hw.host_01_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad host_02
   always_comb begin
     unique case (s_reg2hw.host_02_mux_sel.q)
       PAD_MUX_GROUP_HOST_02_SEL_DEFAULT: begin
         mux_to_pads_o.host_02.chip2pad = s_reg2hw.host_02_cfg.chip2pad.q;
         mux_to_pads_o.host_02.drv0 = s_reg2hw.host_02_cfg.drv0.q;
         mux_to_pads_o.host_02.drv1 = s_reg2hw.host_02_cfg.drv1.q;
         mux_to_pads_o.host_02.drv2 = s_reg2hw.host_02_cfg.drv2.q;
         mux_to_pads_o.host_02.pde = s_reg2hw.host_02_cfg.pde.q;
         mux_to_pads_o.host_02.pp_odrain_selector = s_reg2hw.host_02_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_02.pudis = s_reg2hw.host_02_cfg.pudis.q;
         mux_to_pads_o.host_02.rxdis = s_reg2hw.host_02_cfg.rxdis.q;
         mux_to_pads_o.host_02.slw_pgm = s_reg2hw.host_02_cfg.slw_pgm.q;
         mux_to_pads_o.host_02.trie = s_reg2hw.host_02_cfg.trie.q;
       end
       PAD_MUX_GROUP_HOST_02_SEL_QSPI0_HOST_SDIO0: begin
          mux_to_pads_o.host_02.chip2pad = port_signals_soc2pad_i.qspi0_host.sd0_o;
          mux_to_pads_o.host_02.drv0 = s_reg2hw.host_02_cfg.drv0.q;
          mux_to_pads_o.host_02.drv1 = s_reg2hw.host_02_cfg.drv1.q;
          mux_to_pads_o.host_02.drv2 = s_reg2hw.host_02_cfg.drv2.q;
          mux_to_pads_o.host_02.pde = 1'b0;
          mux_to_pads_o.host_02.pp_odrain_selector = s_reg2hw.host_02_cfg.pp_odrain_selector.q;
          mux_to_pads_o.host_02.pudis = 1'b0;
          mux_to_pads_o.host_02.rxdis = port_signals_soc2pad_i.qspi0_host.sd0_oe;
          mux_to_pads_o.host_02.slw_pgm = 1'b1;
          mux_to_pads_o.host_02.trie = ~port_signals_soc2pad_i.qspi0_host.sd0_oe;
       end
       default: begin
         mux_to_pads_o.host_02.chip2pad = s_reg2hw.host_02_cfg.chip2pad.q;
         mux_to_pads_o.host_02.drv0 = s_reg2hw.host_02_cfg.drv0.q;
         mux_to_pads_o.host_02.drv1 = s_reg2hw.host_02_cfg.drv1.q;
         mux_to_pads_o.host_02.drv2 = s_reg2hw.host_02_cfg.drv2.q;
         mux_to_pads_o.host_02.pde = s_reg2hw.host_02_cfg.pde.q;
         mux_to_pads_o.host_02.pp_odrain_selector = s_reg2hw.host_02_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_02.pudis = s_reg2hw.host_02_cfg.pudis.q;
         mux_to_pads_o.host_02.rxdis = s_reg2hw.host_02_cfg.rxdis.q;
         mux_to_pads_o.host_02.slw_pgm = s_reg2hw.host_02_cfg.slw_pgm.q;
         mux_to_pads_o.host_02.trie = s_reg2hw.host_02_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad host_03
   always_comb begin
     unique case (s_reg2hw.host_03_mux_sel.q)
       PAD_MUX_GROUP_HOST_03_SEL_DEFAULT: begin
         mux_to_pads_o.host_03.chip2pad = s_reg2hw.host_03_cfg.chip2pad.q;
         mux_to_pads_o.host_03.drv0 = s_reg2hw.host_03_cfg.drv0.q;
         mux_to_pads_o.host_03.drv1 = s_reg2hw.host_03_cfg.drv1.q;
         mux_to_pads_o.host_03.drv2 = s_reg2hw.host_03_cfg.drv2.q;
         mux_to_pads_o.host_03.pde = s_reg2hw.host_03_cfg.pde.q;
         mux_to_pads_o.host_03.pp_odrain_selector = s_reg2hw.host_03_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_03.pudis = s_reg2hw.host_03_cfg.pudis.q;
         mux_to_pads_o.host_03.rxdis = s_reg2hw.host_03_cfg.rxdis.q;
         mux_to_pads_o.host_03.slw_pgm = s_reg2hw.host_03_cfg.slw_pgm.q;
         mux_to_pads_o.host_03.trie = s_reg2hw.host_03_cfg.trie.q;
       end
       PAD_MUX_GROUP_HOST_03_SEL_QSPI0_HOST_SDIO1: begin
          mux_to_pads_o.host_03.chip2pad = port_signals_soc2pad_i.qspi0_host.sd1_o;
          mux_to_pads_o.host_03.drv0 = s_reg2hw.host_03_cfg.drv0.q;
          mux_to_pads_o.host_03.drv1 = s_reg2hw.host_03_cfg.drv1.q;
          mux_to_pads_o.host_03.drv2 = s_reg2hw.host_03_cfg.drv2.q;
          mux_to_pads_o.host_03.pde = 1'b0;
          mux_to_pads_o.host_03.pp_odrain_selector = s_reg2hw.host_03_cfg.pp_odrain_selector.q;
          mux_to_pads_o.host_03.pudis = 1'b0;
          mux_to_pads_o.host_03.rxdis = port_signals_soc2pad_i.qspi0_host.sd1_oe;
          mux_to_pads_o.host_03.slw_pgm = 1'b1;
          mux_to_pads_o.host_03.trie = ~port_signals_soc2pad_i.qspi0_host.sd1_oe;
       end
       default: begin
         mux_to_pads_o.host_03.chip2pad = s_reg2hw.host_03_cfg.chip2pad.q;
         mux_to_pads_o.host_03.drv0 = s_reg2hw.host_03_cfg.drv0.q;
         mux_to_pads_o.host_03.drv1 = s_reg2hw.host_03_cfg.drv1.q;
         mux_to_pads_o.host_03.drv2 = s_reg2hw.host_03_cfg.drv2.q;
         mux_to_pads_o.host_03.pde = s_reg2hw.host_03_cfg.pde.q;
         mux_to_pads_o.host_03.pp_odrain_selector = s_reg2hw.host_03_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_03.pudis = s_reg2hw.host_03_cfg.pudis.q;
         mux_to_pads_o.host_03.rxdis = s_reg2hw.host_03_cfg.rxdis.q;
         mux_to_pads_o.host_03.slw_pgm = s_reg2hw.host_03_cfg.slw_pgm.q;
         mux_to_pads_o.host_03.trie = s_reg2hw.host_03_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad host_04
   always_comb begin
     unique case (s_reg2hw.host_04_mux_sel.q)
       PAD_MUX_GROUP_HOST_04_SEL_DEFAULT: begin
         mux_to_pads_o.host_04.chip2pad = s_reg2hw.host_04_cfg.chip2pad.q;
         mux_to_pads_o.host_04.drv0 = s_reg2hw.host_04_cfg.drv0.q;
         mux_to_pads_o.host_04.drv1 = s_reg2hw.host_04_cfg.drv1.q;
         mux_to_pads_o.host_04.drv2 = s_reg2hw.host_04_cfg.drv2.q;
         mux_to_pads_o.host_04.pde = s_reg2hw.host_04_cfg.pde.q;
         mux_to_pads_o.host_04.pp_odrain_selector = s_reg2hw.host_04_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_04.pudis = s_reg2hw.host_04_cfg.pudis.q;
         mux_to_pads_o.host_04.rxdis = s_reg2hw.host_04_cfg.rxdis.q;
         mux_to_pads_o.host_04.slw_pgm = s_reg2hw.host_04_cfg.slw_pgm.q;
         mux_to_pads_o.host_04.trie = s_reg2hw.host_04_cfg.trie.q;
       end
       PAD_MUX_GROUP_HOST_04_SEL_QSPI0_HOST_SDIO2: begin
          mux_to_pads_o.host_04.chip2pad = port_signals_soc2pad_i.qspi0_host.sd2_o;
          mux_to_pads_o.host_04.drv0 = s_reg2hw.host_04_cfg.drv0.q;
          mux_to_pads_o.host_04.drv1 = s_reg2hw.host_04_cfg.drv1.q;
          mux_to_pads_o.host_04.drv2 = s_reg2hw.host_04_cfg.drv2.q;
          mux_to_pads_o.host_04.pde = 1'b0;
          mux_to_pads_o.host_04.pp_odrain_selector = s_reg2hw.host_04_cfg.pp_odrain_selector.q;
          mux_to_pads_o.host_04.pudis = 1'b0;
          mux_to_pads_o.host_04.rxdis = port_signals_soc2pad_i.qspi0_host.sd2_oe;
          mux_to_pads_o.host_04.slw_pgm = 1'b1;
          mux_to_pads_o.host_04.trie = ~port_signals_soc2pad_i.qspi0_host.sd2_oe;
       end
       default: begin
         mux_to_pads_o.host_04.chip2pad = s_reg2hw.host_04_cfg.chip2pad.q;
         mux_to_pads_o.host_04.drv0 = s_reg2hw.host_04_cfg.drv0.q;
         mux_to_pads_o.host_04.drv1 = s_reg2hw.host_04_cfg.drv1.q;
         mux_to_pads_o.host_04.drv2 = s_reg2hw.host_04_cfg.drv2.q;
         mux_to_pads_o.host_04.pde = s_reg2hw.host_04_cfg.pde.q;
         mux_to_pads_o.host_04.pp_odrain_selector = s_reg2hw.host_04_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_04.pudis = s_reg2hw.host_04_cfg.pudis.q;
         mux_to_pads_o.host_04.rxdis = s_reg2hw.host_04_cfg.rxdis.q;
         mux_to_pads_o.host_04.slw_pgm = s_reg2hw.host_04_cfg.slw_pgm.q;
         mux_to_pads_o.host_04.trie = s_reg2hw.host_04_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad host_05
   always_comb begin
     unique case (s_reg2hw.host_05_mux_sel.q)
       PAD_MUX_GROUP_HOST_05_SEL_DEFAULT: begin
         mux_to_pads_o.host_05.chip2pad = s_reg2hw.host_05_cfg.chip2pad.q;
         mux_to_pads_o.host_05.drv0 = s_reg2hw.host_05_cfg.drv0.q;
         mux_to_pads_o.host_05.drv1 = s_reg2hw.host_05_cfg.drv1.q;
         mux_to_pads_o.host_05.drv2 = s_reg2hw.host_05_cfg.drv2.q;
         mux_to_pads_o.host_05.pde = s_reg2hw.host_05_cfg.pde.q;
         mux_to_pads_o.host_05.pp_odrain_selector = s_reg2hw.host_05_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_05.pudis = s_reg2hw.host_05_cfg.pudis.q;
         mux_to_pads_o.host_05.rxdis = s_reg2hw.host_05_cfg.rxdis.q;
         mux_to_pads_o.host_05.slw_pgm = s_reg2hw.host_05_cfg.slw_pgm.q;
         mux_to_pads_o.host_05.trie = s_reg2hw.host_05_cfg.trie.q;
       end
       PAD_MUX_GROUP_HOST_05_SEL_QSPI0_HOST_SDIO3: begin
          mux_to_pads_o.host_05.chip2pad = port_signals_soc2pad_i.qspi0_host.sd3_o;
          mux_to_pads_o.host_05.drv0 = s_reg2hw.host_05_cfg.drv0.q;
          mux_to_pads_o.host_05.drv1 = s_reg2hw.host_05_cfg.drv1.q;
          mux_to_pads_o.host_05.drv2 = s_reg2hw.host_05_cfg.drv2.q;
          mux_to_pads_o.host_05.pde = 1'b0;
          mux_to_pads_o.host_05.pp_odrain_selector = s_reg2hw.host_05_cfg.pp_odrain_selector.q;
          mux_to_pads_o.host_05.pudis = 1'b0;
          mux_to_pads_o.host_05.rxdis = port_signals_soc2pad_i.qspi0_host.sd3_oe;
          mux_to_pads_o.host_05.slw_pgm = 1'b1;
          mux_to_pads_o.host_05.trie = ~port_signals_soc2pad_i.qspi0_host.sd3_oe;
       end
       default: begin
         mux_to_pads_o.host_05.chip2pad = s_reg2hw.host_05_cfg.chip2pad.q;
         mux_to_pads_o.host_05.drv0 = s_reg2hw.host_05_cfg.drv0.q;
         mux_to_pads_o.host_05.drv1 = s_reg2hw.host_05_cfg.drv1.q;
         mux_to_pads_o.host_05.drv2 = s_reg2hw.host_05_cfg.drv2.q;
         mux_to_pads_o.host_05.pde = s_reg2hw.host_05_cfg.pde.q;
         mux_to_pads_o.host_05.pp_odrain_selector = s_reg2hw.host_05_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_05.pudis = s_reg2hw.host_05_cfg.pudis.q;
         mux_to_pads_o.host_05.rxdis = s_reg2hw.host_05_cfg.rxdis.q;
         mux_to_pads_o.host_05.slw_pgm = s_reg2hw.host_05_cfg.slw_pgm.q;
         mux_to_pads_o.host_05.trie = s_reg2hw.host_05_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad host_06
   always_comb begin
     unique case (s_reg2hw.host_06_mux_sel.q)
       PAD_MUX_GROUP_HOST_06_SEL_DEFAULT: begin
         mux_to_pads_o.host_06.chip2pad = s_reg2hw.host_06_cfg.chip2pad.q;
         mux_to_pads_o.host_06.drv0 = s_reg2hw.host_06_cfg.drv0.q;
         mux_to_pads_o.host_06.drv1 = s_reg2hw.host_06_cfg.drv1.q;
         mux_to_pads_o.host_06.drv2 = s_reg2hw.host_06_cfg.drv2.q;
         mux_to_pads_o.host_06.pde = s_reg2hw.host_06_cfg.pde.q;
         mux_to_pads_o.host_06.pp_odrain_selector = s_reg2hw.host_06_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_06.pudis = s_reg2hw.host_06_cfg.pudis.q;
         mux_to_pads_o.host_06.rxdis = s_reg2hw.host_06_cfg.rxdis.q;
         mux_to_pads_o.host_06.slw_pgm = s_reg2hw.host_06_cfg.slw_pgm.q;
         mux_to_pads_o.host_06.trie = s_reg2hw.host_06_cfg.trie.q;
       end
       PAD_MUX_GROUP_HOST_06_SEL_QSPI0_HOST_SCK: begin
          mux_to_pads_o.host_06.chip2pad = port_signals_soc2pad_i.qspi0_host.sck_o;
          mux_to_pads_o.host_06.drv0 = s_reg2hw.host_06_cfg.drv0.q;
          mux_to_pads_o.host_06.drv1 = s_reg2hw.host_06_cfg.drv1.q;
          mux_to_pads_o.host_06.drv2 = s_reg2hw.host_06_cfg.drv2.q;
          mux_to_pads_o.host_06.pde = 1'b0;
          mux_to_pads_o.host_06.pp_odrain_selector = s_reg2hw.host_06_cfg.pp_odrain_selector.q;
          mux_to_pads_o.host_06.pudis = 1'b0;
          mux_to_pads_o.host_06.rxdis = 1'b1;
          mux_to_pads_o.host_06.slw_pgm = 1'b1;
          mux_to_pads_o.host_06.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.host_06.chip2pad = s_reg2hw.host_06_cfg.chip2pad.q;
         mux_to_pads_o.host_06.drv0 = s_reg2hw.host_06_cfg.drv0.q;
         mux_to_pads_o.host_06.drv1 = s_reg2hw.host_06_cfg.drv1.q;
         mux_to_pads_o.host_06.drv2 = s_reg2hw.host_06_cfg.drv2.q;
         mux_to_pads_o.host_06.pde = s_reg2hw.host_06_cfg.pde.q;
         mux_to_pads_o.host_06.pp_odrain_selector = s_reg2hw.host_06_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_06.pudis = s_reg2hw.host_06_cfg.pudis.q;
         mux_to_pads_o.host_06.rxdis = s_reg2hw.host_06_cfg.rxdis.q;
         mux_to_pads_o.host_06.slw_pgm = s_reg2hw.host_06_cfg.slw_pgm.q;
         mux_to_pads_o.host_06.trie = s_reg2hw.host_06_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad host_07
   always_comb begin
     unique case (s_reg2hw.host_07_mux_sel.q)
       PAD_MUX_GROUP_HOST_07_SEL_DEFAULT: begin
         mux_to_pads_o.host_07.chip2pad = s_reg2hw.host_07_cfg.chip2pad.q;
         mux_to_pads_o.host_07.drv0 = s_reg2hw.host_07_cfg.drv0.q;
         mux_to_pads_o.host_07.drv1 = s_reg2hw.host_07_cfg.drv1.q;
         mux_to_pads_o.host_07.drv2 = s_reg2hw.host_07_cfg.drv2.q;
         mux_to_pads_o.host_07.pde = s_reg2hw.host_07_cfg.pde.q;
         mux_to_pads_o.host_07.pp_odrain_selector = s_reg2hw.host_07_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_07.pudis = s_reg2hw.host_07_cfg.pudis.q;
         mux_to_pads_o.host_07.rxdis = s_reg2hw.host_07_cfg.rxdis.q;
         mux_to_pads_o.host_07.slw_pgm = s_reg2hw.host_07_cfg.slw_pgm.q;
         mux_to_pads_o.host_07.trie = s_reg2hw.host_07_cfg.trie.q;
       end
       PAD_MUX_GROUP_HOST_07_SEL_QSPI0_HOST_CSN0: begin
          mux_to_pads_o.host_07.chip2pad = port_signals_soc2pad_i.qspi0_host.csn0_o;
          mux_to_pads_o.host_07.drv0 = s_reg2hw.host_07_cfg.drv0.q;
          mux_to_pads_o.host_07.drv1 = s_reg2hw.host_07_cfg.drv1.q;
          mux_to_pads_o.host_07.drv2 = s_reg2hw.host_07_cfg.drv2.q;
          mux_to_pads_o.host_07.pde = 1'b0;
          mux_to_pads_o.host_07.pp_odrain_selector = s_reg2hw.host_07_cfg.pp_odrain_selector.q;
          mux_to_pads_o.host_07.pudis = 1'b0;
          mux_to_pads_o.host_07.rxdis = 1'b1;
          mux_to_pads_o.host_07.slw_pgm = 1'b1;
          mux_to_pads_o.host_07.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.host_07.chip2pad = s_reg2hw.host_07_cfg.chip2pad.q;
         mux_to_pads_o.host_07.drv0 = s_reg2hw.host_07_cfg.drv0.q;
         mux_to_pads_o.host_07.drv1 = s_reg2hw.host_07_cfg.drv1.q;
         mux_to_pads_o.host_07.drv2 = s_reg2hw.host_07_cfg.drv2.q;
         mux_to_pads_o.host_07.pde = s_reg2hw.host_07_cfg.pde.q;
         mux_to_pads_o.host_07.pp_odrain_selector = s_reg2hw.host_07_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_07.pudis = s_reg2hw.host_07_cfg.pudis.q;
         mux_to_pads_o.host_07.rxdis = s_reg2hw.host_07_cfg.rxdis.q;
         mux_to_pads_o.host_07.slw_pgm = s_reg2hw.host_07_cfg.slw_pgm.q;
         mux_to_pads_o.host_07.trie = s_reg2hw.host_07_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad host_08
   always_comb begin
     unique case (s_reg2hw.host_08_mux_sel.q)
       PAD_MUX_GROUP_HOST_08_SEL_DEFAULT: begin
         mux_to_pads_o.host_08.chip2pad = s_reg2hw.host_08_cfg.chip2pad.q;
         mux_to_pads_o.host_08.drv0 = s_reg2hw.host_08_cfg.drv0.q;
         mux_to_pads_o.host_08.drv1 = s_reg2hw.host_08_cfg.drv1.q;
         mux_to_pads_o.host_08.drv2 = s_reg2hw.host_08_cfg.drv2.q;
         mux_to_pads_o.host_08.pde = s_reg2hw.host_08_cfg.pde.q;
         mux_to_pads_o.host_08.pp_odrain_selector = s_reg2hw.host_08_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_08.pudis = s_reg2hw.host_08_cfg.pudis.q;
         mux_to_pads_o.host_08.rxdis = s_reg2hw.host_08_cfg.rxdis.q;
         mux_to_pads_o.host_08.slw_pgm = s_reg2hw.host_08_cfg.slw_pgm.q;
         mux_to_pads_o.host_08.trie = s_reg2hw.host_08_cfg.trie.q;
       end
       PAD_MUX_GROUP_HOST_08_SEL_QSPI0_HOST_CSN1: begin
          mux_to_pads_o.host_08.chip2pad = port_signals_soc2pad_i.qspi0_host.csn1_o;
          mux_to_pads_o.host_08.drv0 = s_reg2hw.host_08_cfg.drv0.q;
          mux_to_pads_o.host_08.drv1 = s_reg2hw.host_08_cfg.drv1.q;
          mux_to_pads_o.host_08.drv2 = s_reg2hw.host_08_cfg.drv2.q;
          mux_to_pads_o.host_08.pde = 1'b0;
          mux_to_pads_o.host_08.pp_odrain_selector = s_reg2hw.host_08_cfg.pp_odrain_selector.q;
          mux_to_pads_o.host_08.pudis = 1'b0;
          mux_to_pads_o.host_08.rxdis = 1'b1;
          mux_to_pads_o.host_08.slw_pgm = 1'b1;
          mux_to_pads_o.host_08.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.host_08.chip2pad = s_reg2hw.host_08_cfg.chip2pad.q;
         mux_to_pads_o.host_08.drv0 = s_reg2hw.host_08_cfg.drv0.q;
         mux_to_pads_o.host_08.drv1 = s_reg2hw.host_08_cfg.drv1.q;
         mux_to_pads_o.host_08.drv2 = s_reg2hw.host_08_cfg.drv2.q;
         mux_to_pads_o.host_08.pde = s_reg2hw.host_08_cfg.pde.q;
         mux_to_pads_o.host_08.pp_odrain_selector = s_reg2hw.host_08_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_08.pudis = s_reg2hw.host_08_cfg.pudis.q;
         mux_to_pads_o.host_08.rxdis = s_reg2hw.host_08_cfg.rxdis.q;
         mux_to_pads_o.host_08.slw_pgm = s_reg2hw.host_08_cfg.slw_pgm.q;
         mux_to_pads_o.host_08.trie = s_reg2hw.host_08_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad host_09
   always_comb begin
     unique case (s_reg2hw.host_09_mux_sel.q)
       PAD_MUX_GROUP_HOST_09_SEL_DEFAULT: begin
         mux_to_pads_o.host_09.chip2pad = s_reg2hw.host_09_cfg.chip2pad.q;
         mux_to_pads_o.host_09.drv0 = s_reg2hw.host_09_cfg.drv0.q;
         mux_to_pads_o.host_09.drv1 = s_reg2hw.host_09_cfg.drv1.q;
         mux_to_pads_o.host_09.drv2 = s_reg2hw.host_09_cfg.drv2.q;
         mux_to_pads_o.host_09.pde = s_reg2hw.host_09_cfg.pde.q;
         mux_to_pads_o.host_09.pp_odrain_selector = s_reg2hw.host_09_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_09.pudis = s_reg2hw.host_09_cfg.pudis.q;
         mux_to_pads_o.host_09.rxdis = s_reg2hw.host_09_cfg.rxdis.q;
         mux_to_pads_o.host_09.slw_pgm = s_reg2hw.host_09_cfg.slw_pgm.q;
         mux_to_pads_o.host_09.trie = s_reg2hw.host_09_cfg.trie.q;
       end
       PAD_MUX_GROUP_HOST_09_SEL_I2C0_HOST_SDA: begin
          mux_to_pads_o.host_09.chip2pad = port_signals_soc2pad_i.i2c0_host.sda_o;
          mux_to_pads_o.host_09.drv0 = s_reg2hw.host_09_cfg.drv0.q;
          mux_to_pads_o.host_09.drv1 = s_reg2hw.host_09_cfg.drv1.q;
          mux_to_pads_o.host_09.drv2 = s_reg2hw.host_09_cfg.drv2.q;
          mux_to_pads_o.host_09.pde = 1'b0;
          mux_to_pads_o.host_09.pp_odrain_selector = s_reg2hw.host_09_cfg.pp_odrain_selector.q;
          mux_to_pads_o.host_09.pudis = 1'b0;
          mux_to_pads_o.host_09.rxdis = port_signals_soc2pad_i.i2c0_host.sda_oe;
          mux_to_pads_o.host_09.slw_pgm = s_reg2hw.host_09_cfg.slw_pgm.q;
          mux_to_pads_o.host_09.trie = ~port_signals_soc2pad_i.i2c0_host.sda_oe;
       end
       default: begin
         mux_to_pads_o.host_09.chip2pad = s_reg2hw.host_09_cfg.chip2pad.q;
         mux_to_pads_o.host_09.drv0 = s_reg2hw.host_09_cfg.drv0.q;
         mux_to_pads_o.host_09.drv1 = s_reg2hw.host_09_cfg.drv1.q;
         mux_to_pads_o.host_09.drv2 = s_reg2hw.host_09_cfg.drv2.q;
         mux_to_pads_o.host_09.pde = s_reg2hw.host_09_cfg.pde.q;
         mux_to_pads_o.host_09.pp_odrain_selector = s_reg2hw.host_09_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_09.pudis = s_reg2hw.host_09_cfg.pudis.q;
         mux_to_pads_o.host_09.rxdis = s_reg2hw.host_09_cfg.rxdis.q;
         mux_to_pads_o.host_09.slw_pgm = s_reg2hw.host_09_cfg.slw_pgm.q;
         mux_to_pads_o.host_09.trie = s_reg2hw.host_09_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad host_10
   always_comb begin
     unique case (s_reg2hw.host_10_mux_sel.q)
       PAD_MUX_GROUP_HOST_10_SEL_DEFAULT: begin
         mux_to_pads_o.host_10.chip2pad = s_reg2hw.host_10_cfg.chip2pad.q;
         mux_to_pads_o.host_10.drv0 = s_reg2hw.host_10_cfg.drv0.q;
         mux_to_pads_o.host_10.drv1 = s_reg2hw.host_10_cfg.drv1.q;
         mux_to_pads_o.host_10.drv2 = s_reg2hw.host_10_cfg.drv2.q;
         mux_to_pads_o.host_10.pde = s_reg2hw.host_10_cfg.pde.q;
         mux_to_pads_o.host_10.pp_odrain_selector = s_reg2hw.host_10_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_10.pudis = s_reg2hw.host_10_cfg.pudis.q;
         mux_to_pads_o.host_10.rxdis = s_reg2hw.host_10_cfg.rxdis.q;
         mux_to_pads_o.host_10.slw_pgm = s_reg2hw.host_10_cfg.slw_pgm.q;
         mux_to_pads_o.host_10.trie = s_reg2hw.host_10_cfg.trie.q;
       end
       PAD_MUX_GROUP_HOST_10_SEL_I2C0_HOST_SCL: begin
          mux_to_pads_o.host_10.chip2pad = port_signals_soc2pad_i.i2c0_host.scl_o;
          mux_to_pads_o.host_10.drv0 = s_reg2hw.host_10_cfg.drv0.q;
          mux_to_pads_o.host_10.drv1 = s_reg2hw.host_10_cfg.drv1.q;
          mux_to_pads_o.host_10.drv2 = s_reg2hw.host_10_cfg.drv2.q;
          mux_to_pads_o.host_10.pde = 1'b0;
          mux_to_pads_o.host_10.pp_odrain_selector = s_reg2hw.host_10_cfg.pp_odrain_selector.q;
          mux_to_pads_o.host_10.pudis = 1'b0;
          mux_to_pads_o.host_10.rxdis = 1'b0;
          mux_to_pads_o.host_10.slw_pgm = s_reg2hw.host_10_cfg.slw_pgm.q;
          mux_to_pads_o.host_10.trie = ~port_signals_soc2pad_i.i2c0_host.scl_oe;
       end
       default: begin
         mux_to_pads_o.host_10.chip2pad = s_reg2hw.host_10_cfg.chip2pad.q;
         mux_to_pads_o.host_10.drv0 = s_reg2hw.host_10_cfg.drv0.q;
         mux_to_pads_o.host_10.drv1 = s_reg2hw.host_10_cfg.drv1.q;
         mux_to_pads_o.host_10.drv2 = s_reg2hw.host_10_cfg.drv2.q;
         mux_to_pads_o.host_10.pde = s_reg2hw.host_10_cfg.pde.q;
         mux_to_pads_o.host_10.pp_odrain_selector = s_reg2hw.host_10_cfg.pp_odrain_selector.q;
         mux_to_pads_o.host_10.pudis = s_reg2hw.host_10_cfg.pudis.q;
         mux_to_pads_o.host_10.rxdis = s_reg2hw.host_10_cfg.rxdis.q;
         mux_to_pads_o.host_10.slw_pgm = s_reg2hw.host_10_cfg.slw_pgm.q;
         mux_to_pads_o.host_10.trie = s_reg2hw.host_10_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad secure_00
   always_comb begin
     unique case (s_reg2hw.secure_00_mux_sel.q)
       PAD_MUX_GROUP_SECURE_00_SEL_DEFAULT: begin
         mux_to_pads_o.secure_00.chip2pad = s_reg2hw.secure_00_cfg.chip2pad.q;
         mux_to_pads_o.secure_00.drv0 = s_reg2hw.secure_00_cfg.drv0.q;
         mux_to_pads_o.secure_00.drv1 = s_reg2hw.secure_00_cfg.drv1.q;
         mux_to_pads_o.secure_00.drv2 = s_reg2hw.secure_00_cfg.drv2.q;
         mux_to_pads_o.secure_00.pde = s_reg2hw.secure_00_cfg.pde.q;
         mux_to_pads_o.secure_00.pp_odrain_selector = s_reg2hw.secure_00_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_00.pudis = s_reg2hw.secure_00_cfg.pudis.q;
         mux_to_pads_o.secure_00.rxdis = s_reg2hw.secure_00_cfg.rxdis.q;
         mux_to_pads_o.secure_00.slw_pgm = s_reg2hw.secure_00_cfg.slw_pgm.q;
         mux_to_pads_o.secure_00.trie = s_reg2hw.secure_00_cfg.trie.q;
       end
       PAD_MUX_GROUP_SECURE_00_SEL_QSPI0_SEC_ISLN_SDIO0: begin
          mux_to_pads_o.secure_00.chip2pad = port_signals_soc2pad_i.qspi0_sec_isln.sd0_o;
          mux_to_pads_o.secure_00.drv0 = s_reg2hw.secure_00_cfg.drv0.q;
          mux_to_pads_o.secure_00.drv1 = s_reg2hw.secure_00_cfg.drv1.q;
          mux_to_pads_o.secure_00.drv2 = s_reg2hw.secure_00_cfg.drv2.q;
          mux_to_pads_o.secure_00.pde = 1'b0;
          mux_to_pads_o.secure_00.pp_odrain_selector = s_reg2hw.secure_00_cfg.pp_odrain_selector.q;
          mux_to_pads_o.secure_00.pudis = 1'b0;
          mux_to_pads_o.secure_00.rxdis = port_signals_soc2pad_i.qspi0_sec_isln.sd0_oe;
          mux_to_pads_o.secure_00.slw_pgm = 1'b1;
          mux_to_pads_o.secure_00.trie = ~port_signals_soc2pad_i.qspi0_sec_isln.sd0_oe;
       end
       default: begin
         mux_to_pads_o.secure_00.chip2pad = s_reg2hw.secure_00_cfg.chip2pad.q;
         mux_to_pads_o.secure_00.drv0 = s_reg2hw.secure_00_cfg.drv0.q;
         mux_to_pads_o.secure_00.drv1 = s_reg2hw.secure_00_cfg.drv1.q;
         mux_to_pads_o.secure_00.drv2 = s_reg2hw.secure_00_cfg.drv2.q;
         mux_to_pads_o.secure_00.pde = s_reg2hw.secure_00_cfg.pde.q;
         mux_to_pads_o.secure_00.pp_odrain_selector = s_reg2hw.secure_00_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_00.pudis = s_reg2hw.secure_00_cfg.pudis.q;
         mux_to_pads_o.secure_00.rxdis = s_reg2hw.secure_00_cfg.rxdis.q;
         mux_to_pads_o.secure_00.slw_pgm = s_reg2hw.secure_00_cfg.slw_pgm.q;
         mux_to_pads_o.secure_00.trie = s_reg2hw.secure_00_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad secure_01
   always_comb begin
     unique case (s_reg2hw.secure_01_mux_sel.q)
       PAD_MUX_GROUP_SECURE_01_SEL_DEFAULT: begin
         mux_to_pads_o.secure_01.chip2pad = s_reg2hw.secure_01_cfg.chip2pad.q;
         mux_to_pads_o.secure_01.drv0 = s_reg2hw.secure_01_cfg.drv0.q;
         mux_to_pads_o.secure_01.drv1 = s_reg2hw.secure_01_cfg.drv1.q;
         mux_to_pads_o.secure_01.drv2 = s_reg2hw.secure_01_cfg.drv2.q;
         mux_to_pads_o.secure_01.pde = s_reg2hw.secure_01_cfg.pde.q;
         mux_to_pads_o.secure_01.pp_odrain_selector = s_reg2hw.secure_01_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_01.pudis = s_reg2hw.secure_01_cfg.pudis.q;
         mux_to_pads_o.secure_01.rxdis = s_reg2hw.secure_01_cfg.rxdis.q;
         mux_to_pads_o.secure_01.slw_pgm = s_reg2hw.secure_01_cfg.slw_pgm.q;
         mux_to_pads_o.secure_01.trie = s_reg2hw.secure_01_cfg.trie.q;
       end
       PAD_MUX_GROUP_SECURE_01_SEL_QSPI0_SEC_ISLN_SDIO1: begin
          mux_to_pads_o.secure_01.chip2pad = port_signals_soc2pad_i.qspi0_sec_isln.sd1_o;
          mux_to_pads_o.secure_01.drv0 = s_reg2hw.secure_01_cfg.drv0.q;
          mux_to_pads_o.secure_01.drv1 = s_reg2hw.secure_01_cfg.drv1.q;
          mux_to_pads_o.secure_01.drv2 = s_reg2hw.secure_01_cfg.drv2.q;
          mux_to_pads_o.secure_01.pde = 1'b0;
          mux_to_pads_o.secure_01.pp_odrain_selector = s_reg2hw.secure_01_cfg.pp_odrain_selector.q;
          mux_to_pads_o.secure_01.pudis = 1'b0;
          mux_to_pads_o.secure_01.rxdis = port_signals_soc2pad_i.qspi0_sec_isln.sd1_oe;
          mux_to_pads_o.secure_01.slw_pgm = 1'b1;
          mux_to_pads_o.secure_01.trie = ~port_signals_soc2pad_i.qspi0_sec_isln.sd1_oe;
       end
       default: begin
         mux_to_pads_o.secure_01.chip2pad = s_reg2hw.secure_01_cfg.chip2pad.q;
         mux_to_pads_o.secure_01.drv0 = s_reg2hw.secure_01_cfg.drv0.q;
         mux_to_pads_o.secure_01.drv1 = s_reg2hw.secure_01_cfg.drv1.q;
         mux_to_pads_o.secure_01.drv2 = s_reg2hw.secure_01_cfg.drv2.q;
         mux_to_pads_o.secure_01.pde = s_reg2hw.secure_01_cfg.pde.q;
         mux_to_pads_o.secure_01.pp_odrain_selector = s_reg2hw.secure_01_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_01.pudis = s_reg2hw.secure_01_cfg.pudis.q;
         mux_to_pads_o.secure_01.rxdis = s_reg2hw.secure_01_cfg.rxdis.q;
         mux_to_pads_o.secure_01.slw_pgm = s_reg2hw.secure_01_cfg.slw_pgm.q;
         mux_to_pads_o.secure_01.trie = s_reg2hw.secure_01_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad secure_02
   always_comb begin
     unique case (s_reg2hw.secure_02_mux_sel.q)
       PAD_MUX_GROUP_SECURE_02_SEL_DEFAULT: begin
         mux_to_pads_o.secure_02.chip2pad = s_reg2hw.secure_02_cfg.chip2pad.q;
         mux_to_pads_o.secure_02.drv0 = s_reg2hw.secure_02_cfg.drv0.q;
         mux_to_pads_o.secure_02.drv1 = s_reg2hw.secure_02_cfg.drv1.q;
         mux_to_pads_o.secure_02.drv2 = s_reg2hw.secure_02_cfg.drv2.q;
         mux_to_pads_o.secure_02.pde = s_reg2hw.secure_02_cfg.pde.q;
         mux_to_pads_o.secure_02.pp_odrain_selector = s_reg2hw.secure_02_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_02.pudis = s_reg2hw.secure_02_cfg.pudis.q;
         mux_to_pads_o.secure_02.rxdis = s_reg2hw.secure_02_cfg.rxdis.q;
         mux_to_pads_o.secure_02.slw_pgm = s_reg2hw.secure_02_cfg.slw_pgm.q;
         mux_to_pads_o.secure_02.trie = s_reg2hw.secure_02_cfg.trie.q;
       end
       PAD_MUX_GROUP_SECURE_02_SEL_QSPI0_SEC_ISLN_SDIO2: begin
          mux_to_pads_o.secure_02.chip2pad = port_signals_soc2pad_i.qspi0_sec_isln.sd2_o;
          mux_to_pads_o.secure_02.drv0 = s_reg2hw.secure_02_cfg.drv0.q;
          mux_to_pads_o.secure_02.drv1 = s_reg2hw.secure_02_cfg.drv1.q;
          mux_to_pads_o.secure_02.drv2 = s_reg2hw.secure_02_cfg.drv2.q;
          mux_to_pads_o.secure_02.pde = 1'b0;
          mux_to_pads_o.secure_02.pp_odrain_selector = s_reg2hw.secure_02_cfg.pp_odrain_selector.q;
          mux_to_pads_o.secure_02.pudis = 1'b0;
          mux_to_pads_o.secure_02.rxdis = port_signals_soc2pad_i.qspi0_sec_isln.sd2_oe;
          mux_to_pads_o.secure_02.slw_pgm = 1'b1;
          mux_to_pads_o.secure_02.trie = ~port_signals_soc2pad_i.qspi0_sec_isln.sd2_oe;
       end
       default: begin
         mux_to_pads_o.secure_02.chip2pad = s_reg2hw.secure_02_cfg.chip2pad.q;
         mux_to_pads_o.secure_02.drv0 = s_reg2hw.secure_02_cfg.drv0.q;
         mux_to_pads_o.secure_02.drv1 = s_reg2hw.secure_02_cfg.drv1.q;
         mux_to_pads_o.secure_02.drv2 = s_reg2hw.secure_02_cfg.drv2.q;
         mux_to_pads_o.secure_02.pde = s_reg2hw.secure_02_cfg.pde.q;
         mux_to_pads_o.secure_02.pp_odrain_selector = s_reg2hw.secure_02_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_02.pudis = s_reg2hw.secure_02_cfg.pudis.q;
         mux_to_pads_o.secure_02.rxdis = s_reg2hw.secure_02_cfg.rxdis.q;
         mux_to_pads_o.secure_02.slw_pgm = s_reg2hw.secure_02_cfg.slw_pgm.q;
         mux_to_pads_o.secure_02.trie = s_reg2hw.secure_02_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad secure_03
   always_comb begin
     unique case (s_reg2hw.secure_03_mux_sel.q)
       PAD_MUX_GROUP_SECURE_03_SEL_DEFAULT: begin
         mux_to_pads_o.secure_03.chip2pad = s_reg2hw.secure_03_cfg.chip2pad.q;
         mux_to_pads_o.secure_03.drv0 = s_reg2hw.secure_03_cfg.drv0.q;
         mux_to_pads_o.secure_03.drv1 = s_reg2hw.secure_03_cfg.drv1.q;
         mux_to_pads_o.secure_03.drv2 = s_reg2hw.secure_03_cfg.drv2.q;
         mux_to_pads_o.secure_03.pde = s_reg2hw.secure_03_cfg.pde.q;
         mux_to_pads_o.secure_03.pp_odrain_selector = s_reg2hw.secure_03_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_03.pudis = s_reg2hw.secure_03_cfg.pudis.q;
         mux_to_pads_o.secure_03.rxdis = s_reg2hw.secure_03_cfg.rxdis.q;
         mux_to_pads_o.secure_03.slw_pgm = s_reg2hw.secure_03_cfg.slw_pgm.q;
         mux_to_pads_o.secure_03.trie = s_reg2hw.secure_03_cfg.trie.q;
       end
       PAD_MUX_GROUP_SECURE_03_SEL_QSPI0_SEC_ISLN_SDIO3: begin
          mux_to_pads_o.secure_03.chip2pad = port_signals_soc2pad_i.qspi0_sec_isln.sd3_o;
          mux_to_pads_o.secure_03.drv0 = s_reg2hw.secure_03_cfg.drv0.q;
          mux_to_pads_o.secure_03.drv1 = s_reg2hw.secure_03_cfg.drv1.q;
          mux_to_pads_o.secure_03.drv2 = s_reg2hw.secure_03_cfg.drv2.q;
          mux_to_pads_o.secure_03.pde = 1'b0;
          mux_to_pads_o.secure_03.pp_odrain_selector = s_reg2hw.secure_03_cfg.pp_odrain_selector.q;
          mux_to_pads_o.secure_03.pudis = 1'b0;
          mux_to_pads_o.secure_03.rxdis = port_signals_soc2pad_i.qspi0_sec_isln.sd3_oe;
          mux_to_pads_o.secure_03.slw_pgm = 1'b1;
          mux_to_pads_o.secure_03.trie = ~port_signals_soc2pad_i.qspi0_sec_isln.sd3_oe;
       end
       default: begin
         mux_to_pads_o.secure_03.chip2pad = s_reg2hw.secure_03_cfg.chip2pad.q;
         mux_to_pads_o.secure_03.drv0 = s_reg2hw.secure_03_cfg.drv0.q;
         mux_to_pads_o.secure_03.drv1 = s_reg2hw.secure_03_cfg.drv1.q;
         mux_to_pads_o.secure_03.drv2 = s_reg2hw.secure_03_cfg.drv2.q;
         mux_to_pads_o.secure_03.pde = s_reg2hw.secure_03_cfg.pde.q;
         mux_to_pads_o.secure_03.pp_odrain_selector = s_reg2hw.secure_03_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_03.pudis = s_reg2hw.secure_03_cfg.pudis.q;
         mux_to_pads_o.secure_03.rxdis = s_reg2hw.secure_03_cfg.rxdis.q;
         mux_to_pads_o.secure_03.slw_pgm = s_reg2hw.secure_03_cfg.slw_pgm.q;
         mux_to_pads_o.secure_03.trie = s_reg2hw.secure_03_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad secure_04
   always_comb begin
     unique case (s_reg2hw.secure_04_mux_sel.q)
       PAD_MUX_GROUP_SECURE_04_SEL_DEFAULT: begin
         mux_to_pads_o.secure_04.chip2pad = s_reg2hw.secure_04_cfg.chip2pad.q;
         mux_to_pads_o.secure_04.drv0 = s_reg2hw.secure_04_cfg.drv0.q;
         mux_to_pads_o.secure_04.drv1 = s_reg2hw.secure_04_cfg.drv1.q;
         mux_to_pads_o.secure_04.drv2 = s_reg2hw.secure_04_cfg.drv2.q;
         mux_to_pads_o.secure_04.pde = s_reg2hw.secure_04_cfg.pde.q;
         mux_to_pads_o.secure_04.pp_odrain_selector = s_reg2hw.secure_04_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_04.pudis = s_reg2hw.secure_04_cfg.pudis.q;
         mux_to_pads_o.secure_04.rxdis = s_reg2hw.secure_04_cfg.rxdis.q;
         mux_to_pads_o.secure_04.slw_pgm = s_reg2hw.secure_04_cfg.slw_pgm.q;
         mux_to_pads_o.secure_04.trie = s_reg2hw.secure_04_cfg.trie.q;
       end
       PAD_MUX_GROUP_SECURE_04_SEL_QSPI0_SEC_ISLN_SCK: begin
          mux_to_pads_o.secure_04.chip2pad = port_signals_soc2pad_i.qspi0_sec_isln.sck_o;
          mux_to_pads_o.secure_04.drv0 = s_reg2hw.secure_04_cfg.drv0.q;
          mux_to_pads_o.secure_04.drv1 = s_reg2hw.secure_04_cfg.drv1.q;
          mux_to_pads_o.secure_04.drv2 = s_reg2hw.secure_04_cfg.drv2.q;
          mux_to_pads_o.secure_04.pde = 1'b0;
          mux_to_pads_o.secure_04.pp_odrain_selector = s_reg2hw.secure_04_cfg.pp_odrain_selector.q;
          mux_to_pads_o.secure_04.pudis = 1'b0;
          mux_to_pads_o.secure_04.rxdis = 1'b1;
          mux_to_pads_o.secure_04.slw_pgm = 1'b1;
          mux_to_pads_o.secure_04.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.secure_04.chip2pad = s_reg2hw.secure_04_cfg.chip2pad.q;
         mux_to_pads_o.secure_04.drv0 = s_reg2hw.secure_04_cfg.drv0.q;
         mux_to_pads_o.secure_04.drv1 = s_reg2hw.secure_04_cfg.drv1.q;
         mux_to_pads_o.secure_04.drv2 = s_reg2hw.secure_04_cfg.drv2.q;
         mux_to_pads_o.secure_04.pde = s_reg2hw.secure_04_cfg.pde.q;
         mux_to_pads_o.secure_04.pp_odrain_selector = s_reg2hw.secure_04_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_04.pudis = s_reg2hw.secure_04_cfg.pudis.q;
         mux_to_pads_o.secure_04.rxdis = s_reg2hw.secure_04_cfg.rxdis.q;
         mux_to_pads_o.secure_04.slw_pgm = s_reg2hw.secure_04_cfg.slw_pgm.q;
         mux_to_pads_o.secure_04.trie = s_reg2hw.secure_04_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad secure_05
   always_comb begin
     unique case (s_reg2hw.secure_05_mux_sel.q)
       PAD_MUX_GROUP_SECURE_05_SEL_DEFAULT: begin
         mux_to_pads_o.secure_05.chip2pad = s_reg2hw.secure_05_cfg.chip2pad.q;
         mux_to_pads_o.secure_05.drv0 = s_reg2hw.secure_05_cfg.drv0.q;
         mux_to_pads_o.secure_05.drv1 = s_reg2hw.secure_05_cfg.drv1.q;
         mux_to_pads_o.secure_05.drv2 = s_reg2hw.secure_05_cfg.drv2.q;
         mux_to_pads_o.secure_05.pde = s_reg2hw.secure_05_cfg.pde.q;
         mux_to_pads_o.secure_05.pp_odrain_selector = s_reg2hw.secure_05_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_05.pudis = s_reg2hw.secure_05_cfg.pudis.q;
         mux_to_pads_o.secure_05.rxdis = s_reg2hw.secure_05_cfg.rxdis.q;
         mux_to_pads_o.secure_05.slw_pgm = s_reg2hw.secure_05_cfg.slw_pgm.q;
         mux_to_pads_o.secure_05.trie = s_reg2hw.secure_05_cfg.trie.q;
       end
       PAD_MUX_GROUP_SECURE_05_SEL_QSPI0_SEC_ISLN_CSN0: begin
          mux_to_pads_o.secure_05.chip2pad = port_signals_soc2pad_i.qspi0_sec_isln.csn0_o;
          mux_to_pads_o.secure_05.drv0 = s_reg2hw.secure_05_cfg.drv0.q;
          mux_to_pads_o.secure_05.drv1 = s_reg2hw.secure_05_cfg.drv1.q;
          mux_to_pads_o.secure_05.drv2 = s_reg2hw.secure_05_cfg.drv2.q;
          mux_to_pads_o.secure_05.pde = 1'b0;
          mux_to_pads_o.secure_05.pp_odrain_selector = s_reg2hw.secure_05_cfg.pp_odrain_selector.q;
          mux_to_pads_o.secure_05.pudis = 1'b0;
          mux_to_pads_o.secure_05.rxdis = 1'b1;
          mux_to_pads_o.secure_05.slw_pgm = 1'b1;
          mux_to_pads_o.secure_05.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.secure_05.chip2pad = s_reg2hw.secure_05_cfg.chip2pad.q;
         mux_to_pads_o.secure_05.drv0 = s_reg2hw.secure_05_cfg.drv0.q;
         mux_to_pads_o.secure_05.drv1 = s_reg2hw.secure_05_cfg.drv1.q;
         mux_to_pads_o.secure_05.drv2 = s_reg2hw.secure_05_cfg.drv2.q;
         mux_to_pads_o.secure_05.pde = s_reg2hw.secure_05_cfg.pde.q;
         mux_to_pads_o.secure_05.pp_odrain_selector = s_reg2hw.secure_05_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_05.pudis = s_reg2hw.secure_05_cfg.pudis.q;
         mux_to_pads_o.secure_05.rxdis = s_reg2hw.secure_05_cfg.rxdis.q;
         mux_to_pads_o.secure_05.slw_pgm = s_reg2hw.secure_05_cfg.slw_pgm.q;
         mux_to_pads_o.secure_05.trie = s_reg2hw.secure_05_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad secure_06
   always_comb begin
     unique case (s_reg2hw.secure_06_mux_sel.q)
       PAD_MUX_GROUP_SECURE_06_SEL_DEFAULT: begin
         mux_to_pads_o.secure_06.chip2pad = s_reg2hw.secure_06_cfg.chip2pad.q;
         mux_to_pads_o.secure_06.drv0 = s_reg2hw.secure_06_cfg.drv0.q;
         mux_to_pads_o.secure_06.drv1 = s_reg2hw.secure_06_cfg.drv1.q;
         mux_to_pads_o.secure_06.drv2 = s_reg2hw.secure_06_cfg.drv2.q;
         mux_to_pads_o.secure_06.pde = s_reg2hw.secure_06_cfg.pde.q;
         mux_to_pads_o.secure_06.pp_odrain_selector = s_reg2hw.secure_06_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_06.pudis = s_reg2hw.secure_06_cfg.pudis.q;
         mux_to_pads_o.secure_06.rxdis = s_reg2hw.secure_06_cfg.rxdis.q;
         mux_to_pads_o.secure_06.slw_pgm = s_reg2hw.secure_06_cfg.slw_pgm.q;
         mux_to_pads_o.secure_06.trie = s_reg2hw.secure_06_cfg.trie.q;
       end
       PAD_MUX_GROUP_SECURE_06_SEL_UART1_SEC_ISLN_RX: begin
          mux_to_pads_o.secure_06.chip2pad = 1'b1;
          mux_to_pads_o.secure_06.drv0 = s_reg2hw.secure_06_cfg.drv0.q;
          mux_to_pads_o.secure_06.drv1 = s_reg2hw.secure_06_cfg.drv1.q;
          mux_to_pads_o.secure_06.drv2 = s_reg2hw.secure_06_cfg.drv2.q;
          mux_to_pads_o.secure_06.pde = s_reg2hw.secure_06_cfg.pde.q;
          mux_to_pads_o.secure_06.pp_odrain_selector = s_reg2hw.secure_06_cfg.pp_odrain_selector.q;
          mux_to_pads_o.secure_06.pudis = s_reg2hw.secure_06_cfg.pudis.q;
          mux_to_pads_o.secure_06.rxdis = 1'b0;
          mux_to_pads_o.secure_06.slw_pgm = s_reg2hw.secure_06_cfg.slw_pgm.q;
          mux_to_pads_o.secure_06.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.secure_06.chip2pad = s_reg2hw.secure_06_cfg.chip2pad.q;
         mux_to_pads_o.secure_06.drv0 = s_reg2hw.secure_06_cfg.drv0.q;
         mux_to_pads_o.secure_06.drv1 = s_reg2hw.secure_06_cfg.drv1.q;
         mux_to_pads_o.secure_06.drv2 = s_reg2hw.secure_06_cfg.drv2.q;
         mux_to_pads_o.secure_06.pde = s_reg2hw.secure_06_cfg.pde.q;
         mux_to_pads_o.secure_06.pp_odrain_selector = s_reg2hw.secure_06_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_06.pudis = s_reg2hw.secure_06_cfg.pudis.q;
         mux_to_pads_o.secure_06.rxdis = s_reg2hw.secure_06_cfg.rxdis.q;
         mux_to_pads_o.secure_06.slw_pgm = s_reg2hw.secure_06_cfg.slw_pgm.q;
         mux_to_pads_o.secure_06.trie = s_reg2hw.secure_06_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad secure_07
   always_comb begin
     unique case (s_reg2hw.secure_07_mux_sel.q)
       PAD_MUX_GROUP_SECURE_07_SEL_DEFAULT: begin
         mux_to_pads_o.secure_07.chip2pad = s_reg2hw.secure_07_cfg.chip2pad.q;
         mux_to_pads_o.secure_07.drv0 = s_reg2hw.secure_07_cfg.drv0.q;
         mux_to_pads_o.secure_07.drv1 = s_reg2hw.secure_07_cfg.drv1.q;
         mux_to_pads_o.secure_07.drv2 = s_reg2hw.secure_07_cfg.drv2.q;
         mux_to_pads_o.secure_07.pde = s_reg2hw.secure_07_cfg.pde.q;
         mux_to_pads_o.secure_07.pp_odrain_selector = s_reg2hw.secure_07_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_07.pudis = s_reg2hw.secure_07_cfg.pudis.q;
         mux_to_pads_o.secure_07.rxdis = s_reg2hw.secure_07_cfg.rxdis.q;
         mux_to_pads_o.secure_07.slw_pgm = s_reg2hw.secure_07_cfg.slw_pgm.q;
         mux_to_pads_o.secure_07.trie = s_reg2hw.secure_07_cfg.trie.q;
       end
       PAD_MUX_GROUP_SECURE_07_SEL_UART1_SEC_ISLN_TX: begin
          mux_to_pads_o.secure_07.chip2pad = port_signals_soc2pad_i.uart1_sec_isln.tx_o;
          mux_to_pads_o.secure_07.drv0 = s_reg2hw.secure_07_cfg.drv0.q;
          mux_to_pads_o.secure_07.drv1 = s_reg2hw.secure_07_cfg.drv1.q;
          mux_to_pads_o.secure_07.drv2 = s_reg2hw.secure_07_cfg.drv2.q;
          mux_to_pads_o.secure_07.pde = s_reg2hw.secure_07_cfg.pde.q;
          mux_to_pads_o.secure_07.pp_odrain_selector = s_reg2hw.secure_07_cfg.pp_odrain_selector.q;
          mux_to_pads_o.secure_07.pudis = s_reg2hw.secure_07_cfg.pudis.q;
          mux_to_pads_o.secure_07.rxdis = 1'b1;
          mux_to_pads_o.secure_07.slw_pgm = s_reg2hw.secure_07_cfg.slw_pgm.q;
          mux_to_pads_o.secure_07.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.secure_07.chip2pad = s_reg2hw.secure_07_cfg.chip2pad.q;
         mux_to_pads_o.secure_07.drv0 = s_reg2hw.secure_07_cfg.drv0.q;
         mux_to_pads_o.secure_07.drv1 = s_reg2hw.secure_07_cfg.drv1.q;
         mux_to_pads_o.secure_07.drv2 = s_reg2hw.secure_07_cfg.drv2.q;
         mux_to_pads_o.secure_07.pde = s_reg2hw.secure_07_cfg.pde.q;
         mux_to_pads_o.secure_07.pp_odrain_selector = s_reg2hw.secure_07_cfg.pp_odrain_selector.q;
         mux_to_pads_o.secure_07.pudis = s_reg2hw.secure_07_cfg.pudis.q;
         mux_to_pads_o.secure_07.rxdis = s_reg2hw.secure_07_cfg.rxdis.q;
         mux_to_pads_o.secure_07.slw_pgm = s_reg2hw.secure_07_cfg.slw_pgm.q;
         mux_to_pads_o.secure_07.trie = s_reg2hw.secure_07_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_00
   always_comb begin
     unique case (s_reg2hw.gpio_00_mux_sel.q)
       PAD_MUX_GROUP_GPIO_00_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_00.chip2pad = s_reg2hw.gpio_00_cfg.chip2pad.q;
         mux_to_pads_o.gpio_00.drv0 = s_reg2hw.gpio_00_cfg.drv0.q;
         mux_to_pads_o.gpio_00.drv1 = s_reg2hw.gpio_00_cfg.drv1.q;
         mux_to_pads_o.gpio_00.drv2 = s_reg2hw.gpio_00_cfg.drv2.q;
         mux_to_pads_o.gpio_00.pde = s_reg2hw.gpio_00_cfg.pde.q;
         mux_to_pads_o.gpio_00.pp_odrain_selector = s_reg2hw.gpio_00_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_00.pudis = s_reg2hw.gpio_00_cfg.pudis.q;
         mux_to_pads_o.gpio_00.rxdis = s_reg2hw.gpio_00_cfg.rxdis.q;
         mux_to_pads_o.gpio_00.slw_pgm = s_reg2hw.gpio_00_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_00.trie = s_reg2hw.gpio_00_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_00_SEL_GPIO_GPIO00: begin
          mux_to_pads_o.gpio_00.chip2pad = port_signals_soc2pad_i.gpio.gpio00_out;
          mux_to_pads_o.gpio_00.drv0 = s_reg2hw.gpio_00_cfg.drv0.q;
          mux_to_pads_o.gpio_00.drv1 = s_reg2hw.gpio_00_cfg.drv1.q;
          mux_to_pads_o.gpio_00.drv2 = s_reg2hw.gpio_00_cfg.drv2.q;
          mux_to_pads_o.gpio_00.pde = s_reg2hw.gpio_00_cfg.pde.q;
          mux_to_pads_o.gpio_00.pp_odrain_selector = s_reg2hw.gpio_00_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_00.pudis = s_reg2hw.gpio_00_cfg.pudis.q;
          mux_to_pads_o.gpio_00.rxdis = port_signals_soc2pad_i.gpio.gpio00_tx_en;
          mux_to_pads_o.gpio_00.slw_pgm = s_reg2hw.gpio_00_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_00.trie = ~port_signals_soc2pad_i.gpio.gpio00_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_00.chip2pad = s_reg2hw.gpio_00_cfg.chip2pad.q;
         mux_to_pads_o.gpio_00.drv0 = s_reg2hw.gpio_00_cfg.drv0.q;
         mux_to_pads_o.gpio_00.drv1 = s_reg2hw.gpio_00_cfg.drv1.q;
         mux_to_pads_o.gpio_00.drv2 = s_reg2hw.gpio_00_cfg.drv2.q;
         mux_to_pads_o.gpio_00.pde = s_reg2hw.gpio_00_cfg.pde.q;
         mux_to_pads_o.gpio_00.pp_odrain_selector = s_reg2hw.gpio_00_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_00.pudis = s_reg2hw.gpio_00_cfg.pudis.q;
         mux_to_pads_o.gpio_00.rxdis = s_reg2hw.gpio_00_cfg.rxdis.q;
         mux_to_pads_o.gpio_00.slw_pgm = s_reg2hw.gpio_00_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_00.trie = s_reg2hw.gpio_00_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_01
   always_comb begin
     unique case (s_reg2hw.gpio_01_mux_sel.q)
       PAD_MUX_GROUP_GPIO_01_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_01.chip2pad = s_reg2hw.gpio_01_cfg.chip2pad.q;
         mux_to_pads_o.gpio_01.drv0 = s_reg2hw.gpio_01_cfg.drv0.q;
         mux_to_pads_o.gpio_01.drv1 = s_reg2hw.gpio_01_cfg.drv1.q;
         mux_to_pads_o.gpio_01.drv2 = s_reg2hw.gpio_01_cfg.drv2.q;
         mux_to_pads_o.gpio_01.pde = s_reg2hw.gpio_01_cfg.pde.q;
         mux_to_pads_o.gpio_01.pp_odrain_selector = s_reg2hw.gpio_01_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_01.pudis = s_reg2hw.gpio_01_cfg.pudis.q;
         mux_to_pads_o.gpio_01.rxdis = s_reg2hw.gpio_01_cfg.rxdis.q;
         mux_to_pads_o.gpio_01.slw_pgm = s_reg2hw.gpio_01_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_01.trie = s_reg2hw.gpio_01_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_01_SEL_GPIO_GPIO01: begin
          mux_to_pads_o.gpio_01.chip2pad = port_signals_soc2pad_i.gpio.gpio01_out;
          mux_to_pads_o.gpio_01.drv0 = s_reg2hw.gpio_01_cfg.drv0.q;
          mux_to_pads_o.gpio_01.drv1 = s_reg2hw.gpio_01_cfg.drv1.q;
          mux_to_pads_o.gpio_01.drv2 = s_reg2hw.gpio_01_cfg.drv2.q;
          mux_to_pads_o.gpio_01.pde = s_reg2hw.gpio_01_cfg.pde.q;
          mux_to_pads_o.gpio_01.pp_odrain_selector = s_reg2hw.gpio_01_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_01.pudis = s_reg2hw.gpio_01_cfg.pudis.q;
          mux_to_pads_o.gpio_01.rxdis = port_signals_soc2pad_i.gpio.gpio01_tx_en;
          mux_to_pads_o.gpio_01.slw_pgm = s_reg2hw.gpio_01_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_01.trie = ~port_signals_soc2pad_i.gpio.gpio01_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_01.chip2pad = s_reg2hw.gpio_01_cfg.chip2pad.q;
         mux_to_pads_o.gpio_01.drv0 = s_reg2hw.gpio_01_cfg.drv0.q;
         mux_to_pads_o.gpio_01.drv1 = s_reg2hw.gpio_01_cfg.drv1.q;
         mux_to_pads_o.gpio_01.drv2 = s_reg2hw.gpio_01_cfg.drv2.q;
         mux_to_pads_o.gpio_01.pde = s_reg2hw.gpio_01_cfg.pde.q;
         mux_to_pads_o.gpio_01.pp_odrain_selector = s_reg2hw.gpio_01_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_01.pudis = s_reg2hw.gpio_01_cfg.pudis.q;
         mux_to_pads_o.gpio_01.rxdis = s_reg2hw.gpio_01_cfg.rxdis.q;
         mux_to_pads_o.gpio_01.slw_pgm = s_reg2hw.gpio_01_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_01.trie = s_reg2hw.gpio_01_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_02
   always_comb begin
     unique case (s_reg2hw.gpio_02_mux_sel.q)
       PAD_MUX_GROUP_GPIO_02_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_02.chip2pad = s_reg2hw.gpio_02_cfg.chip2pad.q;
         mux_to_pads_o.gpio_02.drv0 = s_reg2hw.gpio_02_cfg.drv0.q;
         mux_to_pads_o.gpio_02.drv1 = s_reg2hw.gpio_02_cfg.drv1.q;
         mux_to_pads_o.gpio_02.drv2 = s_reg2hw.gpio_02_cfg.drv2.q;
         mux_to_pads_o.gpio_02.pde = s_reg2hw.gpio_02_cfg.pde.q;
         mux_to_pads_o.gpio_02.pp_odrain_selector = s_reg2hw.gpio_02_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_02.pudis = s_reg2hw.gpio_02_cfg.pudis.q;
         mux_to_pads_o.gpio_02.rxdis = s_reg2hw.gpio_02_cfg.rxdis.q;
         mux_to_pads_o.gpio_02.slw_pgm = s_reg2hw.gpio_02_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_02.trie = s_reg2hw.gpio_02_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_02_SEL_GPIO_GPIO02: begin
          mux_to_pads_o.gpio_02.chip2pad = port_signals_soc2pad_i.gpio.gpio02_out;
          mux_to_pads_o.gpio_02.drv0 = s_reg2hw.gpio_02_cfg.drv0.q;
          mux_to_pads_o.gpio_02.drv1 = s_reg2hw.gpio_02_cfg.drv1.q;
          mux_to_pads_o.gpio_02.drv2 = s_reg2hw.gpio_02_cfg.drv2.q;
          mux_to_pads_o.gpio_02.pde = s_reg2hw.gpio_02_cfg.pde.q;
          mux_to_pads_o.gpio_02.pp_odrain_selector = s_reg2hw.gpio_02_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_02.pudis = s_reg2hw.gpio_02_cfg.pudis.q;
          mux_to_pads_o.gpio_02.rxdis = port_signals_soc2pad_i.gpio.gpio02_tx_en;
          mux_to_pads_o.gpio_02.slw_pgm = s_reg2hw.gpio_02_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_02.trie = ~port_signals_soc2pad_i.gpio.gpio02_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_02.chip2pad = s_reg2hw.gpio_02_cfg.chip2pad.q;
         mux_to_pads_o.gpio_02.drv0 = s_reg2hw.gpio_02_cfg.drv0.q;
         mux_to_pads_o.gpio_02.drv1 = s_reg2hw.gpio_02_cfg.drv1.q;
         mux_to_pads_o.gpio_02.drv2 = s_reg2hw.gpio_02_cfg.drv2.q;
         mux_to_pads_o.gpio_02.pde = s_reg2hw.gpio_02_cfg.pde.q;
         mux_to_pads_o.gpio_02.pp_odrain_selector = s_reg2hw.gpio_02_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_02.pudis = s_reg2hw.gpio_02_cfg.pudis.q;
         mux_to_pads_o.gpio_02.rxdis = s_reg2hw.gpio_02_cfg.rxdis.q;
         mux_to_pads_o.gpio_02.slw_pgm = s_reg2hw.gpio_02_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_02.trie = s_reg2hw.gpio_02_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_03
   always_comb begin
     unique case (s_reg2hw.gpio_03_mux_sel.q)
       PAD_MUX_GROUP_GPIO_03_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_03.chip2pad = s_reg2hw.gpio_03_cfg.chip2pad.q;
         mux_to_pads_o.gpio_03.drv0 = s_reg2hw.gpio_03_cfg.drv0.q;
         mux_to_pads_o.gpio_03.drv1 = s_reg2hw.gpio_03_cfg.drv1.q;
         mux_to_pads_o.gpio_03.drv2 = s_reg2hw.gpio_03_cfg.drv2.q;
         mux_to_pads_o.gpio_03.pde = s_reg2hw.gpio_03_cfg.pde.q;
         mux_to_pads_o.gpio_03.pp_odrain_selector = s_reg2hw.gpio_03_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_03.pudis = s_reg2hw.gpio_03_cfg.pudis.q;
         mux_to_pads_o.gpio_03.rxdis = s_reg2hw.gpio_03_cfg.rxdis.q;
         mux_to_pads_o.gpio_03.slw_pgm = s_reg2hw.gpio_03_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_03.trie = s_reg2hw.gpio_03_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_03_SEL_GPIO_GPIO03: begin
          mux_to_pads_o.gpio_03.chip2pad = port_signals_soc2pad_i.gpio.gpio03_out;
          mux_to_pads_o.gpio_03.drv0 = s_reg2hw.gpio_03_cfg.drv0.q;
          mux_to_pads_o.gpio_03.drv1 = s_reg2hw.gpio_03_cfg.drv1.q;
          mux_to_pads_o.gpio_03.drv2 = s_reg2hw.gpio_03_cfg.drv2.q;
          mux_to_pads_o.gpio_03.pde = s_reg2hw.gpio_03_cfg.pde.q;
          mux_to_pads_o.gpio_03.pp_odrain_selector = s_reg2hw.gpio_03_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_03.pudis = s_reg2hw.gpio_03_cfg.pudis.q;
          mux_to_pads_o.gpio_03.rxdis = port_signals_soc2pad_i.gpio.gpio03_tx_en;
          mux_to_pads_o.gpio_03.slw_pgm = s_reg2hw.gpio_03_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_03.trie = ~port_signals_soc2pad_i.gpio.gpio03_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_03.chip2pad = s_reg2hw.gpio_03_cfg.chip2pad.q;
         mux_to_pads_o.gpio_03.drv0 = s_reg2hw.gpio_03_cfg.drv0.q;
         mux_to_pads_o.gpio_03.drv1 = s_reg2hw.gpio_03_cfg.drv1.q;
         mux_to_pads_o.gpio_03.drv2 = s_reg2hw.gpio_03_cfg.drv2.q;
         mux_to_pads_o.gpio_03.pde = s_reg2hw.gpio_03_cfg.pde.q;
         mux_to_pads_o.gpio_03.pp_odrain_selector = s_reg2hw.gpio_03_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_03.pudis = s_reg2hw.gpio_03_cfg.pudis.q;
         mux_to_pads_o.gpio_03.rxdis = s_reg2hw.gpio_03_cfg.rxdis.q;
         mux_to_pads_o.gpio_03.slw_pgm = s_reg2hw.gpio_03_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_03.trie = s_reg2hw.gpio_03_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_04
   always_comb begin
     unique case (s_reg2hw.gpio_04_mux_sel.q)
       PAD_MUX_GROUP_GPIO_04_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_04.chip2pad = s_reg2hw.gpio_04_cfg.chip2pad.q;
         mux_to_pads_o.gpio_04.drv0 = s_reg2hw.gpio_04_cfg.drv0.q;
         mux_to_pads_o.gpio_04.drv1 = s_reg2hw.gpio_04_cfg.drv1.q;
         mux_to_pads_o.gpio_04.drv2 = s_reg2hw.gpio_04_cfg.drv2.q;
         mux_to_pads_o.gpio_04.pde = s_reg2hw.gpio_04_cfg.pde.q;
         mux_to_pads_o.gpio_04.pp_odrain_selector = s_reg2hw.gpio_04_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_04.pudis = s_reg2hw.gpio_04_cfg.pudis.q;
         mux_to_pads_o.gpio_04.rxdis = s_reg2hw.gpio_04_cfg.rxdis.q;
         mux_to_pads_o.gpio_04.slw_pgm = s_reg2hw.gpio_04_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_04.trie = s_reg2hw.gpio_04_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_04_SEL_GPIO_GPIO04: begin
          mux_to_pads_o.gpio_04.chip2pad = port_signals_soc2pad_i.gpio.gpio04_out;
          mux_to_pads_o.gpio_04.drv0 = s_reg2hw.gpio_04_cfg.drv0.q;
          mux_to_pads_o.gpio_04.drv1 = s_reg2hw.gpio_04_cfg.drv1.q;
          mux_to_pads_o.gpio_04.drv2 = s_reg2hw.gpio_04_cfg.drv2.q;
          mux_to_pads_o.gpio_04.pde = s_reg2hw.gpio_04_cfg.pde.q;
          mux_to_pads_o.gpio_04.pp_odrain_selector = s_reg2hw.gpio_04_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_04.pudis = s_reg2hw.gpio_04_cfg.pudis.q;
          mux_to_pads_o.gpio_04.rxdis = port_signals_soc2pad_i.gpio.gpio04_tx_en;
          mux_to_pads_o.gpio_04.slw_pgm = s_reg2hw.gpio_04_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_04.trie = ~port_signals_soc2pad_i.gpio.gpio04_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_04.chip2pad = s_reg2hw.gpio_04_cfg.chip2pad.q;
         mux_to_pads_o.gpio_04.drv0 = s_reg2hw.gpio_04_cfg.drv0.q;
         mux_to_pads_o.gpio_04.drv1 = s_reg2hw.gpio_04_cfg.drv1.q;
         mux_to_pads_o.gpio_04.drv2 = s_reg2hw.gpio_04_cfg.drv2.q;
         mux_to_pads_o.gpio_04.pde = s_reg2hw.gpio_04_cfg.pde.q;
         mux_to_pads_o.gpio_04.pp_odrain_selector = s_reg2hw.gpio_04_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_04.pudis = s_reg2hw.gpio_04_cfg.pudis.q;
         mux_to_pads_o.gpio_04.rxdis = s_reg2hw.gpio_04_cfg.rxdis.q;
         mux_to_pads_o.gpio_04.slw_pgm = s_reg2hw.gpio_04_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_04.trie = s_reg2hw.gpio_04_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_05
   always_comb begin
     unique case (s_reg2hw.gpio_05_mux_sel.q)
       PAD_MUX_GROUP_GPIO_05_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_05.chip2pad = s_reg2hw.gpio_05_cfg.chip2pad.q;
         mux_to_pads_o.gpio_05.drv0 = s_reg2hw.gpio_05_cfg.drv0.q;
         mux_to_pads_o.gpio_05.drv1 = s_reg2hw.gpio_05_cfg.drv1.q;
         mux_to_pads_o.gpio_05.drv2 = s_reg2hw.gpio_05_cfg.drv2.q;
         mux_to_pads_o.gpio_05.pde = s_reg2hw.gpio_05_cfg.pde.q;
         mux_to_pads_o.gpio_05.pp_odrain_selector = s_reg2hw.gpio_05_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_05.pudis = s_reg2hw.gpio_05_cfg.pudis.q;
         mux_to_pads_o.gpio_05.rxdis = s_reg2hw.gpio_05_cfg.rxdis.q;
         mux_to_pads_o.gpio_05.slw_pgm = s_reg2hw.gpio_05_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_05.trie = s_reg2hw.gpio_05_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_05_SEL_GPIO_GPIO05: begin
          mux_to_pads_o.gpio_05.chip2pad = port_signals_soc2pad_i.gpio.gpio05_out;
          mux_to_pads_o.gpio_05.drv0 = s_reg2hw.gpio_05_cfg.drv0.q;
          mux_to_pads_o.gpio_05.drv1 = s_reg2hw.gpio_05_cfg.drv1.q;
          mux_to_pads_o.gpio_05.drv2 = s_reg2hw.gpio_05_cfg.drv2.q;
          mux_to_pads_o.gpio_05.pde = s_reg2hw.gpio_05_cfg.pde.q;
          mux_to_pads_o.gpio_05.pp_odrain_selector = s_reg2hw.gpio_05_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_05.pudis = s_reg2hw.gpio_05_cfg.pudis.q;
          mux_to_pads_o.gpio_05.rxdis = port_signals_soc2pad_i.gpio.gpio05_tx_en;
          mux_to_pads_o.gpio_05.slw_pgm = s_reg2hw.gpio_05_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_05.trie = ~port_signals_soc2pad_i.gpio.gpio05_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_05.chip2pad = s_reg2hw.gpio_05_cfg.chip2pad.q;
         mux_to_pads_o.gpio_05.drv0 = s_reg2hw.gpio_05_cfg.drv0.q;
         mux_to_pads_o.gpio_05.drv1 = s_reg2hw.gpio_05_cfg.drv1.q;
         mux_to_pads_o.gpio_05.drv2 = s_reg2hw.gpio_05_cfg.drv2.q;
         mux_to_pads_o.gpio_05.pde = s_reg2hw.gpio_05_cfg.pde.q;
         mux_to_pads_o.gpio_05.pp_odrain_selector = s_reg2hw.gpio_05_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_05.pudis = s_reg2hw.gpio_05_cfg.pudis.q;
         mux_to_pads_o.gpio_05.rxdis = s_reg2hw.gpio_05_cfg.rxdis.q;
         mux_to_pads_o.gpio_05.slw_pgm = s_reg2hw.gpio_05_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_05.trie = s_reg2hw.gpio_05_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_06
   always_comb begin
     unique case (s_reg2hw.gpio_06_mux_sel.q)
       PAD_MUX_GROUP_GPIO_06_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_06.chip2pad = s_reg2hw.gpio_06_cfg.chip2pad.q;
         mux_to_pads_o.gpio_06.drv0 = s_reg2hw.gpio_06_cfg.drv0.q;
         mux_to_pads_o.gpio_06.drv1 = s_reg2hw.gpio_06_cfg.drv1.q;
         mux_to_pads_o.gpio_06.drv2 = s_reg2hw.gpio_06_cfg.drv2.q;
         mux_to_pads_o.gpio_06.pde = s_reg2hw.gpio_06_cfg.pde.q;
         mux_to_pads_o.gpio_06.pp_odrain_selector = s_reg2hw.gpio_06_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_06.pudis = s_reg2hw.gpio_06_cfg.pudis.q;
         mux_to_pads_o.gpio_06.rxdis = s_reg2hw.gpio_06_cfg.rxdis.q;
         mux_to_pads_o.gpio_06.slw_pgm = s_reg2hw.gpio_06_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_06.trie = s_reg2hw.gpio_06_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_06_SEL_GPIO_GPIO06: begin
          mux_to_pads_o.gpio_06.chip2pad = port_signals_soc2pad_i.gpio.gpio06_out;
          mux_to_pads_o.gpio_06.drv0 = s_reg2hw.gpio_06_cfg.drv0.q;
          mux_to_pads_o.gpio_06.drv1 = s_reg2hw.gpio_06_cfg.drv1.q;
          mux_to_pads_o.gpio_06.drv2 = s_reg2hw.gpio_06_cfg.drv2.q;
          mux_to_pads_o.gpio_06.pde = s_reg2hw.gpio_06_cfg.pde.q;
          mux_to_pads_o.gpio_06.pp_odrain_selector = s_reg2hw.gpio_06_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_06.pudis = s_reg2hw.gpio_06_cfg.pudis.q;
          mux_to_pads_o.gpio_06.rxdis = port_signals_soc2pad_i.gpio.gpio06_tx_en;
          mux_to_pads_o.gpio_06.slw_pgm = s_reg2hw.gpio_06_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_06.trie = ~port_signals_soc2pad_i.gpio.gpio06_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_06.chip2pad = s_reg2hw.gpio_06_cfg.chip2pad.q;
         mux_to_pads_o.gpio_06.drv0 = s_reg2hw.gpio_06_cfg.drv0.q;
         mux_to_pads_o.gpio_06.drv1 = s_reg2hw.gpio_06_cfg.drv1.q;
         mux_to_pads_o.gpio_06.drv2 = s_reg2hw.gpio_06_cfg.drv2.q;
         mux_to_pads_o.gpio_06.pde = s_reg2hw.gpio_06_cfg.pde.q;
         mux_to_pads_o.gpio_06.pp_odrain_selector = s_reg2hw.gpio_06_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_06.pudis = s_reg2hw.gpio_06_cfg.pudis.q;
         mux_to_pads_o.gpio_06.rxdis = s_reg2hw.gpio_06_cfg.rxdis.q;
         mux_to_pads_o.gpio_06.slw_pgm = s_reg2hw.gpio_06_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_06.trie = s_reg2hw.gpio_06_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_07
   always_comb begin
     unique case (s_reg2hw.gpio_07_mux_sel.q)
       PAD_MUX_GROUP_GPIO_07_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_07.chip2pad = s_reg2hw.gpio_07_cfg.chip2pad.q;
         mux_to_pads_o.gpio_07.drv0 = s_reg2hw.gpio_07_cfg.drv0.q;
         mux_to_pads_o.gpio_07.drv1 = s_reg2hw.gpio_07_cfg.drv1.q;
         mux_to_pads_o.gpio_07.drv2 = s_reg2hw.gpio_07_cfg.drv2.q;
         mux_to_pads_o.gpio_07.pde = s_reg2hw.gpio_07_cfg.pde.q;
         mux_to_pads_o.gpio_07.pp_odrain_selector = s_reg2hw.gpio_07_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_07.pudis = s_reg2hw.gpio_07_cfg.pudis.q;
         mux_to_pads_o.gpio_07.rxdis = s_reg2hw.gpio_07_cfg.rxdis.q;
         mux_to_pads_o.gpio_07.slw_pgm = s_reg2hw.gpio_07_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_07.trie = s_reg2hw.gpio_07_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_07_SEL_GPIO_GPIO07: begin
          mux_to_pads_o.gpio_07.chip2pad = port_signals_soc2pad_i.gpio.gpio07_out;
          mux_to_pads_o.gpio_07.drv0 = s_reg2hw.gpio_07_cfg.drv0.q;
          mux_to_pads_o.gpio_07.drv1 = s_reg2hw.gpio_07_cfg.drv1.q;
          mux_to_pads_o.gpio_07.drv2 = s_reg2hw.gpio_07_cfg.drv2.q;
          mux_to_pads_o.gpio_07.pde = s_reg2hw.gpio_07_cfg.pde.q;
          mux_to_pads_o.gpio_07.pp_odrain_selector = s_reg2hw.gpio_07_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_07.pudis = s_reg2hw.gpio_07_cfg.pudis.q;
          mux_to_pads_o.gpio_07.rxdis = port_signals_soc2pad_i.gpio.gpio07_tx_en;
          mux_to_pads_o.gpio_07.slw_pgm = s_reg2hw.gpio_07_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_07.trie = ~port_signals_soc2pad_i.gpio.gpio07_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_07.chip2pad = s_reg2hw.gpio_07_cfg.chip2pad.q;
         mux_to_pads_o.gpio_07.drv0 = s_reg2hw.gpio_07_cfg.drv0.q;
         mux_to_pads_o.gpio_07.drv1 = s_reg2hw.gpio_07_cfg.drv1.q;
         mux_to_pads_o.gpio_07.drv2 = s_reg2hw.gpio_07_cfg.drv2.q;
         mux_to_pads_o.gpio_07.pde = s_reg2hw.gpio_07_cfg.pde.q;
         mux_to_pads_o.gpio_07.pp_odrain_selector = s_reg2hw.gpio_07_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_07.pudis = s_reg2hw.gpio_07_cfg.pudis.q;
         mux_to_pads_o.gpio_07.rxdis = s_reg2hw.gpio_07_cfg.rxdis.q;
         mux_to_pads_o.gpio_07.slw_pgm = s_reg2hw.gpio_07_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_07.trie = s_reg2hw.gpio_07_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_08
   always_comb begin
     unique case (s_reg2hw.gpio_08_mux_sel.q)
       PAD_MUX_GROUP_GPIO_08_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_08.chip2pad = s_reg2hw.gpio_08_cfg.chip2pad.q;
         mux_to_pads_o.gpio_08.drv0 = s_reg2hw.gpio_08_cfg.drv0.q;
         mux_to_pads_o.gpio_08.drv1 = s_reg2hw.gpio_08_cfg.drv1.q;
         mux_to_pads_o.gpio_08.drv2 = s_reg2hw.gpio_08_cfg.drv2.q;
         mux_to_pads_o.gpio_08.pde = s_reg2hw.gpio_08_cfg.pde.q;
         mux_to_pads_o.gpio_08.pp_odrain_selector = s_reg2hw.gpio_08_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_08.pudis = s_reg2hw.gpio_08_cfg.pudis.q;
         mux_to_pads_o.gpio_08.rxdis = s_reg2hw.gpio_08_cfg.rxdis.q;
         mux_to_pads_o.gpio_08.slw_pgm = s_reg2hw.gpio_08_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_08.trie = s_reg2hw.gpio_08_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_08_SEL_GPIO_GPIO08: begin
          mux_to_pads_o.gpio_08.chip2pad = port_signals_soc2pad_i.gpio.gpio08_out;
          mux_to_pads_o.gpio_08.drv0 = s_reg2hw.gpio_08_cfg.drv0.q;
          mux_to_pads_o.gpio_08.drv1 = s_reg2hw.gpio_08_cfg.drv1.q;
          mux_to_pads_o.gpio_08.drv2 = s_reg2hw.gpio_08_cfg.drv2.q;
          mux_to_pads_o.gpio_08.pde = s_reg2hw.gpio_08_cfg.pde.q;
          mux_to_pads_o.gpio_08.pp_odrain_selector = s_reg2hw.gpio_08_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_08.pudis = s_reg2hw.gpio_08_cfg.pudis.q;
          mux_to_pads_o.gpio_08.rxdis = port_signals_soc2pad_i.gpio.gpio08_tx_en;
          mux_to_pads_o.gpio_08.slw_pgm = s_reg2hw.gpio_08_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_08.trie = ~port_signals_soc2pad_i.gpio.gpio08_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_08.chip2pad = s_reg2hw.gpio_08_cfg.chip2pad.q;
         mux_to_pads_o.gpio_08.drv0 = s_reg2hw.gpio_08_cfg.drv0.q;
         mux_to_pads_o.gpio_08.drv1 = s_reg2hw.gpio_08_cfg.drv1.q;
         mux_to_pads_o.gpio_08.drv2 = s_reg2hw.gpio_08_cfg.drv2.q;
         mux_to_pads_o.gpio_08.pde = s_reg2hw.gpio_08_cfg.pde.q;
         mux_to_pads_o.gpio_08.pp_odrain_selector = s_reg2hw.gpio_08_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_08.pudis = s_reg2hw.gpio_08_cfg.pudis.q;
         mux_to_pads_o.gpio_08.rxdis = s_reg2hw.gpio_08_cfg.rxdis.q;
         mux_to_pads_o.gpio_08.slw_pgm = s_reg2hw.gpio_08_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_08.trie = s_reg2hw.gpio_08_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_09
   always_comb begin
     unique case (s_reg2hw.gpio_09_mux_sel.q)
       PAD_MUX_GROUP_GPIO_09_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_09.chip2pad = s_reg2hw.gpio_09_cfg.chip2pad.q;
         mux_to_pads_o.gpio_09.drv0 = s_reg2hw.gpio_09_cfg.drv0.q;
         mux_to_pads_o.gpio_09.drv1 = s_reg2hw.gpio_09_cfg.drv1.q;
         mux_to_pads_o.gpio_09.drv2 = s_reg2hw.gpio_09_cfg.drv2.q;
         mux_to_pads_o.gpio_09.pde = s_reg2hw.gpio_09_cfg.pde.q;
         mux_to_pads_o.gpio_09.pp_odrain_selector = s_reg2hw.gpio_09_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_09.pudis = s_reg2hw.gpio_09_cfg.pudis.q;
         mux_to_pads_o.gpio_09.rxdis = s_reg2hw.gpio_09_cfg.rxdis.q;
         mux_to_pads_o.gpio_09.slw_pgm = s_reg2hw.gpio_09_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_09.trie = s_reg2hw.gpio_09_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_09_SEL_GPIO_GPIO09: begin
          mux_to_pads_o.gpio_09.chip2pad = port_signals_soc2pad_i.gpio.gpio09_out;
          mux_to_pads_o.gpio_09.drv0 = s_reg2hw.gpio_09_cfg.drv0.q;
          mux_to_pads_o.gpio_09.drv1 = s_reg2hw.gpio_09_cfg.drv1.q;
          mux_to_pads_o.gpio_09.drv2 = s_reg2hw.gpio_09_cfg.drv2.q;
          mux_to_pads_o.gpio_09.pde = s_reg2hw.gpio_09_cfg.pde.q;
          mux_to_pads_o.gpio_09.pp_odrain_selector = s_reg2hw.gpio_09_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_09.pudis = s_reg2hw.gpio_09_cfg.pudis.q;
          mux_to_pads_o.gpio_09.rxdis = port_signals_soc2pad_i.gpio.gpio09_tx_en;
          mux_to_pads_o.gpio_09.slw_pgm = s_reg2hw.gpio_09_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_09.trie = ~port_signals_soc2pad_i.gpio.gpio09_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_09.chip2pad = s_reg2hw.gpio_09_cfg.chip2pad.q;
         mux_to_pads_o.gpio_09.drv0 = s_reg2hw.gpio_09_cfg.drv0.q;
         mux_to_pads_o.gpio_09.drv1 = s_reg2hw.gpio_09_cfg.drv1.q;
         mux_to_pads_o.gpio_09.drv2 = s_reg2hw.gpio_09_cfg.drv2.q;
         mux_to_pads_o.gpio_09.pde = s_reg2hw.gpio_09_cfg.pde.q;
         mux_to_pads_o.gpio_09.pp_odrain_selector = s_reg2hw.gpio_09_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_09.pudis = s_reg2hw.gpio_09_cfg.pudis.q;
         mux_to_pads_o.gpio_09.rxdis = s_reg2hw.gpio_09_cfg.rxdis.q;
         mux_to_pads_o.gpio_09.slw_pgm = s_reg2hw.gpio_09_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_09.trie = s_reg2hw.gpio_09_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_10
   always_comb begin
     unique case (s_reg2hw.gpio_10_mux_sel.q)
       PAD_MUX_GROUP_GPIO_10_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_10.chip2pad = s_reg2hw.gpio_10_cfg.chip2pad.q;
         mux_to_pads_o.gpio_10.drv0 = s_reg2hw.gpio_10_cfg.drv0.q;
         mux_to_pads_o.gpio_10.drv1 = s_reg2hw.gpio_10_cfg.drv1.q;
         mux_to_pads_o.gpio_10.drv2 = s_reg2hw.gpio_10_cfg.drv2.q;
         mux_to_pads_o.gpio_10.pde = s_reg2hw.gpio_10_cfg.pde.q;
         mux_to_pads_o.gpio_10.pp_odrain_selector = s_reg2hw.gpio_10_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_10.pudis = s_reg2hw.gpio_10_cfg.pudis.q;
         mux_to_pads_o.gpio_10.rxdis = s_reg2hw.gpio_10_cfg.rxdis.q;
         mux_to_pads_o.gpio_10.slw_pgm = s_reg2hw.gpio_10_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_10.trie = s_reg2hw.gpio_10_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_10_SEL_GPIO_GPIO10: begin
          mux_to_pads_o.gpio_10.chip2pad = port_signals_soc2pad_i.gpio.gpio10_out;
          mux_to_pads_o.gpio_10.drv0 = s_reg2hw.gpio_10_cfg.drv0.q;
          mux_to_pads_o.gpio_10.drv1 = s_reg2hw.gpio_10_cfg.drv1.q;
          mux_to_pads_o.gpio_10.drv2 = s_reg2hw.gpio_10_cfg.drv2.q;
          mux_to_pads_o.gpio_10.pde = s_reg2hw.gpio_10_cfg.pde.q;
          mux_to_pads_o.gpio_10.pp_odrain_selector = s_reg2hw.gpio_10_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_10.pudis = s_reg2hw.gpio_10_cfg.pudis.q;
          mux_to_pads_o.gpio_10.rxdis = port_signals_soc2pad_i.gpio.gpio10_tx_en;
          mux_to_pads_o.gpio_10.slw_pgm = s_reg2hw.gpio_10_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_10.trie = ~port_signals_soc2pad_i.gpio.gpio10_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_10.chip2pad = s_reg2hw.gpio_10_cfg.chip2pad.q;
         mux_to_pads_o.gpio_10.drv0 = s_reg2hw.gpio_10_cfg.drv0.q;
         mux_to_pads_o.gpio_10.drv1 = s_reg2hw.gpio_10_cfg.drv1.q;
         mux_to_pads_o.gpio_10.drv2 = s_reg2hw.gpio_10_cfg.drv2.q;
         mux_to_pads_o.gpio_10.pde = s_reg2hw.gpio_10_cfg.pde.q;
         mux_to_pads_o.gpio_10.pp_odrain_selector = s_reg2hw.gpio_10_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_10.pudis = s_reg2hw.gpio_10_cfg.pudis.q;
         mux_to_pads_o.gpio_10.rxdis = s_reg2hw.gpio_10_cfg.rxdis.q;
         mux_to_pads_o.gpio_10.slw_pgm = s_reg2hw.gpio_10_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_10.trie = s_reg2hw.gpio_10_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_11
   always_comb begin
     unique case (s_reg2hw.gpio_11_mux_sel.q)
       PAD_MUX_GROUP_GPIO_11_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_11.chip2pad = s_reg2hw.gpio_11_cfg.chip2pad.q;
         mux_to_pads_o.gpio_11.drv0 = s_reg2hw.gpio_11_cfg.drv0.q;
         mux_to_pads_o.gpio_11.drv1 = s_reg2hw.gpio_11_cfg.drv1.q;
         mux_to_pads_o.gpio_11.drv2 = s_reg2hw.gpio_11_cfg.drv2.q;
         mux_to_pads_o.gpio_11.pde = s_reg2hw.gpio_11_cfg.pde.q;
         mux_to_pads_o.gpio_11.pp_odrain_selector = s_reg2hw.gpio_11_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_11.pudis = s_reg2hw.gpio_11_cfg.pudis.q;
         mux_to_pads_o.gpio_11.rxdis = s_reg2hw.gpio_11_cfg.rxdis.q;
         mux_to_pads_o.gpio_11.slw_pgm = s_reg2hw.gpio_11_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_11.trie = s_reg2hw.gpio_11_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_11_SEL_GPIO_GPIO11: begin
          mux_to_pads_o.gpio_11.chip2pad = port_signals_soc2pad_i.gpio.gpio11_out;
          mux_to_pads_o.gpio_11.drv0 = s_reg2hw.gpio_11_cfg.drv0.q;
          mux_to_pads_o.gpio_11.drv1 = s_reg2hw.gpio_11_cfg.drv1.q;
          mux_to_pads_o.gpio_11.drv2 = s_reg2hw.gpio_11_cfg.drv2.q;
          mux_to_pads_o.gpio_11.pde = s_reg2hw.gpio_11_cfg.pde.q;
          mux_to_pads_o.gpio_11.pp_odrain_selector = s_reg2hw.gpio_11_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_11.pudis = s_reg2hw.gpio_11_cfg.pudis.q;
          mux_to_pads_o.gpio_11.rxdis = port_signals_soc2pad_i.gpio.gpio11_tx_en;
          mux_to_pads_o.gpio_11.slw_pgm = s_reg2hw.gpio_11_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_11.trie = ~port_signals_soc2pad_i.gpio.gpio11_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_11.chip2pad = s_reg2hw.gpio_11_cfg.chip2pad.q;
         mux_to_pads_o.gpio_11.drv0 = s_reg2hw.gpio_11_cfg.drv0.q;
         mux_to_pads_o.gpio_11.drv1 = s_reg2hw.gpio_11_cfg.drv1.q;
         mux_to_pads_o.gpio_11.drv2 = s_reg2hw.gpio_11_cfg.drv2.q;
         mux_to_pads_o.gpio_11.pde = s_reg2hw.gpio_11_cfg.pde.q;
         mux_to_pads_o.gpio_11.pp_odrain_selector = s_reg2hw.gpio_11_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_11.pudis = s_reg2hw.gpio_11_cfg.pudis.q;
         mux_to_pads_o.gpio_11.rxdis = s_reg2hw.gpio_11_cfg.rxdis.q;
         mux_to_pads_o.gpio_11.slw_pgm = s_reg2hw.gpio_11_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_11.trie = s_reg2hw.gpio_11_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_12
   always_comb begin
     unique case (s_reg2hw.gpio_12_mux_sel.q)
       PAD_MUX_GROUP_GPIO_12_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_12.chip2pad = s_reg2hw.gpio_12_cfg.chip2pad.q;
         mux_to_pads_o.gpio_12.drv0 = s_reg2hw.gpio_12_cfg.drv0.q;
         mux_to_pads_o.gpio_12.drv1 = s_reg2hw.gpio_12_cfg.drv1.q;
         mux_to_pads_o.gpio_12.drv2 = s_reg2hw.gpio_12_cfg.drv2.q;
         mux_to_pads_o.gpio_12.pde = s_reg2hw.gpio_12_cfg.pde.q;
         mux_to_pads_o.gpio_12.pp_odrain_selector = s_reg2hw.gpio_12_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_12.pudis = s_reg2hw.gpio_12_cfg.pudis.q;
         mux_to_pads_o.gpio_12.rxdis = s_reg2hw.gpio_12_cfg.rxdis.q;
         mux_to_pads_o.gpio_12.slw_pgm = s_reg2hw.gpio_12_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_12.trie = s_reg2hw.gpio_12_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_12_SEL_GPIO_GPIO12: begin
          mux_to_pads_o.gpio_12.chip2pad = port_signals_soc2pad_i.gpio.gpio12_out;
          mux_to_pads_o.gpio_12.drv0 = s_reg2hw.gpio_12_cfg.drv0.q;
          mux_to_pads_o.gpio_12.drv1 = s_reg2hw.gpio_12_cfg.drv1.q;
          mux_to_pads_o.gpio_12.drv2 = s_reg2hw.gpio_12_cfg.drv2.q;
          mux_to_pads_o.gpio_12.pde = s_reg2hw.gpio_12_cfg.pde.q;
          mux_to_pads_o.gpio_12.pp_odrain_selector = s_reg2hw.gpio_12_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_12.pudis = s_reg2hw.gpio_12_cfg.pudis.q;
          mux_to_pads_o.gpio_12.rxdis = port_signals_soc2pad_i.gpio.gpio12_tx_en;
          mux_to_pads_o.gpio_12.slw_pgm = s_reg2hw.gpio_12_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_12.trie = ~port_signals_soc2pad_i.gpio.gpio12_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_12.chip2pad = s_reg2hw.gpio_12_cfg.chip2pad.q;
         mux_to_pads_o.gpio_12.drv0 = s_reg2hw.gpio_12_cfg.drv0.q;
         mux_to_pads_o.gpio_12.drv1 = s_reg2hw.gpio_12_cfg.drv1.q;
         mux_to_pads_o.gpio_12.drv2 = s_reg2hw.gpio_12_cfg.drv2.q;
         mux_to_pads_o.gpio_12.pde = s_reg2hw.gpio_12_cfg.pde.q;
         mux_to_pads_o.gpio_12.pp_odrain_selector = s_reg2hw.gpio_12_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_12.pudis = s_reg2hw.gpio_12_cfg.pudis.q;
         mux_to_pads_o.gpio_12.rxdis = s_reg2hw.gpio_12_cfg.rxdis.q;
         mux_to_pads_o.gpio_12.slw_pgm = s_reg2hw.gpio_12_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_12.trie = s_reg2hw.gpio_12_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_13
   always_comb begin
     unique case (s_reg2hw.gpio_13_mux_sel.q)
       PAD_MUX_GROUP_GPIO_13_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_13.chip2pad = s_reg2hw.gpio_13_cfg.chip2pad.q;
         mux_to_pads_o.gpio_13.drv0 = s_reg2hw.gpio_13_cfg.drv0.q;
         mux_to_pads_o.gpio_13.drv1 = s_reg2hw.gpio_13_cfg.drv1.q;
         mux_to_pads_o.gpio_13.drv2 = s_reg2hw.gpio_13_cfg.drv2.q;
         mux_to_pads_o.gpio_13.pde = s_reg2hw.gpio_13_cfg.pde.q;
         mux_to_pads_o.gpio_13.pp_odrain_selector = s_reg2hw.gpio_13_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_13.pudis = s_reg2hw.gpio_13_cfg.pudis.q;
         mux_to_pads_o.gpio_13.rxdis = s_reg2hw.gpio_13_cfg.rxdis.q;
         mux_to_pads_o.gpio_13.slw_pgm = s_reg2hw.gpio_13_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_13.trie = s_reg2hw.gpio_13_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_13_SEL_GPIO_GPIO13: begin
          mux_to_pads_o.gpio_13.chip2pad = port_signals_soc2pad_i.gpio.gpio13_out;
          mux_to_pads_o.gpio_13.drv0 = s_reg2hw.gpio_13_cfg.drv0.q;
          mux_to_pads_o.gpio_13.drv1 = s_reg2hw.gpio_13_cfg.drv1.q;
          mux_to_pads_o.gpio_13.drv2 = s_reg2hw.gpio_13_cfg.drv2.q;
          mux_to_pads_o.gpio_13.pde = s_reg2hw.gpio_13_cfg.pde.q;
          mux_to_pads_o.gpio_13.pp_odrain_selector = s_reg2hw.gpio_13_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_13.pudis = s_reg2hw.gpio_13_cfg.pudis.q;
          mux_to_pads_o.gpio_13.rxdis = port_signals_soc2pad_i.gpio.gpio13_tx_en;
          mux_to_pads_o.gpio_13.slw_pgm = s_reg2hw.gpio_13_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_13.trie = ~port_signals_soc2pad_i.gpio.gpio13_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_13.chip2pad = s_reg2hw.gpio_13_cfg.chip2pad.q;
         mux_to_pads_o.gpio_13.drv0 = s_reg2hw.gpio_13_cfg.drv0.q;
         mux_to_pads_o.gpio_13.drv1 = s_reg2hw.gpio_13_cfg.drv1.q;
         mux_to_pads_o.gpio_13.drv2 = s_reg2hw.gpio_13_cfg.drv2.q;
         mux_to_pads_o.gpio_13.pde = s_reg2hw.gpio_13_cfg.pde.q;
         mux_to_pads_o.gpio_13.pp_odrain_selector = s_reg2hw.gpio_13_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_13.pudis = s_reg2hw.gpio_13_cfg.pudis.q;
         mux_to_pads_o.gpio_13.rxdis = s_reg2hw.gpio_13_cfg.rxdis.q;
         mux_to_pads_o.gpio_13.slw_pgm = s_reg2hw.gpio_13_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_13.trie = s_reg2hw.gpio_13_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_14
   always_comb begin
     unique case (s_reg2hw.gpio_14_mux_sel.q)
       PAD_MUX_GROUP_GPIO_14_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_14.chip2pad = s_reg2hw.gpio_14_cfg.chip2pad.q;
         mux_to_pads_o.gpio_14.drv0 = s_reg2hw.gpio_14_cfg.drv0.q;
         mux_to_pads_o.gpio_14.drv1 = s_reg2hw.gpio_14_cfg.drv1.q;
         mux_to_pads_o.gpio_14.drv2 = s_reg2hw.gpio_14_cfg.drv2.q;
         mux_to_pads_o.gpio_14.pde = s_reg2hw.gpio_14_cfg.pde.q;
         mux_to_pads_o.gpio_14.pp_odrain_selector = s_reg2hw.gpio_14_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_14.pudis = s_reg2hw.gpio_14_cfg.pudis.q;
         mux_to_pads_o.gpio_14.rxdis = s_reg2hw.gpio_14_cfg.rxdis.q;
         mux_to_pads_o.gpio_14.slw_pgm = s_reg2hw.gpio_14_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_14.trie = s_reg2hw.gpio_14_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_14_SEL_GPIO_GPIO14: begin
          mux_to_pads_o.gpio_14.chip2pad = port_signals_soc2pad_i.gpio.gpio14_out;
          mux_to_pads_o.gpio_14.drv0 = s_reg2hw.gpio_14_cfg.drv0.q;
          mux_to_pads_o.gpio_14.drv1 = s_reg2hw.gpio_14_cfg.drv1.q;
          mux_to_pads_o.gpio_14.drv2 = s_reg2hw.gpio_14_cfg.drv2.q;
          mux_to_pads_o.gpio_14.pde = s_reg2hw.gpio_14_cfg.pde.q;
          mux_to_pads_o.gpio_14.pp_odrain_selector = s_reg2hw.gpio_14_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_14.pudis = s_reg2hw.gpio_14_cfg.pudis.q;
          mux_to_pads_o.gpio_14.rxdis = port_signals_soc2pad_i.gpio.gpio14_tx_en;
          mux_to_pads_o.gpio_14.slw_pgm = s_reg2hw.gpio_14_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_14.trie = ~port_signals_soc2pad_i.gpio.gpio14_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_14.chip2pad = s_reg2hw.gpio_14_cfg.chip2pad.q;
         mux_to_pads_o.gpio_14.drv0 = s_reg2hw.gpio_14_cfg.drv0.q;
         mux_to_pads_o.gpio_14.drv1 = s_reg2hw.gpio_14_cfg.drv1.q;
         mux_to_pads_o.gpio_14.drv2 = s_reg2hw.gpio_14_cfg.drv2.q;
         mux_to_pads_o.gpio_14.pde = s_reg2hw.gpio_14_cfg.pde.q;
         mux_to_pads_o.gpio_14.pp_odrain_selector = s_reg2hw.gpio_14_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_14.pudis = s_reg2hw.gpio_14_cfg.pudis.q;
         mux_to_pads_o.gpio_14.rxdis = s_reg2hw.gpio_14_cfg.rxdis.q;
         mux_to_pads_o.gpio_14.slw_pgm = s_reg2hw.gpio_14_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_14.trie = s_reg2hw.gpio_14_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad gpio_15
   always_comb begin
     unique case (s_reg2hw.gpio_15_mux_sel.q)
       PAD_MUX_GROUP_GPIO_15_SEL_DEFAULT: begin
         mux_to_pads_o.gpio_15.chip2pad = s_reg2hw.gpio_15_cfg.chip2pad.q;
         mux_to_pads_o.gpio_15.drv0 = s_reg2hw.gpio_15_cfg.drv0.q;
         mux_to_pads_o.gpio_15.drv1 = s_reg2hw.gpio_15_cfg.drv1.q;
         mux_to_pads_o.gpio_15.drv2 = s_reg2hw.gpio_15_cfg.drv2.q;
         mux_to_pads_o.gpio_15.pde = s_reg2hw.gpio_15_cfg.pde.q;
         mux_to_pads_o.gpio_15.pp_odrain_selector = s_reg2hw.gpio_15_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_15.pudis = s_reg2hw.gpio_15_cfg.pudis.q;
         mux_to_pads_o.gpio_15.rxdis = s_reg2hw.gpio_15_cfg.rxdis.q;
         mux_to_pads_o.gpio_15.slw_pgm = s_reg2hw.gpio_15_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_15.trie = s_reg2hw.gpio_15_cfg.trie.q;
       end
       PAD_MUX_GROUP_GPIO_15_SEL_GPIO_GPIO15: begin
          mux_to_pads_o.gpio_15.chip2pad = port_signals_soc2pad_i.gpio.gpio15_out;
          mux_to_pads_o.gpio_15.drv0 = s_reg2hw.gpio_15_cfg.drv0.q;
          mux_to_pads_o.gpio_15.drv1 = s_reg2hw.gpio_15_cfg.drv1.q;
          mux_to_pads_o.gpio_15.drv2 = s_reg2hw.gpio_15_cfg.drv2.q;
          mux_to_pads_o.gpio_15.pde = s_reg2hw.gpio_15_cfg.pde.q;
          mux_to_pads_o.gpio_15.pp_odrain_selector = s_reg2hw.gpio_15_cfg.pp_odrain_selector.q;
          mux_to_pads_o.gpio_15.pudis = s_reg2hw.gpio_15_cfg.pudis.q;
          mux_to_pads_o.gpio_15.rxdis = port_signals_soc2pad_i.gpio.gpio15_tx_en;
          mux_to_pads_o.gpio_15.slw_pgm = s_reg2hw.gpio_15_cfg.slw_pgm.q;
          mux_to_pads_o.gpio_15.trie = ~port_signals_soc2pad_i.gpio.gpio15_tx_en;
       end
       default: begin
         mux_to_pads_o.gpio_15.chip2pad = s_reg2hw.gpio_15_cfg.chip2pad.q;
         mux_to_pads_o.gpio_15.drv0 = s_reg2hw.gpio_15_cfg.drv0.q;
         mux_to_pads_o.gpio_15.drv1 = s_reg2hw.gpio_15_cfg.drv1.q;
         mux_to_pads_o.gpio_15.drv2 = s_reg2hw.gpio_15_cfg.drv2.q;
         mux_to_pads_o.gpio_15.pde = s_reg2hw.gpio_15_cfg.pde.q;
         mux_to_pads_o.gpio_15.pp_odrain_selector = s_reg2hw.gpio_15_cfg.pp_odrain_selector.q;
         mux_to_pads_o.gpio_15.pudis = s_reg2hw.gpio_15_cfg.pudis.q;
         mux_to_pads_o.gpio_15.rxdis = s_reg2hw.gpio_15_cfg.rxdis.q;
         mux_to_pads_o.gpio_15.slw_pgm = s_reg2hw.gpio_15_cfg.slw_pgm.q;
         mux_to_pads_o.gpio_15.trie = s_reg2hw.gpio_15_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_00
   always_comb begin
     unique case (s_reg2hw.periph_00_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_00_SEL_DEFAULT: begin
         mux_to_pads_o.periph_00.chip2pad = s_reg2hw.periph_00_cfg.chip2pad.q;
         mux_to_pads_o.periph_00.drv0 = s_reg2hw.periph_00_cfg.drv0.q;
         mux_to_pads_o.periph_00.drv1 = s_reg2hw.periph_00_cfg.drv1.q;
         mux_to_pads_o.periph_00.drv2 = s_reg2hw.periph_00_cfg.drv2.q;
         mux_to_pads_o.periph_00.pde = s_reg2hw.periph_00_cfg.pde.q;
         mux_to_pads_o.periph_00.pp_odrain_selector = s_reg2hw.periph_00_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_00.pudis = s_reg2hw.periph_00_cfg.pudis.q;
         mux_to_pads_o.periph_00.rxdis = s_reg2hw.periph_00_cfg.rxdis.q;
         mux_to_pads_o.periph_00.slw_pgm = s_reg2hw.periph_00_cfg.slw_pgm.q;
         mux_to_pads_o.periph_00.trie = s_reg2hw.periph_00_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_00_SEL_CAN0_TX: begin
          mux_to_pads_o.periph_00.chip2pad = port_signals_soc2pad_i.can0.tx_i;
          mux_to_pads_o.periph_00.drv0 = s_reg2hw.periph_00_cfg.drv0.q;
          mux_to_pads_o.periph_00.drv1 = s_reg2hw.periph_00_cfg.drv1.q;
          mux_to_pads_o.periph_00.drv2 = s_reg2hw.periph_00_cfg.drv2.q;
          mux_to_pads_o.periph_00.pde = s_reg2hw.periph_00_cfg.pde.q;
          mux_to_pads_o.periph_00.pp_odrain_selector = s_reg2hw.periph_00_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_00.pudis = s_reg2hw.periph_00_cfg.pudis.q;
          mux_to_pads_o.periph_00.rxdis = 1'b1;
          mux_to_pads_o.periph_00.slw_pgm = s_reg2hw.periph_00_cfg.slw_pgm.q;
          mux_to_pads_o.periph_00.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.periph_00.chip2pad = s_reg2hw.periph_00_cfg.chip2pad.q;
         mux_to_pads_o.periph_00.drv0 = s_reg2hw.periph_00_cfg.drv0.q;
         mux_to_pads_o.periph_00.drv1 = s_reg2hw.periph_00_cfg.drv1.q;
         mux_to_pads_o.periph_00.drv2 = s_reg2hw.periph_00_cfg.drv2.q;
         mux_to_pads_o.periph_00.pde = s_reg2hw.periph_00_cfg.pde.q;
         mux_to_pads_o.periph_00.pp_odrain_selector = s_reg2hw.periph_00_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_00.pudis = s_reg2hw.periph_00_cfg.pudis.q;
         mux_to_pads_o.periph_00.rxdis = s_reg2hw.periph_00_cfg.rxdis.q;
         mux_to_pads_o.periph_00.slw_pgm = s_reg2hw.periph_00_cfg.slw_pgm.q;
         mux_to_pads_o.periph_00.trie = s_reg2hw.periph_00_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_01
   always_comb begin
     unique case (s_reg2hw.periph_01_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_01_SEL_DEFAULT: begin
         mux_to_pads_o.periph_01.chip2pad = s_reg2hw.periph_01_cfg.chip2pad.q;
         mux_to_pads_o.periph_01.drv0 = s_reg2hw.periph_01_cfg.drv0.q;
         mux_to_pads_o.periph_01.drv1 = s_reg2hw.periph_01_cfg.drv1.q;
         mux_to_pads_o.periph_01.drv2 = s_reg2hw.periph_01_cfg.drv2.q;
         mux_to_pads_o.periph_01.pde = s_reg2hw.periph_01_cfg.pde.q;
         mux_to_pads_o.periph_01.pp_odrain_selector = s_reg2hw.periph_01_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_01.pudis = s_reg2hw.periph_01_cfg.pudis.q;
         mux_to_pads_o.periph_01.rxdis = s_reg2hw.periph_01_cfg.rxdis.q;
         mux_to_pads_o.periph_01.slw_pgm = s_reg2hw.periph_01_cfg.slw_pgm.q;
         mux_to_pads_o.periph_01.trie = s_reg2hw.periph_01_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_01_SEL_CAN0_RX: begin
          mux_to_pads_o.periph_01.chip2pad = s_reg2hw.periph_01_cfg.chip2pad.q;
          mux_to_pads_o.periph_01.drv0 = s_reg2hw.periph_01_cfg.drv0.q;
          mux_to_pads_o.periph_01.drv1 = s_reg2hw.periph_01_cfg.drv1.q;
          mux_to_pads_o.periph_01.drv2 = s_reg2hw.periph_01_cfg.drv2.q;
          mux_to_pads_o.periph_01.pde = s_reg2hw.periph_01_cfg.pde.q;
          mux_to_pads_o.periph_01.pp_odrain_selector = s_reg2hw.periph_01_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_01.pudis = s_reg2hw.periph_01_cfg.pudis.q;
          mux_to_pads_o.periph_01.rxdis = 1'b0;
          mux_to_pads_o.periph_01.slw_pgm = s_reg2hw.periph_01_cfg.slw_pgm.q;
          mux_to_pads_o.periph_01.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.periph_01.chip2pad = s_reg2hw.periph_01_cfg.chip2pad.q;
         mux_to_pads_o.periph_01.drv0 = s_reg2hw.periph_01_cfg.drv0.q;
         mux_to_pads_o.periph_01.drv1 = s_reg2hw.periph_01_cfg.drv1.q;
         mux_to_pads_o.periph_01.drv2 = s_reg2hw.periph_01_cfg.drv2.q;
         mux_to_pads_o.periph_01.pde = s_reg2hw.periph_01_cfg.pde.q;
         mux_to_pads_o.periph_01.pp_odrain_selector = s_reg2hw.periph_01_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_01.pudis = s_reg2hw.periph_01_cfg.pudis.q;
         mux_to_pads_o.periph_01.rxdis = s_reg2hw.periph_01_cfg.rxdis.q;
         mux_to_pads_o.periph_01.slw_pgm = s_reg2hw.periph_01_cfg.slw_pgm.q;
         mux_to_pads_o.periph_01.trie = s_reg2hw.periph_01_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_02
   always_comb begin
     unique case (s_reg2hw.periph_02_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_02_SEL_DEFAULT: begin
         mux_to_pads_o.periph_02.chip2pad = s_reg2hw.periph_02_cfg.chip2pad.q;
         mux_to_pads_o.periph_02.drv0 = s_reg2hw.periph_02_cfg.drv0.q;
         mux_to_pads_o.periph_02.drv1 = s_reg2hw.periph_02_cfg.drv1.q;
         mux_to_pads_o.periph_02.drv2 = s_reg2hw.periph_02_cfg.drv2.q;
         mux_to_pads_o.periph_02.pde = s_reg2hw.periph_02_cfg.pde.q;
         mux_to_pads_o.periph_02.pp_odrain_selector = s_reg2hw.periph_02_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_02.pudis = s_reg2hw.periph_02_cfg.pudis.q;
         mux_to_pads_o.periph_02.rxdis = s_reg2hw.periph_02_cfg.rxdis.q;
         mux_to_pads_o.periph_02.slw_pgm = s_reg2hw.periph_02_cfg.slw_pgm.q;
         mux_to_pads_o.periph_02.trie = s_reg2hw.periph_02_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_02_SEL_ETHERNET_ETH_RST: begin
          mux_to_pads_o.periph_02.chip2pad = port_signals_soc2pad_i.ethernet.eth_rstn_i;
          mux_to_pads_o.periph_02.drv0 = s_reg2hw.periph_02_cfg.drv0.q;
          mux_to_pads_o.periph_02.drv1 = s_reg2hw.periph_02_cfg.drv1.q;
          mux_to_pads_o.periph_02.drv2 = s_reg2hw.periph_02_cfg.drv2.q;
          mux_to_pads_o.periph_02.pde = s_reg2hw.periph_02_cfg.pde.q;
          mux_to_pads_o.periph_02.pp_odrain_selector = s_reg2hw.periph_02_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_02.pudis = 1'b1;
          mux_to_pads_o.periph_02.rxdis = 1'b1;
          mux_to_pads_o.periph_02.slw_pgm = s_reg2hw.periph_02_cfg.slw_pgm.q;
          mux_to_pads_o.periph_02.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.periph_02.chip2pad = s_reg2hw.periph_02_cfg.chip2pad.q;
         mux_to_pads_o.periph_02.drv0 = s_reg2hw.periph_02_cfg.drv0.q;
         mux_to_pads_o.periph_02.drv1 = s_reg2hw.periph_02_cfg.drv1.q;
         mux_to_pads_o.periph_02.drv2 = s_reg2hw.periph_02_cfg.drv2.q;
         mux_to_pads_o.periph_02.pde = s_reg2hw.periph_02_cfg.pde.q;
         mux_to_pads_o.periph_02.pp_odrain_selector = s_reg2hw.periph_02_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_02.pudis = s_reg2hw.periph_02_cfg.pudis.q;
         mux_to_pads_o.periph_02.rxdis = s_reg2hw.periph_02_cfg.rxdis.q;
         mux_to_pads_o.periph_02.slw_pgm = s_reg2hw.periph_02_cfg.slw_pgm.q;
         mux_to_pads_o.periph_02.trie = s_reg2hw.periph_02_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_03
   always_comb begin
     unique case (s_reg2hw.periph_03_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_03_SEL_DEFAULT: begin
         mux_to_pads_o.periph_03.chip2pad = s_reg2hw.periph_03_cfg.chip2pad.q;
         mux_to_pads_o.periph_03.drv0 = s_reg2hw.periph_03_cfg.drv0.q;
         mux_to_pads_o.periph_03.drv1 = s_reg2hw.periph_03_cfg.drv1.q;
         mux_to_pads_o.periph_03.drv2 = s_reg2hw.periph_03_cfg.drv2.q;
         mux_to_pads_o.periph_03.pde = s_reg2hw.periph_03_cfg.pde.q;
         mux_to_pads_o.periph_03.pp_odrain_selector = s_reg2hw.periph_03_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_03.pudis = s_reg2hw.periph_03_cfg.pudis.q;
         mux_to_pads_o.periph_03.rxdis = s_reg2hw.periph_03_cfg.rxdis.q;
         mux_to_pads_o.periph_03.slw_pgm = s_reg2hw.periph_03_cfg.slw_pgm.q;
         mux_to_pads_o.periph_03.trie = s_reg2hw.periph_03_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_03_SEL_ETHERNET_ETH_TXCK: begin
          mux_to_pads_o.periph_03.chip2pad = port_signals_soc2pad_i.ethernet.eth_txck_i;
          mux_to_pads_o.periph_03.drv0 = s_reg2hw.periph_03_cfg.drv0.q;
          mux_to_pads_o.periph_03.drv1 = s_reg2hw.periph_03_cfg.drv1.q;
          mux_to_pads_o.periph_03.drv2 = s_reg2hw.periph_03_cfg.drv2.q;
          mux_to_pads_o.periph_03.pde = s_reg2hw.periph_03_cfg.pde.q;
          mux_to_pads_o.periph_03.pp_odrain_selector = s_reg2hw.periph_03_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_03.pudis = 1'b1;
          mux_to_pads_o.periph_03.rxdis = 1'b1;
          mux_to_pads_o.periph_03.slw_pgm = s_reg2hw.periph_03_cfg.slw_pgm.q;
          mux_to_pads_o.periph_03.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.periph_03.chip2pad = s_reg2hw.periph_03_cfg.chip2pad.q;
         mux_to_pads_o.periph_03.drv0 = s_reg2hw.periph_03_cfg.drv0.q;
         mux_to_pads_o.periph_03.drv1 = s_reg2hw.periph_03_cfg.drv1.q;
         mux_to_pads_o.periph_03.drv2 = s_reg2hw.periph_03_cfg.drv2.q;
         mux_to_pads_o.periph_03.pde = s_reg2hw.periph_03_cfg.pde.q;
         mux_to_pads_o.periph_03.pp_odrain_selector = s_reg2hw.periph_03_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_03.pudis = s_reg2hw.periph_03_cfg.pudis.q;
         mux_to_pads_o.periph_03.rxdis = s_reg2hw.periph_03_cfg.rxdis.q;
         mux_to_pads_o.periph_03.slw_pgm = s_reg2hw.periph_03_cfg.slw_pgm.q;
         mux_to_pads_o.periph_03.trie = s_reg2hw.periph_03_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_04
   always_comb begin
     unique case (s_reg2hw.periph_04_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_04_SEL_DEFAULT: begin
         mux_to_pads_o.periph_04.chip2pad = s_reg2hw.periph_04_cfg.chip2pad.q;
         mux_to_pads_o.periph_04.drv0 = s_reg2hw.periph_04_cfg.drv0.q;
         mux_to_pads_o.periph_04.drv1 = s_reg2hw.periph_04_cfg.drv1.q;
         mux_to_pads_o.periph_04.drv2 = s_reg2hw.periph_04_cfg.drv2.q;
         mux_to_pads_o.periph_04.pde = s_reg2hw.periph_04_cfg.pde.q;
         mux_to_pads_o.periph_04.pp_odrain_selector = s_reg2hw.periph_04_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_04.pudis = s_reg2hw.periph_04_cfg.pudis.q;
         mux_to_pads_o.periph_04.rxdis = s_reg2hw.periph_04_cfg.rxdis.q;
         mux_to_pads_o.periph_04.slw_pgm = s_reg2hw.periph_04_cfg.slw_pgm.q;
         mux_to_pads_o.periph_04.trie = s_reg2hw.periph_04_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_04_SEL_ETHERNET_ETH_TXCTL: begin
          mux_to_pads_o.periph_04.chip2pad = port_signals_soc2pad_i.ethernet.eth_txctl_i;
          mux_to_pads_o.periph_04.drv0 = s_reg2hw.periph_04_cfg.drv0.q;
          mux_to_pads_o.periph_04.drv1 = s_reg2hw.periph_04_cfg.drv1.q;
          mux_to_pads_o.periph_04.drv2 = s_reg2hw.periph_04_cfg.drv2.q;
          mux_to_pads_o.periph_04.pde = s_reg2hw.periph_04_cfg.pde.q;
          mux_to_pads_o.periph_04.pp_odrain_selector = s_reg2hw.periph_04_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_04.pudis = 1'b1;
          mux_to_pads_o.periph_04.rxdis = 1'b1;
          mux_to_pads_o.periph_04.slw_pgm = s_reg2hw.periph_04_cfg.slw_pgm.q;
          mux_to_pads_o.periph_04.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.periph_04.chip2pad = s_reg2hw.periph_04_cfg.chip2pad.q;
         mux_to_pads_o.periph_04.drv0 = s_reg2hw.periph_04_cfg.drv0.q;
         mux_to_pads_o.periph_04.drv1 = s_reg2hw.periph_04_cfg.drv1.q;
         mux_to_pads_o.periph_04.drv2 = s_reg2hw.periph_04_cfg.drv2.q;
         mux_to_pads_o.periph_04.pde = s_reg2hw.periph_04_cfg.pde.q;
         mux_to_pads_o.periph_04.pp_odrain_selector = s_reg2hw.periph_04_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_04.pudis = s_reg2hw.periph_04_cfg.pudis.q;
         mux_to_pads_o.periph_04.rxdis = s_reg2hw.periph_04_cfg.rxdis.q;
         mux_to_pads_o.periph_04.slw_pgm = s_reg2hw.periph_04_cfg.slw_pgm.q;
         mux_to_pads_o.periph_04.trie = s_reg2hw.periph_04_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_05
   always_comb begin
     unique case (s_reg2hw.periph_05_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_05_SEL_DEFAULT: begin
         mux_to_pads_o.periph_05.chip2pad = s_reg2hw.periph_05_cfg.chip2pad.q;
         mux_to_pads_o.periph_05.drv0 = s_reg2hw.periph_05_cfg.drv0.q;
         mux_to_pads_o.periph_05.drv1 = s_reg2hw.periph_05_cfg.drv1.q;
         mux_to_pads_o.periph_05.drv2 = s_reg2hw.periph_05_cfg.drv2.q;
         mux_to_pads_o.periph_05.pde = s_reg2hw.periph_05_cfg.pde.q;
         mux_to_pads_o.periph_05.pp_odrain_selector = s_reg2hw.periph_05_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_05.pudis = s_reg2hw.periph_05_cfg.pudis.q;
         mux_to_pads_o.periph_05.rxdis = s_reg2hw.periph_05_cfg.rxdis.q;
         mux_to_pads_o.periph_05.slw_pgm = s_reg2hw.periph_05_cfg.slw_pgm.q;
         mux_to_pads_o.periph_05.trie = s_reg2hw.periph_05_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_05_SEL_ETHERNET_ETH_TXD0: begin
          mux_to_pads_o.periph_05.chip2pad = port_signals_soc2pad_i.ethernet.eth_txd0_i;
          mux_to_pads_o.periph_05.drv0 = s_reg2hw.periph_05_cfg.drv0.q;
          mux_to_pads_o.periph_05.drv1 = s_reg2hw.periph_05_cfg.drv1.q;
          mux_to_pads_o.periph_05.drv2 = s_reg2hw.periph_05_cfg.drv2.q;
          mux_to_pads_o.periph_05.pde = s_reg2hw.periph_05_cfg.pde.q;
          mux_to_pads_o.periph_05.pp_odrain_selector = s_reg2hw.periph_05_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_05.pudis = 1'b1;
          mux_to_pads_o.periph_05.rxdis = 1'b1;
          mux_to_pads_o.periph_05.slw_pgm = s_reg2hw.periph_05_cfg.slw_pgm.q;
          mux_to_pads_o.periph_05.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.periph_05.chip2pad = s_reg2hw.periph_05_cfg.chip2pad.q;
         mux_to_pads_o.periph_05.drv0 = s_reg2hw.periph_05_cfg.drv0.q;
         mux_to_pads_o.periph_05.drv1 = s_reg2hw.periph_05_cfg.drv1.q;
         mux_to_pads_o.periph_05.drv2 = s_reg2hw.periph_05_cfg.drv2.q;
         mux_to_pads_o.periph_05.pde = s_reg2hw.periph_05_cfg.pde.q;
         mux_to_pads_o.periph_05.pp_odrain_selector = s_reg2hw.periph_05_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_05.pudis = s_reg2hw.periph_05_cfg.pudis.q;
         mux_to_pads_o.periph_05.rxdis = s_reg2hw.periph_05_cfg.rxdis.q;
         mux_to_pads_o.periph_05.slw_pgm = s_reg2hw.periph_05_cfg.slw_pgm.q;
         mux_to_pads_o.periph_05.trie = s_reg2hw.periph_05_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_06
   always_comb begin
     unique case (s_reg2hw.periph_06_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_06_SEL_DEFAULT: begin
         mux_to_pads_o.periph_06.chip2pad = s_reg2hw.periph_06_cfg.chip2pad.q;
         mux_to_pads_o.periph_06.drv0 = s_reg2hw.periph_06_cfg.drv0.q;
         mux_to_pads_o.periph_06.drv1 = s_reg2hw.periph_06_cfg.drv1.q;
         mux_to_pads_o.periph_06.drv2 = s_reg2hw.periph_06_cfg.drv2.q;
         mux_to_pads_o.periph_06.pde = s_reg2hw.periph_06_cfg.pde.q;
         mux_to_pads_o.periph_06.pp_odrain_selector = s_reg2hw.periph_06_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_06.pudis = s_reg2hw.periph_06_cfg.pudis.q;
         mux_to_pads_o.periph_06.rxdis = s_reg2hw.periph_06_cfg.rxdis.q;
         mux_to_pads_o.periph_06.slw_pgm = s_reg2hw.periph_06_cfg.slw_pgm.q;
         mux_to_pads_o.periph_06.trie = s_reg2hw.periph_06_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_06_SEL_ETHERNET_ETH_TXD1: begin
          mux_to_pads_o.periph_06.chip2pad = port_signals_soc2pad_i.ethernet.eth_txd1_i;
          mux_to_pads_o.periph_06.drv0 = s_reg2hw.periph_06_cfg.drv0.q;
          mux_to_pads_o.periph_06.drv1 = s_reg2hw.periph_06_cfg.drv1.q;
          mux_to_pads_o.periph_06.drv2 = s_reg2hw.periph_06_cfg.drv2.q;
          mux_to_pads_o.periph_06.pde = s_reg2hw.periph_06_cfg.pde.q;
          mux_to_pads_o.periph_06.pp_odrain_selector = s_reg2hw.periph_06_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_06.pudis = 1'b1;
          mux_to_pads_o.periph_06.rxdis = 1'b1;
          mux_to_pads_o.periph_06.slw_pgm = s_reg2hw.periph_06_cfg.slw_pgm.q;
          mux_to_pads_o.periph_06.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.periph_06.chip2pad = s_reg2hw.periph_06_cfg.chip2pad.q;
         mux_to_pads_o.periph_06.drv0 = s_reg2hw.periph_06_cfg.drv0.q;
         mux_to_pads_o.periph_06.drv1 = s_reg2hw.periph_06_cfg.drv1.q;
         mux_to_pads_o.periph_06.drv2 = s_reg2hw.periph_06_cfg.drv2.q;
         mux_to_pads_o.periph_06.pde = s_reg2hw.periph_06_cfg.pde.q;
         mux_to_pads_o.periph_06.pp_odrain_selector = s_reg2hw.periph_06_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_06.pudis = s_reg2hw.periph_06_cfg.pudis.q;
         mux_to_pads_o.periph_06.rxdis = s_reg2hw.periph_06_cfg.rxdis.q;
         mux_to_pads_o.periph_06.slw_pgm = s_reg2hw.periph_06_cfg.slw_pgm.q;
         mux_to_pads_o.periph_06.trie = s_reg2hw.periph_06_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_07
   always_comb begin
     unique case (s_reg2hw.periph_07_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_07_SEL_DEFAULT: begin
         mux_to_pads_o.periph_07.chip2pad = s_reg2hw.periph_07_cfg.chip2pad.q;
         mux_to_pads_o.periph_07.drv0 = s_reg2hw.periph_07_cfg.drv0.q;
         mux_to_pads_o.periph_07.drv1 = s_reg2hw.periph_07_cfg.drv1.q;
         mux_to_pads_o.periph_07.drv2 = s_reg2hw.periph_07_cfg.drv2.q;
         mux_to_pads_o.periph_07.pde = s_reg2hw.periph_07_cfg.pde.q;
         mux_to_pads_o.periph_07.pp_odrain_selector = s_reg2hw.periph_07_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_07.pudis = s_reg2hw.periph_07_cfg.pudis.q;
         mux_to_pads_o.periph_07.rxdis = s_reg2hw.periph_07_cfg.rxdis.q;
         mux_to_pads_o.periph_07.slw_pgm = s_reg2hw.periph_07_cfg.slw_pgm.q;
         mux_to_pads_o.periph_07.trie = s_reg2hw.periph_07_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_07_SEL_ETHERNET_ETH_TXD2: begin
          mux_to_pads_o.periph_07.chip2pad = port_signals_soc2pad_i.ethernet.eth_txd2_i;
          mux_to_pads_o.periph_07.drv0 = s_reg2hw.periph_07_cfg.drv0.q;
          mux_to_pads_o.periph_07.drv1 = s_reg2hw.periph_07_cfg.drv1.q;
          mux_to_pads_o.periph_07.drv2 = s_reg2hw.periph_07_cfg.drv2.q;
          mux_to_pads_o.periph_07.pde = s_reg2hw.periph_07_cfg.pde.q;
          mux_to_pads_o.periph_07.pp_odrain_selector = s_reg2hw.periph_07_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_07.pudis = 1'b1;
          mux_to_pads_o.periph_07.rxdis = 1'b1;
          mux_to_pads_o.periph_07.slw_pgm = s_reg2hw.periph_07_cfg.slw_pgm.q;
          mux_to_pads_o.periph_07.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.periph_07.chip2pad = s_reg2hw.periph_07_cfg.chip2pad.q;
         mux_to_pads_o.periph_07.drv0 = s_reg2hw.periph_07_cfg.drv0.q;
         mux_to_pads_o.periph_07.drv1 = s_reg2hw.periph_07_cfg.drv1.q;
         mux_to_pads_o.periph_07.drv2 = s_reg2hw.periph_07_cfg.drv2.q;
         mux_to_pads_o.periph_07.pde = s_reg2hw.periph_07_cfg.pde.q;
         mux_to_pads_o.periph_07.pp_odrain_selector = s_reg2hw.periph_07_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_07.pudis = s_reg2hw.periph_07_cfg.pudis.q;
         mux_to_pads_o.periph_07.rxdis = s_reg2hw.periph_07_cfg.rxdis.q;
         mux_to_pads_o.periph_07.slw_pgm = s_reg2hw.periph_07_cfg.slw_pgm.q;
         mux_to_pads_o.periph_07.trie = s_reg2hw.periph_07_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_08
   always_comb begin
     unique case (s_reg2hw.periph_08_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_08_SEL_DEFAULT: begin
         mux_to_pads_o.periph_08.chip2pad = s_reg2hw.periph_08_cfg.chip2pad.q;
         mux_to_pads_o.periph_08.drv0 = s_reg2hw.periph_08_cfg.drv0.q;
         mux_to_pads_o.periph_08.drv1 = s_reg2hw.periph_08_cfg.drv1.q;
         mux_to_pads_o.periph_08.drv2 = s_reg2hw.periph_08_cfg.drv2.q;
         mux_to_pads_o.periph_08.pde = s_reg2hw.periph_08_cfg.pde.q;
         mux_to_pads_o.periph_08.pp_odrain_selector = s_reg2hw.periph_08_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_08.pudis = s_reg2hw.periph_08_cfg.pudis.q;
         mux_to_pads_o.periph_08.rxdis = s_reg2hw.periph_08_cfg.rxdis.q;
         mux_to_pads_o.periph_08.slw_pgm = s_reg2hw.periph_08_cfg.slw_pgm.q;
         mux_to_pads_o.periph_08.trie = s_reg2hw.periph_08_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_08_SEL_ETHERNET_ETH_TXD3: begin
          mux_to_pads_o.periph_08.chip2pad = port_signals_soc2pad_i.ethernet.eth_txd3_i;
          mux_to_pads_o.periph_08.drv0 = s_reg2hw.periph_08_cfg.drv0.q;
          mux_to_pads_o.periph_08.drv1 = s_reg2hw.periph_08_cfg.drv1.q;
          mux_to_pads_o.periph_08.drv2 = s_reg2hw.periph_08_cfg.drv2.q;
          mux_to_pads_o.periph_08.pde = s_reg2hw.periph_08_cfg.pde.q;
          mux_to_pads_o.periph_08.pp_odrain_selector = s_reg2hw.periph_08_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_08.pudis = 1'b1;
          mux_to_pads_o.periph_08.rxdis = 1'b1;
          mux_to_pads_o.periph_08.slw_pgm = s_reg2hw.periph_08_cfg.slw_pgm.q;
          mux_to_pads_o.periph_08.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.periph_08.chip2pad = s_reg2hw.periph_08_cfg.chip2pad.q;
         mux_to_pads_o.periph_08.drv0 = s_reg2hw.periph_08_cfg.drv0.q;
         mux_to_pads_o.periph_08.drv1 = s_reg2hw.periph_08_cfg.drv1.q;
         mux_to_pads_o.periph_08.drv2 = s_reg2hw.periph_08_cfg.drv2.q;
         mux_to_pads_o.periph_08.pde = s_reg2hw.periph_08_cfg.pde.q;
         mux_to_pads_o.periph_08.pp_odrain_selector = s_reg2hw.periph_08_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_08.pudis = s_reg2hw.periph_08_cfg.pudis.q;
         mux_to_pads_o.periph_08.rxdis = s_reg2hw.periph_08_cfg.rxdis.q;
         mux_to_pads_o.periph_08.slw_pgm = s_reg2hw.periph_08_cfg.slw_pgm.q;
         mux_to_pads_o.periph_08.trie = s_reg2hw.periph_08_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_09
   always_comb begin
     unique case (s_reg2hw.periph_09_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_09_SEL_DEFAULT: begin
         mux_to_pads_o.periph_09.chip2pad = s_reg2hw.periph_09_cfg.chip2pad.q;
         mux_to_pads_o.periph_09.drv0 = s_reg2hw.periph_09_cfg.drv0.q;
         mux_to_pads_o.periph_09.drv1 = s_reg2hw.periph_09_cfg.drv1.q;
         mux_to_pads_o.periph_09.drv2 = s_reg2hw.periph_09_cfg.drv2.q;
         mux_to_pads_o.periph_09.pde = s_reg2hw.periph_09_cfg.pde.q;
         mux_to_pads_o.periph_09.pp_odrain_selector = s_reg2hw.periph_09_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_09.pudis = s_reg2hw.periph_09_cfg.pudis.q;
         mux_to_pads_o.periph_09.rxdis = s_reg2hw.periph_09_cfg.rxdis.q;
         mux_to_pads_o.periph_09.slw_pgm = s_reg2hw.periph_09_cfg.slw_pgm.q;
         mux_to_pads_o.periph_09.trie = s_reg2hw.periph_09_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_09_SEL_ETHERNET_ETH_MDC: begin
          mux_to_pads_o.periph_09.chip2pad = port_signals_soc2pad_i.ethernet.eth_mdc_i;
          mux_to_pads_o.periph_09.drv0 = s_reg2hw.periph_09_cfg.drv0.q;
          mux_to_pads_o.periph_09.drv1 = s_reg2hw.periph_09_cfg.drv1.q;
          mux_to_pads_o.periph_09.drv2 = s_reg2hw.periph_09_cfg.drv2.q;
          mux_to_pads_o.periph_09.pde = s_reg2hw.periph_09_cfg.pde.q;
          mux_to_pads_o.periph_09.pp_odrain_selector = s_reg2hw.periph_09_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_09.pudis = 1'b1;
          mux_to_pads_o.periph_09.rxdis = 1'b1;
          mux_to_pads_o.periph_09.slw_pgm = s_reg2hw.periph_09_cfg.slw_pgm.q;
          mux_to_pads_o.periph_09.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.periph_09.chip2pad = s_reg2hw.periph_09_cfg.chip2pad.q;
         mux_to_pads_o.periph_09.drv0 = s_reg2hw.periph_09_cfg.drv0.q;
         mux_to_pads_o.periph_09.drv1 = s_reg2hw.periph_09_cfg.drv1.q;
         mux_to_pads_o.periph_09.drv2 = s_reg2hw.periph_09_cfg.drv2.q;
         mux_to_pads_o.periph_09.pde = s_reg2hw.periph_09_cfg.pde.q;
         mux_to_pads_o.periph_09.pp_odrain_selector = s_reg2hw.periph_09_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_09.pudis = s_reg2hw.periph_09_cfg.pudis.q;
         mux_to_pads_o.periph_09.rxdis = s_reg2hw.periph_09_cfg.rxdis.q;
         mux_to_pads_o.periph_09.slw_pgm = s_reg2hw.periph_09_cfg.slw_pgm.q;
         mux_to_pads_o.periph_09.trie = s_reg2hw.periph_09_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_10
   always_comb begin
     unique case (s_reg2hw.periph_10_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_10_SEL_DEFAULT: begin
         mux_to_pads_o.periph_10.chip2pad = s_reg2hw.periph_10_cfg.chip2pad.q;
         mux_to_pads_o.periph_10.drv0 = s_reg2hw.periph_10_cfg.drv0.q;
         mux_to_pads_o.periph_10.drv1 = s_reg2hw.periph_10_cfg.drv1.q;
         mux_to_pads_o.periph_10.drv2 = s_reg2hw.periph_10_cfg.drv2.q;
         mux_to_pads_o.periph_10.pde = s_reg2hw.periph_10_cfg.pde.q;
         mux_to_pads_o.periph_10.pp_odrain_selector = s_reg2hw.periph_10_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_10.pudis = s_reg2hw.periph_10_cfg.pudis.q;
         mux_to_pads_o.periph_10.rxdis = s_reg2hw.periph_10_cfg.rxdis.q;
         mux_to_pads_o.periph_10.slw_pgm = s_reg2hw.periph_10_cfg.slw_pgm.q;
         mux_to_pads_o.periph_10.trie = s_reg2hw.periph_10_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_10_SEL_ETHERNET_ETH_MDIO: begin
          mux_to_pads_o.periph_10.chip2pad = port_signals_soc2pad_i.ethernet.eth_md_i;
          mux_to_pads_o.periph_10.drv0 = s_reg2hw.periph_10_cfg.drv0.q;
          mux_to_pads_o.periph_10.drv1 = s_reg2hw.periph_10_cfg.drv1.q;
          mux_to_pads_o.periph_10.drv2 = s_reg2hw.periph_10_cfg.drv2.q;
          mux_to_pads_o.periph_10.pde = s_reg2hw.periph_10_cfg.pde.q;
          mux_to_pads_o.periph_10.pp_odrain_selector = s_reg2hw.periph_10_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_10.pudis = 1'b1;
          mux_to_pads_o.periph_10.rxdis = 1'b1;
          mux_to_pads_o.periph_10.slw_pgm = s_reg2hw.periph_10_cfg.slw_pgm.q;
          mux_to_pads_o.periph_10.trie = ~port_signals_soc2pad_i.ethernet.eth_md_oe;
       end
       default: begin
         mux_to_pads_o.periph_10.chip2pad = s_reg2hw.periph_10_cfg.chip2pad.q;
         mux_to_pads_o.periph_10.drv0 = s_reg2hw.periph_10_cfg.drv0.q;
         mux_to_pads_o.periph_10.drv1 = s_reg2hw.periph_10_cfg.drv1.q;
         mux_to_pads_o.periph_10.drv2 = s_reg2hw.periph_10_cfg.drv2.q;
         mux_to_pads_o.periph_10.pde = s_reg2hw.periph_10_cfg.pde.q;
         mux_to_pads_o.periph_10.pp_odrain_selector = s_reg2hw.periph_10_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_10.pudis = s_reg2hw.periph_10_cfg.pudis.q;
         mux_to_pads_o.periph_10.rxdis = s_reg2hw.periph_10_cfg.rxdis.q;
         mux_to_pads_o.periph_10.slw_pgm = s_reg2hw.periph_10_cfg.slw_pgm.q;
         mux_to_pads_o.periph_10.trie = s_reg2hw.periph_10_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_11
   always_comb begin
     unique case (s_reg2hw.periph_11_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_11_SEL_DEFAULT: begin
         mux_to_pads_o.periph_11.chip2pad = s_reg2hw.periph_11_cfg.chip2pad.q;
         mux_to_pads_o.periph_11.drv0 = s_reg2hw.periph_11_cfg.drv0.q;
         mux_to_pads_o.periph_11.drv1 = s_reg2hw.periph_11_cfg.drv1.q;
         mux_to_pads_o.periph_11.drv2 = s_reg2hw.periph_11_cfg.drv2.q;
         mux_to_pads_o.periph_11.pde = s_reg2hw.periph_11_cfg.pde.q;
         mux_to_pads_o.periph_11.pp_odrain_selector = s_reg2hw.periph_11_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_11.pudis = s_reg2hw.periph_11_cfg.pudis.q;
         mux_to_pads_o.periph_11.rxdis = s_reg2hw.periph_11_cfg.rxdis.q;
         mux_to_pads_o.periph_11.slw_pgm = s_reg2hw.periph_11_cfg.slw_pgm.q;
         mux_to_pads_o.periph_11.trie = s_reg2hw.periph_11_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_11_SEL_ETHERNET_ETH_RXCK: begin
          mux_to_pads_o.periph_11.chip2pad = s_reg2hw.periph_11_cfg.chip2pad.q;
          mux_to_pads_o.periph_11.drv0 = s_reg2hw.periph_11_cfg.drv0.q;
          mux_to_pads_o.periph_11.drv1 = s_reg2hw.periph_11_cfg.drv1.q;
          mux_to_pads_o.periph_11.drv2 = s_reg2hw.periph_11_cfg.drv2.q;
          mux_to_pads_o.periph_11.pde = s_reg2hw.periph_11_cfg.pde.q;
          mux_to_pads_o.periph_11.pp_odrain_selector = s_reg2hw.periph_11_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_11.pudis = 1'b1;
          mux_to_pads_o.periph_11.rxdis = 1'b0;
          mux_to_pads_o.periph_11.slw_pgm = s_reg2hw.periph_11_cfg.slw_pgm.q;
          mux_to_pads_o.periph_11.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.periph_11.chip2pad = s_reg2hw.periph_11_cfg.chip2pad.q;
         mux_to_pads_o.periph_11.drv0 = s_reg2hw.periph_11_cfg.drv0.q;
         mux_to_pads_o.periph_11.drv1 = s_reg2hw.periph_11_cfg.drv1.q;
         mux_to_pads_o.periph_11.drv2 = s_reg2hw.periph_11_cfg.drv2.q;
         mux_to_pads_o.periph_11.pde = s_reg2hw.periph_11_cfg.pde.q;
         mux_to_pads_o.periph_11.pp_odrain_selector = s_reg2hw.periph_11_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_11.pudis = s_reg2hw.periph_11_cfg.pudis.q;
         mux_to_pads_o.periph_11.rxdis = s_reg2hw.periph_11_cfg.rxdis.q;
         mux_to_pads_o.periph_11.slw_pgm = s_reg2hw.periph_11_cfg.slw_pgm.q;
         mux_to_pads_o.periph_11.trie = s_reg2hw.periph_11_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_12
   always_comb begin
     unique case (s_reg2hw.periph_12_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_12_SEL_DEFAULT: begin
         mux_to_pads_o.periph_12.chip2pad = s_reg2hw.periph_12_cfg.chip2pad.q;
         mux_to_pads_o.periph_12.drv0 = s_reg2hw.periph_12_cfg.drv0.q;
         mux_to_pads_o.periph_12.drv1 = s_reg2hw.periph_12_cfg.drv1.q;
         mux_to_pads_o.periph_12.drv2 = s_reg2hw.periph_12_cfg.drv2.q;
         mux_to_pads_o.periph_12.pde = s_reg2hw.periph_12_cfg.pde.q;
         mux_to_pads_o.periph_12.pp_odrain_selector = s_reg2hw.periph_12_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_12.pudis = s_reg2hw.periph_12_cfg.pudis.q;
         mux_to_pads_o.periph_12.rxdis = s_reg2hw.periph_12_cfg.rxdis.q;
         mux_to_pads_o.periph_12.slw_pgm = s_reg2hw.periph_12_cfg.slw_pgm.q;
         mux_to_pads_o.periph_12.trie = s_reg2hw.periph_12_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_12_SEL_ETHERNET_ETH_RXCTL: begin
          mux_to_pads_o.periph_12.chip2pad = s_reg2hw.periph_12_cfg.chip2pad.q;
          mux_to_pads_o.periph_12.drv0 = s_reg2hw.periph_12_cfg.drv0.q;
          mux_to_pads_o.periph_12.drv1 = s_reg2hw.periph_12_cfg.drv1.q;
          mux_to_pads_o.periph_12.drv2 = s_reg2hw.periph_12_cfg.drv2.q;
          mux_to_pads_o.periph_12.pde = s_reg2hw.periph_12_cfg.pde.q;
          mux_to_pads_o.periph_12.pp_odrain_selector = s_reg2hw.periph_12_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_12.pudis = 1'b1;
          mux_to_pads_o.periph_12.rxdis = 1'b0;
          mux_to_pads_o.periph_12.slw_pgm = s_reg2hw.periph_12_cfg.slw_pgm.q;
          mux_to_pads_o.periph_12.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.periph_12.chip2pad = s_reg2hw.periph_12_cfg.chip2pad.q;
         mux_to_pads_o.periph_12.drv0 = s_reg2hw.periph_12_cfg.drv0.q;
         mux_to_pads_o.periph_12.drv1 = s_reg2hw.periph_12_cfg.drv1.q;
         mux_to_pads_o.periph_12.drv2 = s_reg2hw.periph_12_cfg.drv2.q;
         mux_to_pads_o.periph_12.pde = s_reg2hw.periph_12_cfg.pde.q;
         mux_to_pads_o.periph_12.pp_odrain_selector = s_reg2hw.periph_12_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_12.pudis = s_reg2hw.periph_12_cfg.pudis.q;
         mux_to_pads_o.periph_12.rxdis = s_reg2hw.periph_12_cfg.rxdis.q;
         mux_to_pads_o.periph_12.slw_pgm = s_reg2hw.periph_12_cfg.slw_pgm.q;
         mux_to_pads_o.periph_12.trie = s_reg2hw.periph_12_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_13
   always_comb begin
     unique case (s_reg2hw.periph_13_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_13_SEL_DEFAULT: begin
         mux_to_pads_o.periph_13.chip2pad = s_reg2hw.periph_13_cfg.chip2pad.q;
         mux_to_pads_o.periph_13.drv0 = s_reg2hw.periph_13_cfg.drv0.q;
         mux_to_pads_o.periph_13.drv1 = s_reg2hw.periph_13_cfg.drv1.q;
         mux_to_pads_o.periph_13.drv2 = s_reg2hw.periph_13_cfg.drv2.q;
         mux_to_pads_o.periph_13.pde = s_reg2hw.periph_13_cfg.pde.q;
         mux_to_pads_o.periph_13.pp_odrain_selector = s_reg2hw.periph_13_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_13.pudis = s_reg2hw.periph_13_cfg.pudis.q;
         mux_to_pads_o.periph_13.rxdis = s_reg2hw.periph_13_cfg.rxdis.q;
         mux_to_pads_o.periph_13.slw_pgm = s_reg2hw.periph_13_cfg.slw_pgm.q;
         mux_to_pads_o.periph_13.trie = s_reg2hw.periph_13_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_13_SEL_ETHERNET_ETH_RXD0: begin
          mux_to_pads_o.periph_13.chip2pad = s_reg2hw.periph_13_cfg.chip2pad.q;
          mux_to_pads_o.periph_13.drv0 = s_reg2hw.periph_13_cfg.drv0.q;
          mux_to_pads_o.periph_13.drv1 = s_reg2hw.periph_13_cfg.drv1.q;
          mux_to_pads_o.periph_13.drv2 = s_reg2hw.periph_13_cfg.drv2.q;
          mux_to_pads_o.periph_13.pde = s_reg2hw.periph_13_cfg.pde.q;
          mux_to_pads_o.periph_13.pp_odrain_selector = s_reg2hw.periph_13_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_13.pudis = 1'b1;
          mux_to_pads_o.periph_13.rxdis = 1'b0;
          mux_to_pads_o.periph_13.slw_pgm = s_reg2hw.periph_13_cfg.slw_pgm.q;
          mux_to_pads_o.periph_13.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.periph_13.chip2pad = s_reg2hw.periph_13_cfg.chip2pad.q;
         mux_to_pads_o.periph_13.drv0 = s_reg2hw.periph_13_cfg.drv0.q;
         mux_to_pads_o.periph_13.drv1 = s_reg2hw.periph_13_cfg.drv1.q;
         mux_to_pads_o.periph_13.drv2 = s_reg2hw.periph_13_cfg.drv2.q;
         mux_to_pads_o.periph_13.pde = s_reg2hw.periph_13_cfg.pde.q;
         mux_to_pads_o.periph_13.pp_odrain_selector = s_reg2hw.periph_13_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_13.pudis = s_reg2hw.periph_13_cfg.pudis.q;
         mux_to_pads_o.periph_13.rxdis = s_reg2hw.periph_13_cfg.rxdis.q;
         mux_to_pads_o.periph_13.slw_pgm = s_reg2hw.periph_13_cfg.slw_pgm.q;
         mux_to_pads_o.periph_13.trie = s_reg2hw.periph_13_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_14
   always_comb begin
     unique case (s_reg2hw.periph_14_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_14_SEL_DEFAULT: begin
         mux_to_pads_o.periph_14.chip2pad = s_reg2hw.periph_14_cfg.chip2pad.q;
         mux_to_pads_o.periph_14.drv0 = s_reg2hw.periph_14_cfg.drv0.q;
         mux_to_pads_o.periph_14.drv1 = s_reg2hw.periph_14_cfg.drv1.q;
         mux_to_pads_o.periph_14.drv2 = s_reg2hw.periph_14_cfg.drv2.q;
         mux_to_pads_o.periph_14.pde = s_reg2hw.periph_14_cfg.pde.q;
         mux_to_pads_o.periph_14.pp_odrain_selector = s_reg2hw.periph_14_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_14.pudis = s_reg2hw.periph_14_cfg.pudis.q;
         mux_to_pads_o.periph_14.rxdis = s_reg2hw.periph_14_cfg.rxdis.q;
         mux_to_pads_o.periph_14.slw_pgm = s_reg2hw.periph_14_cfg.slw_pgm.q;
         mux_to_pads_o.periph_14.trie = s_reg2hw.periph_14_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_14_SEL_ETHERNET_ETH_RXD1: begin
          mux_to_pads_o.periph_14.chip2pad = s_reg2hw.periph_14_cfg.chip2pad.q;
          mux_to_pads_o.periph_14.drv0 = s_reg2hw.periph_14_cfg.drv0.q;
          mux_to_pads_o.periph_14.drv1 = s_reg2hw.periph_14_cfg.drv1.q;
          mux_to_pads_o.periph_14.drv2 = s_reg2hw.periph_14_cfg.drv2.q;
          mux_to_pads_o.periph_14.pde = s_reg2hw.periph_14_cfg.pde.q;
          mux_to_pads_o.periph_14.pp_odrain_selector = s_reg2hw.periph_14_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_14.pudis = 1'b1;
          mux_to_pads_o.periph_14.rxdis = 1'b0;
          mux_to_pads_o.periph_14.slw_pgm = s_reg2hw.periph_14_cfg.slw_pgm.q;
          mux_to_pads_o.periph_14.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.periph_14.chip2pad = s_reg2hw.periph_14_cfg.chip2pad.q;
         mux_to_pads_o.periph_14.drv0 = s_reg2hw.periph_14_cfg.drv0.q;
         mux_to_pads_o.periph_14.drv1 = s_reg2hw.periph_14_cfg.drv1.q;
         mux_to_pads_o.periph_14.drv2 = s_reg2hw.periph_14_cfg.drv2.q;
         mux_to_pads_o.periph_14.pde = s_reg2hw.periph_14_cfg.pde.q;
         mux_to_pads_o.periph_14.pp_odrain_selector = s_reg2hw.periph_14_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_14.pudis = s_reg2hw.periph_14_cfg.pudis.q;
         mux_to_pads_o.periph_14.rxdis = s_reg2hw.periph_14_cfg.rxdis.q;
         mux_to_pads_o.periph_14.slw_pgm = s_reg2hw.periph_14_cfg.slw_pgm.q;
         mux_to_pads_o.periph_14.trie = s_reg2hw.periph_14_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_15
   always_comb begin
     unique case (s_reg2hw.periph_15_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_15_SEL_DEFAULT: begin
         mux_to_pads_o.periph_15.chip2pad = s_reg2hw.periph_15_cfg.chip2pad.q;
         mux_to_pads_o.periph_15.drv0 = s_reg2hw.periph_15_cfg.drv0.q;
         mux_to_pads_o.periph_15.drv1 = s_reg2hw.periph_15_cfg.drv1.q;
         mux_to_pads_o.periph_15.drv2 = s_reg2hw.periph_15_cfg.drv2.q;
         mux_to_pads_o.periph_15.pde = s_reg2hw.periph_15_cfg.pde.q;
         mux_to_pads_o.periph_15.pp_odrain_selector = s_reg2hw.periph_15_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_15.pudis = s_reg2hw.periph_15_cfg.pudis.q;
         mux_to_pads_o.periph_15.rxdis = s_reg2hw.periph_15_cfg.rxdis.q;
         mux_to_pads_o.periph_15.slw_pgm = s_reg2hw.periph_15_cfg.slw_pgm.q;
         mux_to_pads_o.periph_15.trie = s_reg2hw.periph_15_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_15_SEL_ETHERNET_ETH_RXD2: begin
          mux_to_pads_o.periph_15.chip2pad = s_reg2hw.periph_15_cfg.chip2pad.q;
          mux_to_pads_o.periph_15.drv0 = s_reg2hw.periph_15_cfg.drv0.q;
          mux_to_pads_o.periph_15.drv1 = s_reg2hw.periph_15_cfg.drv1.q;
          mux_to_pads_o.periph_15.drv2 = s_reg2hw.periph_15_cfg.drv2.q;
          mux_to_pads_o.periph_15.pde = s_reg2hw.periph_15_cfg.pde.q;
          mux_to_pads_o.periph_15.pp_odrain_selector = s_reg2hw.periph_15_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_15.pudis = 1'b1;
          mux_to_pads_o.periph_15.rxdis = 1'b0;
          mux_to_pads_o.periph_15.slw_pgm = s_reg2hw.periph_15_cfg.slw_pgm.q;
          mux_to_pads_o.periph_15.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.periph_15.chip2pad = s_reg2hw.periph_15_cfg.chip2pad.q;
         mux_to_pads_o.periph_15.drv0 = s_reg2hw.periph_15_cfg.drv0.q;
         mux_to_pads_o.periph_15.drv1 = s_reg2hw.periph_15_cfg.drv1.q;
         mux_to_pads_o.periph_15.drv2 = s_reg2hw.periph_15_cfg.drv2.q;
         mux_to_pads_o.periph_15.pde = s_reg2hw.periph_15_cfg.pde.q;
         mux_to_pads_o.periph_15.pp_odrain_selector = s_reg2hw.periph_15_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_15.pudis = s_reg2hw.periph_15_cfg.pudis.q;
         mux_to_pads_o.periph_15.rxdis = s_reg2hw.periph_15_cfg.rxdis.q;
         mux_to_pads_o.periph_15.slw_pgm = s_reg2hw.periph_15_cfg.slw_pgm.q;
         mux_to_pads_o.periph_15.trie = s_reg2hw.periph_15_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad periph_16
   always_comb begin
     unique case (s_reg2hw.periph_16_mux_sel.q)
       PAD_MUX_GROUP_PERIPH_16_SEL_DEFAULT: begin
         mux_to_pads_o.periph_16.chip2pad = s_reg2hw.periph_16_cfg.chip2pad.q;
         mux_to_pads_o.periph_16.drv0 = s_reg2hw.periph_16_cfg.drv0.q;
         mux_to_pads_o.periph_16.drv1 = s_reg2hw.periph_16_cfg.drv1.q;
         mux_to_pads_o.periph_16.drv2 = s_reg2hw.periph_16_cfg.drv2.q;
         mux_to_pads_o.periph_16.pde = s_reg2hw.periph_16_cfg.pde.q;
         mux_to_pads_o.periph_16.pp_odrain_selector = s_reg2hw.periph_16_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_16.pudis = s_reg2hw.periph_16_cfg.pudis.q;
         mux_to_pads_o.periph_16.rxdis = s_reg2hw.periph_16_cfg.rxdis.q;
         mux_to_pads_o.periph_16.slw_pgm = s_reg2hw.periph_16_cfg.slw_pgm.q;
         mux_to_pads_o.periph_16.trie = s_reg2hw.periph_16_cfg.trie.q;
       end
       PAD_MUX_GROUP_PERIPH_16_SEL_ETHERNET_ETH_RXD3: begin
          mux_to_pads_o.periph_16.chip2pad = s_reg2hw.periph_16_cfg.chip2pad.q;
          mux_to_pads_o.periph_16.drv0 = s_reg2hw.periph_16_cfg.drv0.q;
          mux_to_pads_o.periph_16.drv1 = s_reg2hw.periph_16_cfg.drv1.q;
          mux_to_pads_o.periph_16.drv2 = s_reg2hw.periph_16_cfg.drv2.q;
          mux_to_pads_o.periph_16.pde = s_reg2hw.periph_16_cfg.pde.q;
          mux_to_pads_o.periph_16.pp_odrain_selector = s_reg2hw.periph_16_cfg.pp_odrain_selector.q;
          mux_to_pads_o.periph_16.pudis = 1'b1;
          mux_to_pads_o.periph_16.rxdis = 1'b0;
          mux_to_pads_o.periph_16.slw_pgm = s_reg2hw.periph_16_cfg.slw_pgm.q;
          mux_to_pads_o.periph_16.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.periph_16.chip2pad = s_reg2hw.periph_16_cfg.chip2pad.q;
         mux_to_pads_o.periph_16.drv0 = s_reg2hw.periph_16_cfg.drv0.q;
         mux_to_pads_o.periph_16.drv1 = s_reg2hw.periph_16_cfg.drv1.q;
         mux_to_pads_o.periph_16.drv2 = s_reg2hw.periph_16_cfg.drv2.q;
         mux_to_pads_o.periph_16.pde = s_reg2hw.periph_16_cfg.pde.q;
         mux_to_pads_o.periph_16.pp_odrain_selector = s_reg2hw.periph_16_cfg.pp_odrain_selector.q;
         mux_to_pads_o.periph_16.pudis = s_reg2hw.periph_16_cfg.pudis.q;
         mux_to_pads_o.periph_16.rxdis = s_reg2hw.periph_16_cfg.rxdis.q;
         mux_to_pads_o.periph_16.slw_pgm = s_reg2hw.periph_16_cfg.slw_pgm.q;
         mux_to_pads_o.periph_16.trie = s_reg2hw.periph_16_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad debug_out0
   always_comb begin
     unique case (s_reg2hw.debug_out0_mux_sel.q)
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEFAULT: begin
         mux_to_pads_o.debug_out0.chip2pad = s_reg2hw.debug_out0_cfg.chip2pad.q;
         mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
         mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
         mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
         mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
         mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
         mux_to_pads_o.debug_out0.pudis = s_reg2hw.debug_out0_cfg.pudis.q;
         mux_to_pads_o.debug_out0.rxdis = s_reg2hw.debug_out0_cfg.rxdis.q;
         mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
         mux_to_pads_o.debug_out0.trie = s_reg2hw.debug_out0_cfg.trie.q;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_ALT_CLK: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.alt_clk;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_ALT_PLL: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.alt_pll;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_CLK: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.host_clk;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_PLL: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.host_pll;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_POR_N: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.host_por_n;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_CLK: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.periph_clk;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.periph_domain_clk;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.periph_domain_rstn;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_PLL: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.periph_pll;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PULP_CLUSTER_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.pulp_cluster_domain_clk;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PULP_CLUSTER_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.pulp_cluster_domain_rstn;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SAFETY_ISLAND_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.safety_island_domain_clk;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SAFETY_ISLAND_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.safety_island_domain_rstn;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SECURITY_ISLAND_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.security_island_domain_clk;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SECURITY_ISLAND_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.security_island_domain_rstn;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SPATZ_CLUSTER_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.spatz_cluster_domain_clk;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT0_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SPATZ_CLUSTER_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out0.chip2pad = port_signals_soc2pad_i.debug_signals.spatz_cluster_domain_rstn;
          mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
          mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
          mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
          mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
          mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out0.pudis = 1'b1;
          mux_to_pads_o.debug_out0.rxdis = 1'b1;
          mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out0.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.debug_out0.chip2pad = s_reg2hw.debug_out0_cfg.chip2pad.q;
         mux_to_pads_o.debug_out0.drv0 = s_reg2hw.debug_out0_cfg.drv0.q;
         mux_to_pads_o.debug_out0.drv1 = s_reg2hw.debug_out0_cfg.drv1.q;
         mux_to_pads_o.debug_out0.drv2 = s_reg2hw.debug_out0_cfg.drv2.q;
         mux_to_pads_o.debug_out0.pde = s_reg2hw.debug_out0_cfg.pde.q;
         mux_to_pads_o.debug_out0.pp_odrain_selector = s_reg2hw.debug_out0_cfg.pp_odrain_selector.q;
         mux_to_pads_o.debug_out0.pudis = s_reg2hw.debug_out0_cfg.pudis.q;
         mux_to_pads_o.debug_out0.rxdis = s_reg2hw.debug_out0_cfg.rxdis.q;
         mux_to_pads_o.debug_out0.slw_pgm = s_reg2hw.debug_out0_cfg.slw_pgm.q;
         mux_to_pads_o.debug_out0.trie = s_reg2hw.debug_out0_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad debug_out1
   always_comb begin
     unique case (s_reg2hw.debug_out1_mux_sel.q)
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEFAULT: begin
         mux_to_pads_o.debug_out1.chip2pad = s_reg2hw.debug_out1_cfg.chip2pad.q;
         mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
         mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
         mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
         mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
         mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
         mux_to_pads_o.debug_out1.pudis = s_reg2hw.debug_out1_cfg.pudis.q;
         mux_to_pads_o.debug_out1.rxdis = s_reg2hw.debug_out1_cfg.rxdis.q;
         mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
         mux_to_pads_o.debug_out1.trie = s_reg2hw.debug_out1_cfg.trie.q;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_ALT_CLK: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.alt_clk;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_ALT_PLL: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.alt_pll;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_CLK: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.host_clk;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_PLL: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.host_pll;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_POR_N: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.host_por_n;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_CLK: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.periph_clk;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.periph_domain_clk;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.periph_domain_rstn;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_PLL: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.periph_pll;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PULP_CLUSTER_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.pulp_cluster_domain_clk;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PULP_CLUSTER_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.pulp_cluster_domain_rstn;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SAFETY_ISLAND_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.safety_island_domain_clk;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SAFETY_ISLAND_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.safety_island_domain_rstn;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SECURITY_ISLAND_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.security_island_domain_clk;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SECURITY_ISLAND_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.security_island_domain_rstn;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SPATZ_CLUSTER_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.spatz_cluster_domain_clk;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT1_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SPATZ_CLUSTER_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out1.chip2pad = port_signals_soc2pad_i.debug_signals.spatz_cluster_domain_rstn;
          mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
          mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
          mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
          mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
          mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out1.pudis = 1'b1;
          mux_to_pads_o.debug_out1.rxdis = 1'b1;
          mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out1.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.debug_out1.chip2pad = s_reg2hw.debug_out1_cfg.chip2pad.q;
         mux_to_pads_o.debug_out1.drv0 = s_reg2hw.debug_out1_cfg.drv0.q;
         mux_to_pads_o.debug_out1.drv1 = s_reg2hw.debug_out1_cfg.drv1.q;
         mux_to_pads_o.debug_out1.drv2 = s_reg2hw.debug_out1_cfg.drv2.q;
         mux_to_pads_o.debug_out1.pde = s_reg2hw.debug_out1_cfg.pde.q;
         mux_to_pads_o.debug_out1.pp_odrain_selector = s_reg2hw.debug_out1_cfg.pp_odrain_selector.q;
         mux_to_pads_o.debug_out1.pudis = s_reg2hw.debug_out1_cfg.pudis.q;
         mux_to_pads_o.debug_out1.rxdis = s_reg2hw.debug_out1_cfg.rxdis.q;
         mux_to_pads_o.debug_out1.slw_pgm = s_reg2hw.debug_out1_cfg.slw_pgm.q;
         mux_to_pads_o.debug_out1.trie = s_reg2hw.debug_out1_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad debug_out2
   always_comb begin
     unique case (s_reg2hw.debug_out2_mux_sel.q)
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEFAULT: begin
         mux_to_pads_o.debug_out2.chip2pad = s_reg2hw.debug_out2_cfg.chip2pad.q;
         mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
         mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
         mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
         mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
         mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
         mux_to_pads_o.debug_out2.pudis = s_reg2hw.debug_out2_cfg.pudis.q;
         mux_to_pads_o.debug_out2.rxdis = s_reg2hw.debug_out2_cfg.rxdis.q;
         mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
         mux_to_pads_o.debug_out2.trie = s_reg2hw.debug_out2_cfg.trie.q;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_ALT_CLK: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.alt_clk;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_ALT_PLL: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.alt_pll;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_CLK: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.host_clk;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_PLL: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.host_pll;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_POR_N: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.host_por_n;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_CLK: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.periph_clk;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.periph_domain_clk;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.periph_domain_rstn;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_PLL: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.periph_pll;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PULP_CLUSTER_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.pulp_cluster_domain_clk;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PULP_CLUSTER_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.pulp_cluster_domain_rstn;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SAFETY_ISLAND_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.safety_island_domain_clk;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SAFETY_ISLAND_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.safety_island_domain_rstn;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SECURITY_ISLAND_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.security_island_domain_clk;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SECURITY_ISLAND_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.security_island_domain_rstn;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SPATZ_CLUSTER_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.spatz_cluster_domain_clk;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT2_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SPATZ_CLUSTER_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out2.chip2pad = port_signals_soc2pad_i.debug_signals.spatz_cluster_domain_rstn;
          mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
          mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
          mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
          mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
          mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out2.pudis = 1'b1;
          mux_to_pads_o.debug_out2.rxdis = 1'b1;
          mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out2.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.debug_out2.chip2pad = s_reg2hw.debug_out2_cfg.chip2pad.q;
         mux_to_pads_o.debug_out2.drv0 = s_reg2hw.debug_out2_cfg.drv0.q;
         mux_to_pads_o.debug_out2.drv1 = s_reg2hw.debug_out2_cfg.drv1.q;
         mux_to_pads_o.debug_out2.drv2 = s_reg2hw.debug_out2_cfg.drv2.q;
         mux_to_pads_o.debug_out2.pde = s_reg2hw.debug_out2_cfg.pde.q;
         mux_to_pads_o.debug_out2.pp_odrain_selector = s_reg2hw.debug_out2_cfg.pp_odrain_selector.q;
         mux_to_pads_o.debug_out2.pudis = s_reg2hw.debug_out2_cfg.pudis.q;
         mux_to_pads_o.debug_out2.rxdis = s_reg2hw.debug_out2_cfg.rxdis.q;
         mux_to_pads_o.debug_out2.slw_pgm = s_reg2hw.debug_out2_cfg.slw_pgm.q;
         mux_to_pads_o.debug_out2.trie = s_reg2hw.debug_out2_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad debug_out3
   always_comb begin
     unique case (s_reg2hw.debug_out3_mux_sel.q)
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEFAULT: begin
         mux_to_pads_o.debug_out3.chip2pad = s_reg2hw.debug_out3_cfg.chip2pad.q;
         mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
         mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
         mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
         mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
         mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
         mux_to_pads_o.debug_out3.pudis = s_reg2hw.debug_out3_cfg.pudis.q;
         mux_to_pads_o.debug_out3.rxdis = s_reg2hw.debug_out3_cfg.rxdis.q;
         mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
         mux_to_pads_o.debug_out3.trie = s_reg2hw.debug_out3_cfg.trie.q;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_ALT_CLK: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.alt_clk;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_ALT_PLL: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.alt_pll;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_CLK: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.host_clk;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_PLL: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.host_pll;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_POR_N: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.host_por_n;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_CLK: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.periph_clk;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.periph_domain_clk;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.periph_domain_rstn;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_PLL: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.periph_pll;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PULP_CLUSTER_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.pulp_cluster_domain_clk;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PULP_CLUSTER_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.pulp_cluster_domain_rstn;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SAFETY_ISLAND_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.safety_island_domain_clk;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SAFETY_ISLAND_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.safety_island_domain_rstn;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SECURITY_ISLAND_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.security_island_domain_clk;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SECURITY_ISLAND_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.security_island_domain_rstn;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SPATZ_CLUSTER_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.spatz_cluster_domain_clk;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT3_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SPATZ_CLUSTER_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out3.chip2pad = port_signals_soc2pad_i.debug_signals.spatz_cluster_domain_rstn;
          mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
          mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
          mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
          mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
          mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out3.pudis = 1'b1;
          mux_to_pads_o.debug_out3.rxdis = 1'b1;
          mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out3.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.debug_out3.chip2pad = s_reg2hw.debug_out3_cfg.chip2pad.q;
         mux_to_pads_o.debug_out3.drv0 = s_reg2hw.debug_out3_cfg.drv0.q;
         mux_to_pads_o.debug_out3.drv1 = s_reg2hw.debug_out3_cfg.drv1.q;
         mux_to_pads_o.debug_out3.drv2 = s_reg2hw.debug_out3_cfg.drv2.q;
         mux_to_pads_o.debug_out3.pde = s_reg2hw.debug_out3_cfg.pde.q;
         mux_to_pads_o.debug_out3.pp_odrain_selector = s_reg2hw.debug_out3_cfg.pp_odrain_selector.q;
         mux_to_pads_o.debug_out3.pudis = s_reg2hw.debug_out3_cfg.pudis.q;
         mux_to_pads_o.debug_out3.rxdis = s_reg2hw.debug_out3_cfg.rxdis.q;
         mux_to_pads_o.debug_out3.slw_pgm = s_reg2hw.debug_out3_cfg.slw_pgm.q;
         mux_to_pads_o.debug_out3.trie = s_reg2hw.debug_out3_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad debug_out4
   always_comb begin
     unique case (s_reg2hw.debug_out4_mux_sel.q)
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEFAULT: begin
         mux_to_pads_o.debug_out4.chip2pad = s_reg2hw.debug_out4_cfg.chip2pad.q;
         mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
         mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
         mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
         mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
         mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
         mux_to_pads_o.debug_out4.pudis = s_reg2hw.debug_out4_cfg.pudis.q;
         mux_to_pads_o.debug_out4.rxdis = s_reg2hw.debug_out4_cfg.rxdis.q;
         mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
         mux_to_pads_o.debug_out4.trie = s_reg2hw.debug_out4_cfg.trie.q;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_ALT_CLK: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.alt_clk;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_ALT_PLL: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.alt_pll;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_CLK: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.host_clk;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_PLL: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.host_pll;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_HOST_POR_N: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.host_por_n;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_CLK: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.periph_clk;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.periph_domain_clk;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.periph_domain_rstn;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PERIPH_PLL: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.periph_pll;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PULP_CLUSTER_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.pulp_cluster_domain_clk;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_PULP_CLUSTER_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.pulp_cluster_domain_rstn;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SAFETY_ISLAND_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.safety_island_domain_clk;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SAFETY_ISLAND_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.safety_island_domain_rstn;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SECURITY_ISLAND_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.security_island_domain_clk;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SECURITY_ISLAND_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.security_island_domain_rstn;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SPATZ_CLUSTER_DOMAIN_CLK: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.spatz_cluster_domain_clk;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       PAD_MUX_GROUP_DEBUG_OUT4_DEBUG_SIGNALS_SEL_DEBUG_SIGNALS_SPATZ_CLUSTER_DOMAIN_RSTN: begin
          mux_to_pads_o.debug_out4.chip2pad = port_signals_soc2pad_i.debug_signals.spatz_cluster_domain_rstn;
          mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
          mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
          mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
          mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
          mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
          mux_to_pads_o.debug_out4.pudis = 1'b1;
          mux_to_pads_o.debug_out4.rxdis = 1'b1;
          mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
          mux_to_pads_o.debug_out4.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.debug_out4.chip2pad = s_reg2hw.debug_out4_cfg.chip2pad.q;
         mux_to_pads_o.debug_out4.drv0 = s_reg2hw.debug_out4_cfg.drv0.q;
         mux_to_pads_o.debug_out4.drv1 = s_reg2hw.debug_out4_cfg.drv1.q;
         mux_to_pads_o.debug_out4.drv2 = s_reg2hw.debug_out4_cfg.drv2.q;
         mux_to_pads_o.debug_out4.pde = s_reg2hw.debug_out4_cfg.pde.q;
         mux_to_pads_o.debug_out4.pp_odrain_selector = s_reg2hw.debug_out4_cfg.pp_odrain_selector.q;
         mux_to_pads_o.debug_out4.pudis = s_reg2hw.debug_out4_cfg.pudis.q;
         mux_to_pads_o.debug_out4.rxdis = s_reg2hw.debug_out4_cfg.rxdis.q;
         mux_to_pads_o.debug_out4.slw_pgm = s_reg2hw.debug_out4_cfg.slw_pgm.q;
         mux_to_pads_o.debug_out4.trie = s_reg2hw.debug_out4_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad jtag_pll_00
   always_comb begin
     unique case (s_reg2hw.jtag_pll_00_mux_sel.q)
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_00_SEL_DEFAULT: begin
         mux_to_pads_o.jtag_pll_00.chip2pad = s_reg2hw.jtag_pll_00_cfg.chip2pad.q;
         mux_to_pads_o.jtag_pll_00.drv0 = s_reg2hw.jtag_pll_00_cfg.drv0.q;
         mux_to_pads_o.jtag_pll_00.drv1 = s_reg2hw.jtag_pll_00_cfg.drv1.q;
         mux_to_pads_o.jtag_pll_00.drv2 = s_reg2hw.jtag_pll_00_cfg.drv2.q;
         mux_to_pads_o.jtag_pll_00.pde = s_reg2hw.jtag_pll_00_cfg.pde.q;
         mux_to_pads_o.jtag_pll_00.pp_odrain_selector = s_reg2hw.jtag_pll_00_cfg.pp_odrain_selector.q;
         mux_to_pads_o.jtag_pll_00.pudis = s_reg2hw.jtag_pll_00_cfg.pudis.q;
         mux_to_pads_o.jtag_pll_00.rxdis = s_reg2hw.jtag_pll_00_cfg.rxdis.q;
         mux_to_pads_o.jtag_pll_00.slw_pgm = s_reg2hw.jtag_pll_00_cfg.slw_pgm.q;
         mux_to_pads_o.jtag_pll_00.trie = s_reg2hw.jtag_pll_00_cfg.trie.q;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_00_SEL_JTAG_PLL0_TCK: begin
          mux_to_pads_o.jtag_pll_00.chip2pad = 1'b0;
          mux_to_pads_o.jtag_pll_00.drv0 = s_reg2hw.jtag_pll_00_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_00.drv1 = s_reg2hw.jtag_pll_00_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_00.drv2 = s_reg2hw.jtag_pll_00_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_00.pde = 1'b0;
          mux_to_pads_o.jtag_pll_00.pp_odrain_selector = s_reg2hw.jtag_pll_00_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_00.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_00.rxdis = 1'b0;
          mux_to_pads_o.jtag_pll_00.slw_pgm = s_reg2hw.jtag_pll_00_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_00.trie = 1'b1;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_00_SEL_JTAG_PLL1_TCK: begin
          mux_to_pads_o.jtag_pll_00.chip2pad = 1'b0;
          mux_to_pads_o.jtag_pll_00.drv0 = s_reg2hw.jtag_pll_00_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_00.drv1 = s_reg2hw.jtag_pll_00_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_00.drv2 = s_reg2hw.jtag_pll_00_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_00.pde = 1'b0;
          mux_to_pads_o.jtag_pll_00.pp_odrain_selector = s_reg2hw.jtag_pll_00_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_00.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_00.rxdis = 1'b0;
          mux_to_pads_o.jtag_pll_00.slw_pgm = s_reg2hw.jtag_pll_00_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_00.trie = 1'b1;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_00_SEL_JTAG_PLL2_TCK: begin
          mux_to_pads_o.jtag_pll_00.chip2pad = 1'b0;
          mux_to_pads_o.jtag_pll_00.drv0 = s_reg2hw.jtag_pll_00_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_00.drv1 = s_reg2hw.jtag_pll_00_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_00.drv2 = s_reg2hw.jtag_pll_00_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_00.pde = 1'b0;
          mux_to_pads_o.jtag_pll_00.pp_odrain_selector = s_reg2hw.jtag_pll_00_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_00.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_00.rxdis = 1'b0;
          mux_to_pads_o.jtag_pll_00.slw_pgm = s_reg2hw.jtag_pll_00_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_00.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.jtag_pll_00.chip2pad = s_reg2hw.jtag_pll_00_cfg.chip2pad.q;
         mux_to_pads_o.jtag_pll_00.drv0 = s_reg2hw.jtag_pll_00_cfg.drv0.q;
         mux_to_pads_o.jtag_pll_00.drv1 = s_reg2hw.jtag_pll_00_cfg.drv1.q;
         mux_to_pads_o.jtag_pll_00.drv2 = s_reg2hw.jtag_pll_00_cfg.drv2.q;
         mux_to_pads_o.jtag_pll_00.pde = s_reg2hw.jtag_pll_00_cfg.pde.q;
         mux_to_pads_o.jtag_pll_00.pp_odrain_selector = s_reg2hw.jtag_pll_00_cfg.pp_odrain_selector.q;
         mux_to_pads_o.jtag_pll_00.pudis = s_reg2hw.jtag_pll_00_cfg.pudis.q;
         mux_to_pads_o.jtag_pll_00.rxdis = s_reg2hw.jtag_pll_00_cfg.rxdis.q;
         mux_to_pads_o.jtag_pll_00.slw_pgm = s_reg2hw.jtag_pll_00_cfg.slw_pgm.q;
         mux_to_pads_o.jtag_pll_00.trie = s_reg2hw.jtag_pll_00_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad jtag_pll_01
   always_comb begin
     unique case (s_reg2hw.jtag_pll_01_mux_sel.q)
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_01_SEL_DEFAULT: begin
         mux_to_pads_o.jtag_pll_01.chip2pad = s_reg2hw.jtag_pll_01_cfg.chip2pad.q;
         mux_to_pads_o.jtag_pll_01.drv0 = s_reg2hw.jtag_pll_01_cfg.drv0.q;
         mux_to_pads_o.jtag_pll_01.drv1 = s_reg2hw.jtag_pll_01_cfg.drv1.q;
         mux_to_pads_o.jtag_pll_01.drv2 = s_reg2hw.jtag_pll_01_cfg.drv2.q;
         mux_to_pads_o.jtag_pll_01.pde = s_reg2hw.jtag_pll_01_cfg.pde.q;
         mux_to_pads_o.jtag_pll_01.pp_odrain_selector = s_reg2hw.jtag_pll_01_cfg.pp_odrain_selector.q;
         mux_to_pads_o.jtag_pll_01.pudis = s_reg2hw.jtag_pll_01_cfg.pudis.q;
         mux_to_pads_o.jtag_pll_01.rxdis = s_reg2hw.jtag_pll_01_cfg.rxdis.q;
         mux_to_pads_o.jtag_pll_01.slw_pgm = s_reg2hw.jtag_pll_01_cfg.slw_pgm.q;
         mux_to_pads_o.jtag_pll_01.trie = s_reg2hw.jtag_pll_01_cfg.trie.q;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_01_SEL_JTAG_PLL0_TMS: begin
          mux_to_pads_o.jtag_pll_01.chip2pad = 1'b0;
          mux_to_pads_o.jtag_pll_01.drv0 = s_reg2hw.jtag_pll_01_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_01.drv1 = s_reg2hw.jtag_pll_01_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_01.drv2 = s_reg2hw.jtag_pll_01_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_01.pde = 1'b0;
          mux_to_pads_o.jtag_pll_01.pp_odrain_selector = s_reg2hw.jtag_pll_01_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_01.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_01.rxdis = 1'b0;
          mux_to_pads_o.jtag_pll_01.slw_pgm = s_reg2hw.jtag_pll_01_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_01.trie = 1'b1;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_01_SEL_JTAG_PLL1_TMS: begin
          mux_to_pads_o.jtag_pll_01.chip2pad = 1'b0;
          mux_to_pads_o.jtag_pll_01.drv0 = s_reg2hw.jtag_pll_01_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_01.drv1 = s_reg2hw.jtag_pll_01_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_01.drv2 = s_reg2hw.jtag_pll_01_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_01.pde = 1'b0;
          mux_to_pads_o.jtag_pll_01.pp_odrain_selector = s_reg2hw.jtag_pll_01_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_01.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_01.rxdis = 1'b0;
          mux_to_pads_o.jtag_pll_01.slw_pgm = s_reg2hw.jtag_pll_01_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_01.trie = 1'b1;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_01_SEL_JTAG_PLL2_TMS: begin
          mux_to_pads_o.jtag_pll_01.chip2pad = 1'b0;
          mux_to_pads_o.jtag_pll_01.drv0 = s_reg2hw.jtag_pll_01_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_01.drv1 = s_reg2hw.jtag_pll_01_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_01.drv2 = s_reg2hw.jtag_pll_01_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_01.pde = 1'b0;
          mux_to_pads_o.jtag_pll_01.pp_odrain_selector = s_reg2hw.jtag_pll_01_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_01.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_01.rxdis = 1'b0;
          mux_to_pads_o.jtag_pll_01.slw_pgm = s_reg2hw.jtag_pll_01_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_01.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.jtag_pll_01.chip2pad = s_reg2hw.jtag_pll_01_cfg.chip2pad.q;
         mux_to_pads_o.jtag_pll_01.drv0 = s_reg2hw.jtag_pll_01_cfg.drv0.q;
         mux_to_pads_o.jtag_pll_01.drv1 = s_reg2hw.jtag_pll_01_cfg.drv1.q;
         mux_to_pads_o.jtag_pll_01.drv2 = s_reg2hw.jtag_pll_01_cfg.drv2.q;
         mux_to_pads_o.jtag_pll_01.pde = s_reg2hw.jtag_pll_01_cfg.pde.q;
         mux_to_pads_o.jtag_pll_01.pp_odrain_selector = s_reg2hw.jtag_pll_01_cfg.pp_odrain_selector.q;
         mux_to_pads_o.jtag_pll_01.pudis = s_reg2hw.jtag_pll_01_cfg.pudis.q;
         mux_to_pads_o.jtag_pll_01.rxdis = s_reg2hw.jtag_pll_01_cfg.rxdis.q;
         mux_to_pads_o.jtag_pll_01.slw_pgm = s_reg2hw.jtag_pll_01_cfg.slw_pgm.q;
         mux_to_pads_o.jtag_pll_01.trie = s_reg2hw.jtag_pll_01_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad jtag_pll_02
   always_comb begin
     unique case (s_reg2hw.jtag_pll_02_mux_sel.q)
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_02_SEL_DEFAULT: begin
         mux_to_pads_o.jtag_pll_02.chip2pad = s_reg2hw.jtag_pll_02_cfg.chip2pad.q;
         mux_to_pads_o.jtag_pll_02.drv0 = s_reg2hw.jtag_pll_02_cfg.drv0.q;
         mux_to_pads_o.jtag_pll_02.drv1 = s_reg2hw.jtag_pll_02_cfg.drv1.q;
         mux_to_pads_o.jtag_pll_02.drv2 = s_reg2hw.jtag_pll_02_cfg.drv2.q;
         mux_to_pads_o.jtag_pll_02.pde = s_reg2hw.jtag_pll_02_cfg.pde.q;
         mux_to_pads_o.jtag_pll_02.pp_odrain_selector = s_reg2hw.jtag_pll_02_cfg.pp_odrain_selector.q;
         mux_to_pads_o.jtag_pll_02.pudis = s_reg2hw.jtag_pll_02_cfg.pudis.q;
         mux_to_pads_o.jtag_pll_02.rxdis = s_reg2hw.jtag_pll_02_cfg.rxdis.q;
         mux_to_pads_o.jtag_pll_02.slw_pgm = s_reg2hw.jtag_pll_02_cfg.slw_pgm.q;
         mux_to_pads_o.jtag_pll_02.trie = s_reg2hw.jtag_pll_02_cfg.trie.q;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_02_SEL_JTAG_PLL0_TDI: begin
          mux_to_pads_o.jtag_pll_02.chip2pad = 1'b0;
          mux_to_pads_o.jtag_pll_02.drv0 = s_reg2hw.jtag_pll_02_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_02.drv1 = s_reg2hw.jtag_pll_02_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_02.drv2 = s_reg2hw.jtag_pll_02_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_02.pde = 1'b0;
          mux_to_pads_o.jtag_pll_02.pp_odrain_selector = s_reg2hw.jtag_pll_02_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_02.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_02.rxdis = 1'b0;
          mux_to_pads_o.jtag_pll_02.slw_pgm = s_reg2hw.jtag_pll_02_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_02.trie = 1'b1;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_02_SEL_JTAG_PLL1_TDI: begin
          mux_to_pads_o.jtag_pll_02.chip2pad = 1'b0;
          mux_to_pads_o.jtag_pll_02.drv0 = s_reg2hw.jtag_pll_02_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_02.drv1 = s_reg2hw.jtag_pll_02_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_02.drv2 = s_reg2hw.jtag_pll_02_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_02.pde = 1'b0;
          mux_to_pads_o.jtag_pll_02.pp_odrain_selector = s_reg2hw.jtag_pll_02_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_02.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_02.rxdis = 1'b0;
          mux_to_pads_o.jtag_pll_02.slw_pgm = s_reg2hw.jtag_pll_02_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_02.trie = 1'b1;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_02_SEL_JTAG_PLL2_TDI: begin
          mux_to_pads_o.jtag_pll_02.chip2pad = 1'b0;
          mux_to_pads_o.jtag_pll_02.drv0 = s_reg2hw.jtag_pll_02_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_02.drv1 = s_reg2hw.jtag_pll_02_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_02.drv2 = s_reg2hw.jtag_pll_02_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_02.pde = 1'b0;
          mux_to_pads_o.jtag_pll_02.pp_odrain_selector = s_reg2hw.jtag_pll_02_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_02.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_02.rxdis = 1'b0;
          mux_to_pads_o.jtag_pll_02.slw_pgm = s_reg2hw.jtag_pll_02_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_02.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.jtag_pll_02.chip2pad = s_reg2hw.jtag_pll_02_cfg.chip2pad.q;
         mux_to_pads_o.jtag_pll_02.drv0 = s_reg2hw.jtag_pll_02_cfg.drv0.q;
         mux_to_pads_o.jtag_pll_02.drv1 = s_reg2hw.jtag_pll_02_cfg.drv1.q;
         mux_to_pads_o.jtag_pll_02.drv2 = s_reg2hw.jtag_pll_02_cfg.drv2.q;
         mux_to_pads_o.jtag_pll_02.pde = s_reg2hw.jtag_pll_02_cfg.pde.q;
         mux_to_pads_o.jtag_pll_02.pp_odrain_selector = s_reg2hw.jtag_pll_02_cfg.pp_odrain_selector.q;
         mux_to_pads_o.jtag_pll_02.pudis = s_reg2hw.jtag_pll_02_cfg.pudis.q;
         mux_to_pads_o.jtag_pll_02.rxdis = s_reg2hw.jtag_pll_02_cfg.rxdis.q;
         mux_to_pads_o.jtag_pll_02.slw_pgm = s_reg2hw.jtag_pll_02_cfg.slw_pgm.q;
         mux_to_pads_o.jtag_pll_02.trie = s_reg2hw.jtag_pll_02_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad jtag_pll_03
   always_comb begin
     unique case (s_reg2hw.jtag_pll_03_mux_sel.q)
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_03_SEL_DEFAULT: begin
         mux_to_pads_o.jtag_pll_03.chip2pad = s_reg2hw.jtag_pll_03_cfg.chip2pad.q;
         mux_to_pads_o.jtag_pll_03.drv0 = s_reg2hw.jtag_pll_03_cfg.drv0.q;
         mux_to_pads_o.jtag_pll_03.drv1 = s_reg2hw.jtag_pll_03_cfg.drv1.q;
         mux_to_pads_o.jtag_pll_03.drv2 = s_reg2hw.jtag_pll_03_cfg.drv2.q;
         mux_to_pads_o.jtag_pll_03.pde = s_reg2hw.jtag_pll_03_cfg.pde.q;
         mux_to_pads_o.jtag_pll_03.pp_odrain_selector = s_reg2hw.jtag_pll_03_cfg.pp_odrain_selector.q;
         mux_to_pads_o.jtag_pll_03.pudis = s_reg2hw.jtag_pll_03_cfg.pudis.q;
         mux_to_pads_o.jtag_pll_03.rxdis = s_reg2hw.jtag_pll_03_cfg.rxdis.q;
         mux_to_pads_o.jtag_pll_03.slw_pgm = s_reg2hw.jtag_pll_03_cfg.slw_pgm.q;
         mux_to_pads_o.jtag_pll_03.trie = s_reg2hw.jtag_pll_03_cfg.trie.q;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_03_SEL_JTAG_PLL0_TRSTN: begin
          mux_to_pads_o.jtag_pll_03.chip2pad = 1'b0;
          mux_to_pads_o.jtag_pll_03.drv0 = s_reg2hw.jtag_pll_03_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_03.drv1 = s_reg2hw.jtag_pll_03_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_03.drv2 = s_reg2hw.jtag_pll_03_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_03.pde = 1'b0;
          mux_to_pads_o.jtag_pll_03.pp_odrain_selector = s_reg2hw.jtag_pll_03_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_03.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_03.rxdis = 1'b0;
          mux_to_pads_o.jtag_pll_03.slw_pgm = s_reg2hw.jtag_pll_03_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_03.trie = 1'b1;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_03_SEL_JTAG_PLL1_TRSTN: begin
          mux_to_pads_o.jtag_pll_03.chip2pad = 1'b0;
          mux_to_pads_o.jtag_pll_03.drv0 = s_reg2hw.jtag_pll_03_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_03.drv1 = s_reg2hw.jtag_pll_03_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_03.drv2 = s_reg2hw.jtag_pll_03_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_03.pde = 1'b0;
          mux_to_pads_o.jtag_pll_03.pp_odrain_selector = s_reg2hw.jtag_pll_03_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_03.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_03.rxdis = 1'b0;
          mux_to_pads_o.jtag_pll_03.slw_pgm = s_reg2hw.jtag_pll_03_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_03.trie = 1'b1;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_03_SEL_JTAG_PLL2_TRSTN: begin
          mux_to_pads_o.jtag_pll_03.chip2pad = 1'b0;
          mux_to_pads_o.jtag_pll_03.drv0 = s_reg2hw.jtag_pll_03_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_03.drv1 = s_reg2hw.jtag_pll_03_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_03.drv2 = s_reg2hw.jtag_pll_03_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_03.pde = 1'b0;
          mux_to_pads_o.jtag_pll_03.pp_odrain_selector = s_reg2hw.jtag_pll_03_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_03.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_03.rxdis = 1'b0;
          mux_to_pads_o.jtag_pll_03.slw_pgm = s_reg2hw.jtag_pll_03_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_03.trie = 1'b1;
       end
       default: begin
         mux_to_pads_o.jtag_pll_03.chip2pad = s_reg2hw.jtag_pll_03_cfg.chip2pad.q;
         mux_to_pads_o.jtag_pll_03.drv0 = s_reg2hw.jtag_pll_03_cfg.drv0.q;
         mux_to_pads_o.jtag_pll_03.drv1 = s_reg2hw.jtag_pll_03_cfg.drv1.q;
         mux_to_pads_o.jtag_pll_03.drv2 = s_reg2hw.jtag_pll_03_cfg.drv2.q;
         mux_to_pads_o.jtag_pll_03.pde = s_reg2hw.jtag_pll_03_cfg.pde.q;
         mux_to_pads_o.jtag_pll_03.pp_odrain_selector = s_reg2hw.jtag_pll_03_cfg.pp_odrain_selector.q;
         mux_to_pads_o.jtag_pll_03.pudis = s_reg2hw.jtag_pll_03_cfg.pudis.q;
         mux_to_pads_o.jtag_pll_03.rxdis = s_reg2hw.jtag_pll_03_cfg.rxdis.q;
         mux_to_pads_o.jtag_pll_03.slw_pgm = s_reg2hw.jtag_pll_03_cfg.slw_pgm.q;
         mux_to_pads_o.jtag_pll_03.trie = s_reg2hw.jtag_pll_03_cfg.trie.q;
       end
     endcase
   end // always_comb

   // Pad jtag_pll_04
   always_comb begin
     unique case (s_reg2hw.jtag_pll_04_mux_sel.q)
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_04_SEL_DEFAULT: begin
         mux_to_pads_o.jtag_pll_04.chip2pad = s_reg2hw.jtag_pll_04_cfg.chip2pad.q;
         mux_to_pads_o.jtag_pll_04.drv0 = s_reg2hw.jtag_pll_04_cfg.drv0.q;
         mux_to_pads_o.jtag_pll_04.drv1 = s_reg2hw.jtag_pll_04_cfg.drv1.q;
         mux_to_pads_o.jtag_pll_04.drv2 = s_reg2hw.jtag_pll_04_cfg.drv2.q;
         mux_to_pads_o.jtag_pll_04.pde = s_reg2hw.jtag_pll_04_cfg.pde.q;
         mux_to_pads_o.jtag_pll_04.pp_odrain_selector = s_reg2hw.jtag_pll_04_cfg.pp_odrain_selector.q;
         mux_to_pads_o.jtag_pll_04.pudis = s_reg2hw.jtag_pll_04_cfg.pudis.q;
         mux_to_pads_o.jtag_pll_04.rxdis = s_reg2hw.jtag_pll_04_cfg.rxdis.q;
         mux_to_pads_o.jtag_pll_04.slw_pgm = s_reg2hw.jtag_pll_04_cfg.slw_pgm.q;
         mux_to_pads_o.jtag_pll_04.trie = s_reg2hw.jtag_pll_04_cfg.trie.q;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_04_SEL_JTAG_PLL0_TDO: begin
          mux_to_pads_o.jtag_pll_04.chip2pad = port_signals_soc2pad_i.jtag_pll0.tdo_o;
          mux_to_pads_o.jtag_pll_04.drv0 = s_reg2hw.jtag_pll_04_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_04.drv1 = s_reg2hw.jtag_pll_04_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_04.drv2 = s_reg2hw.jtag_pll_04_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_04.pde = 1'b0;
          mux_to_pads_o.jtag_pll_04.pp_odrain_selector = s_reg2hw.jtag_pll_04_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_04.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_04.rxdis = 1'b1;
          mux_to_pads_o.jtag_pll_04.slw_pgm = s_reg2hw.jtag_pll_04_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_04.trie = 1'b0;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_04_SEL_JTAG_PLL1_TDO: begin
          mux_to_pads_o.jtag_pll_04.chip2pad = port_signals_soc2pad_i.jtag_pll1.tdo_o;
          mux_to_pads_o.jtag_pll_04.drv0 = s_reg2hw.jtag_pll_04_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_04.drv1 = s_reg2hw.jtag_pll_04_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_04.drv2 = s_reg2hw.jtag_pll_04_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_04.pde = 1'b0;
          mux_to_pads_o.jtag_pll_04.pp_odrain_selector = s_reg2hw.jtag_pll_04_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_04.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_04.rxdis = 1'b1;
          mux_to_pads_o.jtag_pll_04.slw_pgm = s_reg2hw.jtag_pll_04_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_04.trie = 1'b0;
       end
       PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_04_SEL_JTAG_PLL2_TDO: begin
          mux_to_pads_o.jtag_pll_04.chip2pad = port_signals_soc2pad_i.jtag_pll2.tdo_o;
          mux_to_pads_o.jtag_pll_04.drv0 = s_reg2hw.jtag_pll_04_cfg.drv0.q;
          mux_to_pads_o.jtag_pll_04.drv1 = s_reg2hw.jtag_pll_04_cfg.drv1.q;
          mux_to_pads_o.jtag_pll_04.drv2 = s_reg2hw.jtag_pll_04_cfg.drv2.q;
          mux_to_pads_o.jtag_pll_04.pde = 1'b0;
          mux_to_pads_o.jtag_pll_04.pp_odrain_selector = s_reg2hw.jtag_pll_04_cfg.pp_odrain_selector.q;
          mux_to_pads_o.jtag_pll_04.pudis = 1'b0;
          mux_to_pads_o.jtag_pll_04.rxdis = 1'b1;
          mux_to_pads_o.jtag_pll_04.slw_pgm = s_reg2hw.jtag_pll_04_cfg.slw_pgm.q;
          mux_to_pads_o.jtag_pll_04.trie = 1'b0;
       end
       default: begin
         mux_to_pads_o.jtag_pll_04.chip2pad = s_reg2hw.jtag_pll_04_cfg.chip2pad.q;
         mux_to_pads_o.jtag_pll_04.drv0 = s_reg2hw.jtag_pll_04_cfg.drv0.q;
         mux_to_pads_o.jtag_pll_04.drv1 = s_reg2hw.jtag_pll_04_cfg.drv1.q;
         mux_to_pads_o.jtag_pll_04.drv2 = s_reg2hw.jtag_pll_04_cfg.drv2.q;
         mux_to_pads_o.jtag_pll_04.pde = s_reg2hw.jtag_pll_04_cfg.pde.q;
         mux_to_pads_o.jtag_pll_04.pp_odrain_selector = s_reg2hw.jtag_pll_04_cfg.pp_odrain_selector.q;
         mux_to_pads_o.jtag_pll_04.pudis = s_reg2hw.jtag_pll_04_cfg.pudis.q;
         mux_to_pads_o.jtag_pll_04.rxdis = s_reg2hw.jtag_pll_04_cfg.rxdis.q;
         mux_to_pads_o.jtag_pll_04.slw_pgm = s_reg2hw.jtag_pll_04_cfg.slw_pgm.q;
         mux_to_pads_o.jtag_pll_04.trie = s_reg2hw.jtag_pll_04_cfg.trie.q;
       end
     endcase
   end // always_comb


  // Pad -> SoC Multiplex Logic
  // Port Group uart0_host

  // Port Signal rx_i
  logic [0:0] port_mux_sel_uart0_host_rx_i_req;
  logic [PORT_MUX_GROUP_HOST_00_SEL_WIDTH-1:0] port_mux_sel_uart0_host_rx_i_arbitrated;
  logic port_mux_sel_uart0_host_rx_i_no_connection;

   assign port_mux_sel_uart0_host_rx_i_req[PORT_MUX_GROUP_HOST_00_SEL_HOST_00] = s_reg2hw.host_00_mux_sel.q == PAD_MUX_GROUP_HOST_00_SEL_UART0_HOST_RX ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_uart0_host_rx_i_arbiter (
     .in_i(port_mux_sel_uart0_host_rx_i_req),
     .cnt_o(port_mux_sel_uart0_host_rx_i_arbitrated),
     .empty_o(port_mux_sel_uart0_host_rx_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_uart0_host_rx_i_no_connection) begin
        port_signals_pad2soc_o.uart0_host.rx_i = 1'b1;
     end else begin
        unique case (port_mux_sel_uart0_host_rx_i_arbitrated)
          PORT_MUX_GROUP_HOST_00_SEL_HOST_00: begin
            port_signals_pad2soc_o.uart0_host.rx_i = pads_to_mux_i.host_00.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.uart0_host.rx_i = 1'b1;
          end
       endcase
     end
   end


  // Port Group qspi0_host

  // Port Signal sd0_i
  logic [0:0] port_mux_sel_qspi0_host_sd0_i_req;
  logic [PORT_MUX_GROUP_HOST_02_SEL_WIDTH-1:0] port_mux_sel_qspi0_host_sd0_i_arbitrated;
  logic port_mux_sel_qspi0_host_sd0_i_no_connection;

   assign port_mux_sel_qspi0_host_sd0_i_req[PORT_MUX_GROUP_HOST_02_SEL_HOST_02] = s_reg2hw.host_02_mux_sel.q == PAD_MUX_GROUP_HOST_02_SEL_QSPI0_HOST_SDIO0 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_qspi0_host_sd0_i_arbiter (
     .in_i(port_mux_sel_qspi0_host_sd0_i_req),
     .cnt_o(port_mux_sel_qspi0_host_sd0_i_arbitrated),
     .empty_o(port_mux_sel_qspi0_host_sd0_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_qspi0_host_sd0_i_no_connection) begin
        port_signals_pad2soc_o.qspi0_host.sd0_i = 1'b0;
     end else begin
        unique case (port_mux_sel_qspi0_host_sd0_i_arbitrated)
          PORT_MUX_GROUP_HOST_02_SEL_HOST_02: begin
            port_signals_pad2soc_o.qspi0_host.sd0_i = pads_to_mux_i.host_02.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.qspi0_host.sd0_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal sd1_i
  logic [0:0] port_mux_sel_qspi0_host_sd1_i_req;
  logic [PORT_MUX_GROUP_HOST_03_SEL_WIDTH-1:0] port_mux_sel_qspi0_host_sd1_i_arbitrated;
  logic port_mux_sel_qspi0_host_sd1_i_no_connection;

   assign port_mux_sel_qspi0_host_sd1_i_req[PORT_MUX_GROUP_HOST_03_SEL_HOST_03] = s_reg2hw.host_03_mux_sel.q == PAD_MUX_GROUP_HOST_03_SEL_QSPI0_HOST_SDIO1 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_qspi0_host_sd1_i_arbiter (
     .in_i(port_mux_sel_qspi0_host_sd1_i_req),
     .cnt_o(port_mux_sel_qspi0_host_sd1_i_arbitrated),
     .empty_o(port_mux_sel_qspi0_host_sd1_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_qspi0_host_sd1_i_no_connection) begin
        port_signals_pad2soc_o.qspi0_host.sd1_i = 1'b0;
     end else begin
        unique case (port_mux_sel_qspi0_host_sd1_i_arbitrated)
          PORT_MUX_GROUP_HOST_03_SEL_HOST_03: begin
            port_signals_pad2soc_o.qspi0_host.sd1_i = pads_to_mux_i.host_03.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.qspi0_host.sd1_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal sd2_i
  logic [0:0] port_mux_sel_qspi0_host_sd2_i_req;
  logic [PORT_MUX_GROUP_HOST_04_SEL_WIDTH-1:0] port_mux_sel_qspi0_host_sd2_i_arbitrated;
  logic port_mux_sel_qspi0_host_sd2_i_no_connection;

   assign port_mux_sel_qspi0_host_sd2_i_req[PORT_MUX_GROUP_HOST_04_SEL_HOST_04] = s_reg2hw.host_04_mux_sel.q == PAD_MUX_GROUP_HOST_04_SEL_QSPI0_HOST_SDIO2 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_qspi0_host_sd2_i_arbiter (
     .in_i(port_mux_sel_qspi0_host_sd2_i_req),
     .cnt_o(port_mux_sel_qspi0_host_sd2_i_arbitrated),
     .empty_o(port_mux_sel_qspi0_host_sd2_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_qspi0_host_sd2_i_no_connection) begin
        port_signals_pad2soc_o.qspi0_host.sd2_i = 1'b0;
     end else begin
        unique case (port_mux_sel_qspi0_host_sd2_i_arbitrated)
          PORT_MUX_GROUP_HOST_04_SEL_HOST_04: begin
            port_signals_pad2soc_o.qspi0_host.sd2_i = pads_to_mux_i.host_04.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.qspi0_host.sd2_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal sd3_i
  logic [0:0] port_mux_sel_qspi0_host_sd3_i_req;
  logic [PORT_MUX_GROUP_HOST_05_SEL_WIDTH-1:0] port_mux_sel_qspi0_host_sd3_i_arbitrated;
  logic port_mux_sel_qspi0_host_sd3_i_no_connection;

   assign port_mux_sel_qspi0_host_sd3_i_req[PORT_MUX_GROUP_HOST_05_SEL_HOST_05] = s_reg2hw.host_05_mux_sel.q == PAD_MUX_GROUP_HOST_05_SEL_QSPI0_HOST_SDIO3 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_qspi0_host_sd3_i_arbiter (
     .in_i(port_mux_sel_qspi0_host_sd3_i_req),
     .cnt_o(port_mux_sel_qspi0_host_sd3_i_arbitrated),
     .empty_o(port_mux_sel_qspi0_host_sd3_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_qspi0_host_sd3_i_no_connection) begin
        port_signals_pad2soc_o.qspi0_host.sd3_i = 1'b0;
     end else begin
        unique case (port_mux_sel_qspi0_host_sd3_i_arbitrated)
          PORT_MUX_GROUP_HOST_05_SEL_HOST_05: begin
            port_signals_pad2soc_o.qspi0_host.sd3_i = pads_to_mux_i.host_05.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.qspi0_host.sd3_i = 1'b0;
          end
       endcase
     end
   end




  // Port Group i2c0_host

  // Port Signal sda_i
  logic [0:0] port_mux_sel_i2c0_host_sda_i_req;
  logic [PORT_MUX_GROUP_HOST_09_SEL_WIDTH-1:0] port_mux_sel_i2c0_host_sda_i_arbitrated;
  logic port_mux_sel_i2c0_host_sda_i_no_connection;

   assign port_mux_sel_i2c0_host_sda_i_req[PORT_MUX_GROUP_HOST_09_SEL_HOST_09] = s_reg2hw.host_09_mux_sel.q == PAD_MUX_GROUP_HOST_09_SEL_I2C0_HOST_SDA ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_i2c0_host_sda_i_arbiter (
     .in_i(port_mux_sel_i2c0_host_sda_i_req),
     .cnt_o(port_mux_sel_i2c0_host_sda_i_arbitrated),
     .empty_o(port_mux_sel_i2c0_host_sda_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_i2c0_host_sda_i_no_connection) begin
        port_signals_pad2soc_o.i2c0_host.sda_i = 1'b1;
     end else begin
        unique case (port_mux_sel_i2c0_host_sda_i_arbitrated)
          PORT_MUX_GROUP_HOST_09_SEL_HOST_09: begin
            port_signals_pad2soc_o.i2c0_host.sda_i = pads_to_mux_i.host_09.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.i2c0_host.sda_i = 1'b1;
          end
       endcase
     end
   end


  // Port Signal scl_i
  logic [0:0] port_mux_sel_i2c0_host_scl_i_req;
  logic [PORT_MUX_GROUP_HOST_10_SEL_WIDTH-1:0] port_mux_sel_i2c0_host_scl_i_arbitrated;
  logic port_mux_sel_i2c0_host_scl_i_no_connection;

   assign port_mux_sel_i2c0_host_scl_i_req[PORT_MUX_GROUP_HOST_10_SEL_HOST_10] = s_reg2hw.host_10_mux_sel.q == PAD_MUX_GROUP_HOST_10_SEL_I2C0_HOST_SCL ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_i2c0_host_scl_i_arbiter (
     .in_i(port_mux_sel_i2c0_host_scl_i_req),
     .cnt_o(port_mux_sel_i2c0_host_scl_i_arbitrated),
     .empty_o(port_mux_sel_i2c0_host_scl_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_i2c0_host_scl_i_no_connection) begin
        port_signals_pad2soc_o.i2c0_host.scl_i = 1'b1;
     end else begin
        unique case (port_mux_sel_i2c0_host_scl_i_arbitrated)
          PORT_MUX_GROUP_HOST_10_SEL_HOST_10: begin
            port_signals_pad2soc_o.i2c0_host.scl_i = pads_to_mux_i.host_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.i2c0_host.scl_i = 1'b1;
          end
       endcase
     end
   end

  // Port Group qspi0_sec_isln

  // Port Signal sd0_i
  logic [0:0] port_mux_sel_qspi0_sec_isln_sd0_i_req;
  logic [PORT_MUX_GROUP_SECURE_00_SEL_WIDTH-1:0] port_mux_sel_qspi0_sec_isln_sd0_i_arbitrated;
  logic port_mux_sel_qspi0_sec_isln_sd0_i_no_connection;

   assign port_mux_sel_qspi0_sec_isln_sd0_i_req[PORT_MUX_GROUP_SECURE_00_SEL_SECURE_00] = s_reg2hw.secure_00_mux_sel.q == PAD_MUX_GROUP_SECURE_00_SEL_QSPI0_SEC_ISLN_SDIO0 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_qspi0_sec_isln_sd0_i_arbiter (
     .in_i(port_mux_sel_qspi0_sec_isln_sd0_i_req),
     .cnt_o(port_mux_sel_qspi0_sec_isln_sd0_i_arbitrated),
     .empty_o(port_mux_sel_qspi0_sec_isln_sd0_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_qspi0_sec_isln_sd0_i_no_connection) begin
        port_signals_pad2soc_o.qspi0_sec_isln.sd0_i = 1'b0;
     end else begin
        unique case (port_mux_sel_qspi0_sec_isln_sd0_i_arbitrated)
          PORT_MUX_GROUP_SECURE_00_SEL_SECURE_00: begin
            port_signals_pad2soc_o.qspi0_sec_isln.sd0_i = pads_to_mux_i.secure_00.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.qspi0_sec_isln.sd0_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal sd1_i
  logic [0:0] port_mux_sel_qspi0_sec_isln_sd1_i_req;
  logic [PORT_MUX_GROUP_SECURE_01_SEL_WIDTH-1:0] port_mux_sel_qspi0_sec_isln_sd1_i_arbitrated;
  logic port_mux_sel_qspi0_sec_isln_sd1_i_no_connection;

   assign port_mux_sel_qspi0_sec_isln_sd1_i_req[PORT_MUX_GROUP_SECURE_01_SEL_SECURE_01] = s_reg2hw.secure_01_mux_sel.q == PAD_MUX_GROUP_SECURE_01_SEL_QSPI0_SEC_ISLN_SDIO1 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_qspi0_sec_isln_sd1_i_arbiter (
     .in_i(port_mux_sel_qspi0_sec_isln_sd1_i_req),
     .cnt_o(port_mux_sel_qspi0_sec_isln_sd1_i_arbitrated),
     .empty_o(port_mux_sel_qspi0_sec_isln_sd1_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_qspi0_sec_isln_sd1_i_no_connection) begin
        port_signals_pad2soc_o.qspi0_sec_isln.sd1_i = 1'b0;
     end else begin
        unique case (port_mux_sel_qspi0_sec_isln_sd1_i_arbitrated)
          PORT_MUX_GROUP_SECURE_01_SEL_SECURE_01: begin
            port_signals_pad2soc_o.qspi0_sec_isln.sd1_i = pads_to_mux_i.secure_01.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.qspi0_sec_isln.sd1_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal sd2_i
  logic [0:0] port_mux_sel_qspi0_sec_isln_sd2_i_req;
  logic [PORT_MUX_GROUP_SECURE_02_SEL_WIDTH-1:0] port_mux_sel_qspi0_sec_isln_sd2_i_arbitrated;
  logic port_mux_sel_qspi0_sec_isln_sd2_i_no_connection;

   assign port_mux_sel_qspi0_sec_isln_sd2_i_req[PORT_MUX_GROUP_SECURE_02_SEL_SECURE_02] = s_reg2hw.secure_02_mux_sel.q == PAD_MUX_GROUP_SECURE_02_SEL_QSPI0_SEC_ISLN_SDIO2 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_qspi0_sec_isln_sd2_i_arbiter (
     .in_i(port_mux_sel_qspi0_sec_isln_sd2_i_req),
     .cnt_o(port_mux_sel_qspi0_sec_isln_sd2_i_arbitrated),
     .empty_o(port_mux_sel_qspi0_sec_isln_sd2_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_qspi0_sec_isln_sd2_i_no_connection) begin
        port_signals_pad2soc_o.qspi0_sec_isln.sd2_i = 1'b0;
     end else begin
        unique case (port_mux_sel_qspi0_sec_isln_sd2_i_arbitrated)
          PORT_MUX_GROUP_SECURE_02_SEL_SECURE_02: begin
            port_signals_pad2soc_o.qspi0_sec_isln.sd2_i = pads_to_mux_i.secure_02.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.qspi0_sec_isln.sd2_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal sd3_i
  logic [0:0] port_mux_sel_qspi0_sec_isln_sd3_i_req;
  logic [PORT_MUX_GROUP_SECURE_03_SEL_WIDTH-1:0] port_mux_sel_qspi0_sec_isln_sd3_i_arbitrated;
  logic port_mux_sel_qspi0_sec_isln_sd3_i_no_connection;

   assign port_mux_sel_qspi0_sec_isln_sd3_i_req[PORT_MUX_GROUP_SECURE_03_SEL_SECURE_03] = s_reg2hw.secure_03_mux_sel.q == PAD_MUX_GROUP_SECURE_03_SEL_QSPI0_SEC_ISLN_SDIO3 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_qspi0_sec_isln_sd3_i_arbiter (
     .in_i(port_mux_sel_qspi0_sec_isln_sd3_i_req),
     .cnt_o(port_mux_sel_qspi0_sec_isln_sd3_i_arbitrated),
     .empty_o(port_mux_sel_qspi0_sec_isln_sd3_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_qspi0_sec_isln_sd3_i_no_connection) begin
        port_signals_pad2soc_o.qspi0_sec_isln.sd3_i = 1'b0;
     end else begin
        unique case (port_mux_sel_qspi0_sec_isln_sd3_i_arbitrated)
          PORT_MUX_GROUP_SECURE_03_SEL_SECURE_03: begin
            port_signals_pad2soc_o.qspi0_sec_isln.sd3_i = pads_to_mux_i.secure_03.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.qspi0_sec_isln.sd3_i = 1'b0;
          end
       endcase
     end
   end



  // Port Group uart1_sec_isln

  // Port Signal rx_i
  logic [0:0] port_mux_sel_uart1_sec_isln_rx_i_req;
  logic [PORT_MUX_GROUP_SECURE_06_SEL_WIDTH-1:0] port_mux_sel_uart1_sec_isln_rx_i_arbitrated;
  logic port_mux_sel_uart1_sec_isln_rx_i_no_connection;

   assign port_mux_sel_uart1_sec_isln_rx_i_req[PORT_MUX_GROUP_SECURE_06_SEL_SECURE_06] = s_reg2hw.secure_06_mux_sel.q == PAD_MUX_GROUP_SECURE_06_SEL_UART1_SEC_ISLN_RX ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_uart1_sec_isln_rx_i_arbiter (
     .in_i(port_mux_sel_uart1_sec_isln_rx_i_req),
     .cnt_o(port_mux_sel_uart1_sec_isln_rx_i_arbitrated),
     .empty_o(port_mux_sel_uart1_sec_isln_rx_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_uart1_sec_isln_rx_i_no_connection) begin
        port_signals_pad2soc_o.uart1_sec_isln.rx_i = 1'b1;
     end else begin
        unique case (port_mux_sel_uart1_sec_isln_rx_i_arbitrated)
          PORT_MUX_GROUP_SECURE_06_SEL_SECURE_06: begin
            port_signals_pad2soc_o.uart1_sec_isln.rx_i = pads_to_mux_i.secure_06.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.uart1_sec_isln.rx_i = 1'b1;
          end
       endcase
     end
   end


  // Port Group can0


  // Port Signal rx_o
  logic [0:0] port_mux_sel_can0_rx_o_req;
  logic [PORT_MUX_GROUP_PERIPH_01_SEL_WIDTH-1:0] port_mux_sel_can0_rx_o_arbitrated;
  logic port_mux_sel_can0_rx_o_no_connection;

   assign port_mux_sel_can0_rx_o_req[PORT_MUX_GROUP_PERIPH_01_SEL_PERIPH_01] = s_reg2hw.periph_01_mux_sel.q == PAD_MUX_GROUP_PERIPH_01_SEL_CAN0_RX ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_can0_rx_o_arbiter (
     .in_i(port_mux_sel_can0_rx_o_req),
     .cnt_o(port_mux_sel_can0_rx_o_arbitrated),
     .empty_o(port_mux_sel_can0_rx_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_can0_rx_o_no_connection) begin
        port_signals_pad2soc_o.can0.rx_o = 1'b1;
     end else begin
        unique case (port_mux_sel_can0_rx_o_arbitrated)
          PORT_MUX_GROUP_PERIPH_01_SEL_PERIPH_01: begin
            port_signals_pad2soc_o.can0.rx_o = pads_to_mux_i.periph_01.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.can0.rx_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group ethernet









  // Port Signal eth_md_o
  logic [0:0] port_mux_sel_ethernet_eth_md_o_req;
  logic [PORT_MUX_GROUP_PERIPH_10_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_md_o_arbitrated;
  logic port_mux_sel_ethernet_eth_md_o_no_connection;

   assign port_mux_sel_ethernet_eth_md_o_req[PORT_MUX_GROUP_PERIPH_10_SEL_PERIPH_10] = s_reg2hw.periph_10_mux_sel.q == PAD_MUX_GROUP_PERIPH_10_SEL_ETHERNET_ETH_MDIO ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_md_o_arbiter (
     .in_i(port_mux_sel_ethernet_eth_md_o_req),
     .cnt_o(port_mux_sel_ethernet_eth_md_o_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_md_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_md_o_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_md_o = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_md_o_arbitrated)
          PORT_MUX_GROUP_PERIPH_10_SEL_PERIPH_10: begin
            port_signals_pad2soc_o.ethernet.eth_md_o = pads_to_mux_i.periph_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_md_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxck_o
  logic [0:0] port_mux_sel_ethernet_eth_rxck_o_req;
  logic [PORT_MUX_GROUP_PERIPH_11_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_rxck_o_arbitrated;
  logic port_mux_sel_ethernet_eth_rxck_o_no_connection;

   assign port_mux_sel_ethernet_eth_rxck_o_req[PORT_MUX_GROUP_PERIPH_11_SEL_PERIPH_11] = s_reg2hw.periph_11_mux_sel.q == PAD_MUX_GROUP_PERIPH_11_SEL_ETHERNET_ETH_RXCK ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_rxck_o_arbiter (
     .in_i(port_mux_sel_ethernet_eth_rxck_o_req),
     .cnt_o(port_mux_sel_ethernet_eth_rxck_o_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_rxck_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_rxck_o_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_rxck_o = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_rxck_o_arbitrated)
          PORT_MUX_GROUP_PERIPH_11_SEL_PERIPH_11: begin
            port_signals_pad2soc_o.ethernet.eth_rxck_o = pads_to_mux_i.periph_11.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_rxck_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxctl_o
  logic [0:0] port_mux_sel_ethernet_eth_rxctl_o_req;
  logic [PORT_MUX_GROUP_PERIPH_12_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_rxctl_o_arbitrated;
  logic port_mux_sel_ethernet_eth_rxctl_o_no_connection;

   assign port_mux_sel_ethernet_eth_rxctl_o_req[PORT_MUX_GROUP_PERIPH_12_SEL_PERIPH_12] = s_reg2hw.periph_12_mux_sel.q == PAD_MUX_GROUP_PERIPH_12_SEL_ETHERNET_ETH_RXCTL ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_rxctl_o_arbiter (
     .in_i(port_mux_sel_ethernet_eth_rxctl_o_req),
     .cnt_o(port_mux_sel_ethernet_eth_rxctl_o_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_rxctl_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_rxctl_o_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_rxctl_o = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_rxctl_o_arbitrated)
          PORT_MUX_GROUP_PERIPH_12_SEL_PERIPH_12: begin
            port_signals_pad2soc_o.ethernet.eth_rxctl_o = pads_to_mux_i.periph_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_rxctl_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxd0_o
  logic [0:0] port_mux_sel_ethernet_eth_rxd0_o_req;
  logic [PORT_MUX_GROUP_PERIPH_13_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_rxd0_o_arbitrated;
  logic port_mux_sel_ethernet_eth_rxd0_o_no_connection;

   assign port_mux_sel_ethernet_eth_rxd0_o_req[PORT_MUX_GROUP_PERIPH_13_SEL_PERIPH_13] = s_reg2hw.periph_13_mux_sel.q == PAD_MUX_GROUP_PERIPH_13_SEL_ETHERNET_ETH_RXD0 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_rxd0_o_arbiter (
     .in_i(port_mux_sel_ethernet_eth_rxd0_o_req),
     .cnt_o(port_mux_sel_ethernet_eth_rxd0_o_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_rxd0_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_rxd0_o_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_rxd0_o = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_rxd0_o_arbitrated)
          PORT_MUX_GROUP_PERIPH_13_SEL_PERIPH_13: begin
            port_signals_pad2soc_o.ethernet.eth_rxd0_o = pads_to_mux_i.periph_13.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_rxd0_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxd1_o
  logic [0:0] port_mux_sel_ethernet_eth_rxd1_o_req;
  logic [PORT_MUX_GROUP_PERIPH_14_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_rxd1_o_arbitrated;
  logic port_mux_sel_ethernet_eth_rxd1_o_no_connection;

   assign port_mux_sel_ethernet_eth_rxd1_o_req[PORT_MUX_GROUP_PERIPH_14_SEL_PERIPH_14] = s_reg2hw.periph_14_mux_sel.q == PAD_MUX_GROUP_PERIPH_14_SEL_ETHERNET_ETH_RXD1 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_rxd1_o_arbiter (
     .in_i(port_mux_sel_ethernet_eth_rxd1_o_req),
     .cnt_o(port_mux_sel_ethernet_eth_rxd1_o_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_rxd1_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_rxd1_o_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_rxd1_o = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_rxd1_o_arbitrated)
          PORT_MUX_GROUP_PERIPH_14_SEL_PERIPH_14: begin
            port_signals_pad2soc_o.ethernet.eth_rxd1_o = pads_to_mux_i.periph_14.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_rxd1_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxd2_o
  logic [0:0] port_mux_sel_ethernet_eth_rxd2_o_req;
  logic [PORT_MUX_GROUP_PERIPH_15_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_rxd2_o_arbitrated;
  logic port_mux_sel_ethernet_eth_rxd2_o_no_connection;

   assign port_mux_sel_ethernet_eth_rxd2_o_req[PORT_MUX_GROUP_PERIPH_15_SEL_PERIPH_15] = s_reg2hw.periph_15_mux_sel.q == PAD_MUX_GROUP_PERIPH_15_SEL_ETHERNET_ETH_RXD2 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_rxd2_o_arbiter (
     .in_i(port_mux_sel_ethernet_eth_rxd2_o_req),
     .cnt_o(port_mux_sel_ethernet_eth_rxd2_o_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_rxd2_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_rxd2_o_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_rxd2_o = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_rxd2_o_arbitrated)
          PORT_MUX_GROUP_PERIPH_15_SEL_PERIPH_15: begin
            port_signals_pad2soc_o.ethernet.eth_rxd2_o = pads_to_mux_i.periph_15.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_rxd2_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxd3_o
  logic [0:0] port_mux_sel_ethernet_eth_rxd3_o_req;
  logic [PORT_MUX_GROUP_PERIPH_16_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_rxd3_o_arbitrated;
  logic port_mux_sel_ethernet_eth_rxd3_o_no_connection;

   assign port_mux_sel_ethernet_eth_rxd3_o_req[PORT_MUX_GROUP_PERIPH_16_SEL_PERIPH_16] = s_reg2hw.periph_16_mux_sel.q == PAD_MUX_GROUP_PERIPH_16_SEL_ETHERNET_ETH_RXD3 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_rxd3_o_arbiter (
     .in_i(port_mux_sel_ethernet_eth_rxd3_o_req),
     .cnt_o(port_mux_sel_ethernet_eth_rxd3_o_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_rxd3_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_rxd3_o_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_rxd3_o = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_rxd3_o_arbitrated)
          PORT_MUX_GROUP_PERIPH_16_SEL_PERIPH_16: begin
            port_signals_pad2soc_o.ethernet.eth_rxd3_o = pads_to_mux_i.periph_16.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_rxd3_o = 1'b0;
          end
       endcase
     end
   end

  // Port Group gpio

  // Port Signal gpio00_in
  logic [0:0] port_mux_sel_gpio_gpio00_in_req;
  logic [PORT_MUX_GROUP_GPIO_00_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio00_in_arbitrated;
  logic port_mux_sel_gpio_gpio00_in_no_connection;

   assign port_mux_sel_gpio_gpio00_in_req[PORT_MUX_GROUP_GPIO_00_SEL_GPIO_00] = s_reg2hw.gpio_00_mux_sel.q == PAD_MUX_GROUP_GPIO_00_SEL_GPIO_GPIO00 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio00_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio00_in_req),
     .cnt_o(port_mux_sel_gpio_gpio00_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio00_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio00_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio00_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio00_in_arbitrated)
          PORT_MUX_GROUP_GPIO_00_SEL_GPIO_00: begin
            port_signals_pad2soc_o.gpio.gpio00_in = pads_to_mux_i.gpio_00.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio00_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio01_in
  logic [0:0] port_mux_sel_gpio_gpio01_in_req;
  logic [PORT_MUX_GROUP_GPIO_01_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio01_in_arbitrated;
  logic port_mux_sel_gpio_gpio01_in_no_connection;

   assign port_mux_sel_gpio_gpio01_in_req[PORT_MUX_GROUP_GPIO_01_SEL_GPIO_01] = s_reg2hw.gpio_01_mux_sel.q == PAD_MUX_GROUP_GPIO_01_SEL_GPIO_GPIO01 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio01_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio01_in_req),
     .cnt_o(port_mux_sel_gpio_gpio01_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio01_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio01_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio01_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio01_in_arbitrated)
          PORT_MUX_GROUP_GPIO_01_SEL_GPIO_01: begin
            port_signals_pad2soc_o.gpio.gpio01_in = pads_to_mux_i.gpio_01.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio01_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio02_in
  logic [0:0] port_mux_sel_gpio_gpio02_in_req;
  logic [PORT_MUX_GROUP_GPIO_02_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio02_in_arbitrated;
  logic port_mux_sel_gpio_gpio02_in_no_connection;

   assign port_mux_sel_gpio_gpio02_in_req[PORT_MUX_GROUP_GPIO_02_SEL_GPIO_02] = s_reg2hw.gpio_02_mux_sel.q == PAD_MUX_GROUP_GPIO_02_SEL_GPIO_GPIO02 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio02_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio02_in_req),
     .cnt_o(port_mux_sel_gpio_gpio02_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio02_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio02_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio02_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio02_in_arbitrated)
          PORT_MUX_GROUP_GPIO_02_SEL_GPIO_02: begin
            port_signals_pad2soc_o.gpio.gpio02_in = pads_to_mux_i.gpio_02.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio02_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio03_in
  logic [0:0] port_mux_sel_gpio_gpio03_in_req;
  logic [PORT_MUX_GROUP_GPIO_03_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio03_in_arbitrated;
  logic port_mux_sel_gpio_gpio03_in_no_connection;

   assign port_mux_sel_gpio_gpio03_in_req[PORT_MUX_GROUP_GPIO_03_SEL_GPIO_03] = s_reg2hw.gpio_03_mux_sel.q == PAD_MUX_GROUP_GPIO_03_SEL_GPIO_GPIO03 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio03_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio03_in_req),
     .cnt_o(port_mux_sel_gpio_gpio03_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio03_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio03_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio03_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio03_in_arbitrated)
          PORT_MUX_GROUP_GPIO_03_SEL_GPIO_03: begin
            port_signals_pad2soc_o.gpio.gpio03_in = pads_to_mux_i.gpio_03.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio03_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio04_in
  logic [0:0] port_mux_sel_gpio_gpio04_in_req;
  logic [PORT_MUX_GROUP_GPIO_04_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio04_in_arbitrated;
  logic port_mux_sel_gpio_gpio04_in_no_connection;

   assign port_mux_sel_gpio_gpio04_in_req[PORT_MUX_GROUP_GPIO_04_SEL_GPIO_04] = s_reg2hw.gpio_04_mux_sel.q == PAD_MUX_GROUP_GPIO_04_SEL_GPIO_GPIO04 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio04_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio04_in_req),
     .cnt_o(port_mux_sel_gpio_gpio04_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio04_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio04_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio04_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio04_in_arbitrated)
          PORT_MUX_GROUP_GPIO_04_SEL_GPIO_04: begin
            port_signals_pad2soc_o.gpio.gpio04_in = pads_to_mux_i.gpio_04.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio04_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio05_in
  logic [0:0] port_mux_sel_gpio_gpio05_in_req;
  logic [PORT_MUX_GROUP_GPIO_05_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio05_in_arbitrated;
  logic port_mux_sel_gpio_gpio05_in_no_connection;

   assign port_mux_sel_gpio_gpio05_in_req[PORT_MUX_GROUP_GPIO_05_SEL_GPIO_05] = s_reg2hw.gpio_05_mux_sel.q == PAD_MUX_GROUP_GPIO_05_SEL_GPIO_GPIO05 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio05_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio05_in_req),
     .cnt_o(port_mux_sel_gpio_gpio05_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio05_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio05_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio05_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio05_in_arbitrated)
          PORT_MUX_GROUP_GPIO_05_SEL_GPIO_05: begin
            port_signals_pad2soc_o.gpio.gpio05_in = pads_to_mux_i.gpio_05.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio05_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio06_in
  logic [0:0] port_mux_sel_gpio_gpio06_in_req;
  logic [PORT_MUX_GROUP_GPIO_06_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio06_in_arbitrated;
  logic port_mux_sel_gpio_gpio06_in_no_connection;

   assign port_mux_sel_gpio_gpio06_in_req[PORT_MUX_GROUP_GPIO_06_SEL_GPIO_06] = s_reg2hw.gpio_06_mux_sel.q == PAD_MUX_GROUP_GPIO_06_SEL_GPIO_GPIO06 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio06_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio06_in_req),
     .cnt_o(port_mux_sel_gpio_gpio06_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio06_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio06_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio06_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio06_in_arbitrated)
          PORT_MUX_GROUP_GPIO_06_SEL_GPIO_06: begin
            port_signals_pad2soc_o.gpio.gpio06_in = pads_to_mux_i.gpio_06.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio06_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio07_in
  logic [0:0] port_mux_sel_gpio_gpio07_in_req;
  logic [PORT_MUX_GROUP_GPIO_07_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio07_in_arbitrated;
  logic port_mux_sel_gpio_gpio07_in_no_connection;

   assign port_mux_sel_gpio_gpio07_in_req[PORT_MUX_GROUP_GPIO_07_SEL_GPIO_07] = s_reg2hw.gpio_07_mux_sel.q == PAD_MUX_GROUP_GPIO_07_SEL_GPIO_GPIO07 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio07_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio07_in_req),
     .cnt_o(port_mux_sel_gpio_gpio07_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio07_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio07_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio07_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio07_in_arbitrated)
          PORT_MUX_GROUP_GPIO_07_SEL_GPIO_07: begin
            port_signals_pad2soc_o.gpio.gpio07_in = pads_to_mux_i.gpio_07.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio07_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio08_in
  logic [0:0] port_mux_sel_gpio_gpio08_in_req;
  logic [PORT_MUX_GROUP_GPIO_08_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio08_in_arbitrated;
  logic port_mux_sel_gpio_gpio08_in_no_connection;

   assign port_mux_sel_gpio_gpio08_in_req[PORT_MUX_GROUP_GPIO_08_SEL_GPIO_08] = s_reg2hw.gpio_08_mux_sel.q == PAD_MUX_GROUP_GPIO_08_SEL_GPIO_GPIO08 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio08_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio08_in_req),
     .cnt_o(port_mux_sel_gpio_gpio08_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio08_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio08_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio08_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio08_in_arbitrated)
          PORT_MUX_GROUP_GPIO_08_SEL_GPIO_08: begin
            port_signals_pad2soc_o.gpio.gpio08_in = pads_to_mux_i.gpio_08.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio08_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio09_in
  logic [0:0] port_mux_sel_gpio_gpio09_in_req;
  logic [PORT_MUX_GROUP_GPIO_09_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio09_in_arbitrated;
  logic port_mux_sel_gpio_gpio09_in_no_connection;

   assign port_mux_sel_gpio_gpio09_in_req[PORT_MUX_GROUP_GPIO_09_SEL_GPIO_09] = s_reg2hw.gpio_09_mux_sel.q == PAD_MUX_GROUP_GPIO_09_SEL_GPIO_GPIO09 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio09_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio09_in_req),
     .cnt_o(port_mux_sel_gpio_gpio09_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio09_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio09_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio09_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio09_in_arbitrated)
          PORT_MUX_GROUP_GPIO_09_SEL_GPIO_09: begin
            port_signals_pad2soc_o.gpio.gpio09_in = pads_to_mux_i.gpio_09.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio09_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio10_in
  logic [0:0] port_mux_sel_gpio_gpio10_in_req;
  logic [PORT_MUX_GROUP_GPIO_10_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio10_in_arbitrated;
  logic port_mux_sel_gpio_gpio10_in_no_connection;

   assign port_mux_sel_gpio_gpio10_in_req[PORT_MUX_GROUP_GPIO_10_SEL_GPIO_10] = s_reg2hw.gpio_10_mux_sel.q == PAD_MUX_GROUP_GPIO_10_SEL_GPIO_GPIO10 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio10_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio10_in_req),
     .cnt_o(port_mux_sel_gpio_gpio10_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio10_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio10_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio10_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio10_in_arbitrated)
          PORT_MUX_GROUP_GPIO_10_SEL_GPIO_10: begin
            port_signals_pad2soc_o.gpio.gpio10_in = pads_to_mux_i.gpio_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio10_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio11_in
  logic [0:0] port_mux_sel_gpio_gpio11_in_req;
  logic [PORT_MUX_GROUP_GPIO_11_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio11_in_arbitrated;
  logic port_mux_sel_gpio_gpio11_in_no_connection;

   assign port_mux_sel_gpio_gpio11_in_req[PORT_MUX_GROUP_GPIO_11_SEL_GPIO_11] = s_reg2hw.gpio_11_mux_sel.q == PAD_MUX_GROUP_GPIO_11_SEL_GPIO_GPIO11 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio11_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio11_in_req),
     .cnt_o(port_mux_sel_gpio_gpio11_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio11_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio11_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio11_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio11_in_arbitrated)
          PORT_MUX_GROUP_GPIO_11_SEL_GPIO_11: begin
            port_signals_pad2soc_o.gpio.gpio11_in = pads_to_mux_i.gpio_11.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio11_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio12_in
  logic [0:0] port_mux_sel_gpio_gpio12_in_req;
  logic [PORT_MUX_GROUP_GPIO_12_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio12_in_arbitrated;
  logic port_mux_sel_gpio_gpio12_in_no_connection;

   assign port_mux_sel_gpio_gpio12_in_req[PORT_MUX_GROUP_GPIO_12_SEL_GPIO_12] = s_reg2hw.gpio_12_mux_sel.q == PAD_MUX_GROUP_GPIO_12_SEL_GPIO_GPIO12 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio12_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio12_in_req),
     .cnt_o(port_mux_sel_gpio_gpio12_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio12_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio12_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio12_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio12_in_arbitrated)
          PORT_MUX_GROUP_GPIO_12_SEL_GPIO_12: begin
            port_signals_pad2soc_o.gpio.gpio12_in = pads_to_mux_i.gpio_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio12_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio13_in
  logic [0:0] port_mux_sel_gpio_gpio13_in_req;
  logic [PORT_MUX_GROUP_GPIO_13_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio13_in_arbitrated;
  logic port_mux_sel_gpio_gpio13_in_no_connection;

   assign port_mux_sel_gpio_gpio13_in_req[PORT_MUX_GROUP_GPIO_13_SEL_GPIO_13] = s_reg2hw.gpio_13_mux_sel.q == PAD_MUX_GROUP_GPIO_13_SEL_GPIO_GPIO13 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio13_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio13_in_req),
     .cnt_o(port_mux_sel_gpio_gpio13_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio13_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio13_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio13_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio13_in_arbitrated)
          PORT_MUX_GROUP_GPIO_13_SEL_GPIO_13: begin
            port_signals_pad2soc_o.gpio.gpio13_in = pads_to_mux_i.gpio_13.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio13_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio14_in
  logic [0:0] port_mux_sel_gpio_gpio14_in_req;
  logic [PORT_MUX_GROUP_GPIO_14_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio14_in_arbitrated;
  logic port_mux_sel_gpio_gpio14_in_no_connection;

   assign port_mux_sel_gpio_gpio14_in_req[PORT_MUX_GROUP_GPIO_14_SEL_GPIO_14] = s_reg2hw.gpio_14_mux_sel.q == PAD_MUX_GROUP_GPIO_14_SEL_GPIO_GPIO14 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio14_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio14_in_req),
     .cnt_o(port_mux_sel_gpio_gpio14_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio14_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio14_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio14_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio14_in_arbitrated)
          PORT_MUX_GROUP_GPIO_14_SEL_GPIO_14: begin
            port_signals_pad2soc_o.gpio.gpio14_in = pads_to_mux_i.gpio_14.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio14_in = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio15_in
  logic [0:0] port_mux_sel_gpio_gpio15_in_req;
  logic [PORT_MUX_GROUP_GPIO_15_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio15_in_arbitrated;
  logic port_mux_sel_gpio_gpio15_in_no_connection;

   assign port_mux_sel_gpio_gpio15_in_req[PORT_MUX_GROUP_GPIO_15_SEL_GPIO_15] = s_reg2hw.gpio_15_mux_sel.q == PAD_MUX_GROUP_GPIO_15_SEL_GPIO_GPIO15 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio15_in_arbiter (
     .in_i(port_mux_sel_gpio_gpio15_in_req),
     .cnt_o(port_mux_sel_gpio_gpio15_in_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio15_in_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio15_in_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio15_in = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio15_in_arbitrated)
          PORT_MUX_GROUP_GPIO_15_SEL_GPIO_15: begin
            port_signals_pad2soc_o.gpio.gpio15_in = pads_to_mux_i.gpio_15.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio15_in = 1'b0;
          end
       endcase
     end
   end

  // Port Group jtag_pll0

  // Port Signal tck_i
  logic [0:0] port_mux_sel_jtag_pll0_tck_i_req;
  logic [PORT_MUX_GROUP_JTAG_PLL_00_SEL_WIDTH-1:0] port_mux_sel_jtag_pll0_tck_i_arbitrated;
  logic port_mux_sel_jtag_pll0_tck_i_no_connection;

   assign port_mux_sel_jtag_pll0_tck_i_req[PORT_MUX_GROUP_JTAG_PLL_00_SEL_JTAG_PLL_00] = s_reg2hw.jtag_pll_00_mux_sel.q == PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_00_SEL_JTAG_PLL0_TCK ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_jtag_pll0_tck_i_arbiter (
     .in_i(port_mux_sel_jtag_pll0_tck_i_req),
     .cnt_o(port_mux_sel_jtag_pll0_tck_i_arbitrated),
     .empty_o(port_mux_sel_jtag_pll0_tck_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_jtag_pll0_tck_i_no_connection) begin
        port_signals_pad2soc_o.jtag_pll0.tck_i = 1'b0;
     end else begin
        unique case (port_mux_sel_jtag_pll0_tck_i_arbitrated)
          PORT_MUX_GROUP_JTAG_PLL_00_SEL_JTAG_PLL_00: begin
            port_signals_pad2soc_o.jtag_pll0.tck_i = pads_to_mux_i.jtag_pll_00.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.jtag_pll0.tck_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal tms_i
  logic [0:0] port_mux_sel_jtag_pll0_tms_i_req;
  logic [PORT_MUX_GROUP_JTAG_PLL_01_SEL_WIDTH-1:0] port_mux_sel_jtag_pll0_tms_i_arbitrated;
  logic port_mux_sel_jtag_pll0_tms_i_no_connection;

   assign port_mux_sel_jtag_pll0_tms_i_req[PORT_MUX_GROUP_JTAG_PLL_01_SEL_JTAG_PLL_01] = s_reg2hw.jtag_pll_01_mux_sel.q == PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_01_SEL_JTAG_PLL0_TMS ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_jtag_pll0_tms_i_arbiter (
     .in_i(port_mux_sel_jtag_pll0_tms_i_req),
     .cnt_o(port_mux_sel_jtag_pll0_tms_i_arbitrated),
     .empty_o(port_mux_sel_jtag_pll0_tms_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_jtag_pll0_tms_i_no_connection) begin
        port_signals_pad2soc_o.jtag_pll0.tms_i = 1'b0;
     end else begin
        unique case (port_mux_sel_jtag_pll0_tms_i_arbitrated)
          PORT_MUX_GROUP_JTAG_PLL_01_SEL_JTAG_PLL_01: begin
            port_signals_pad2soc_o.jtag_pll0.tms_i = pads_to_mux_i.jtag_pll_01.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.jtag_pll0.tms_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal tdi_i
  logic [0:0] port_mux_sel_jtag_pll0_tdi_i_req;
  logic [PORT_MUX_GROUP_JTAG_PLL_02_SEL_WIDTH-1:0] port_mux_sel_jtag_pll0_tdi_i_arbitrated;
  logic port_mux_sel_jtag_pll0_tdi_i_no_connection;

   assign port_mux_sel_jtag_pll0_tdi_i_req[PORT_MUX_GROUP_JTAG_PLL_02_SEL_JTAG_PLL_02] = s_reg2hw.jtag_pll_02_mux_sel.q == PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_02_SEL_JTAG_PLL0_TDI ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_jtag_pll0_tdi_i_arbiter (
     .in_i(port_mux_sel_jtag_pll0_tdi_i_req),
     .cnt_o(port_mux_sel_jtag_pll0_tdi_i_arbitrated),
     .empty_o(port_mux_sel_jtag_pll0_tdi_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_jtag_pll0_tdi_i_no_connection) begin
        port_signals_pad2soc_o.jtag_pll0.tdi_i = 1'b0;
     end else begin
        unique case (port_mux_sel_jtag_pll0_tdi_i_arbitrated)
          PORT_MUX_GROUP_JTAG_PLL_02_SEL_JTAG_PLL_02: begin
            port_signals_pad2soc_o.jtag_pll0.tdi_i = pads_to_mux_i.jtag_pll_02.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.jtag_pll0.tdi_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal trstn_i
  logic [0:0] port_mux_sel_jtag_pll0_trstn_i_req;
  logic [PORT_MUX_GROUP_JTAG_PLL_03_SEL_WIDTH-1:0] port_mux_sel_jtag_pll0_trstn_i_arbitrated;
  logic port_mux_sel_jtag_pll0_trstn_i_no_connection;

   assign port_mux_sel_jtag_pll0_trstn_i_req[PORT_MUX_GROUP_JTAG_PLL_03_SEL_JTAG_PLL_03] = s_reg2hw.jtag_pll_03_mux_sel.q == PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_03_SEL_JTAG_PLL0_TRSTN ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_jtag_pll0_trstn_i_arbiter (
     .in_i(port_mux_sel_jtag_pll0_trstn_i_req),
     .cnt_o(port_mux_sel_jtag_pll0_trstn_i_arbitrated),
     .empty_o(port_mux_sel_jtag_pll0_trstn_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_jtag_pll0_trstn_i_no_connection) begin
        port_signals_pad2soc_o.jtag_pll0.trstn_i = 1'b0;
     end else begin
        unique case (port_mux_sel_jtag_pll0_trstn_i_arbitrated)
          PORT_MUX_GROUP_JTAG_PLL_03_SEL_JTAG_PLL_03: begin
            port_signals_pad2soc_o.jtag_pll0.trstn_i = pads_to_mux_i.jtag_pll_03.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.jtag_pll0.trstn_i = 1'b0;
          end
       endcase
     end
   end


  // Port Group jtag_pll1

  // Port Signal tck_i
  logic [0:0] port_mux_sel_jtag_pll1_tck_i_req;
  logic [PORT_MUX_GROUP_JTAG_PLL_00_SEL_WIDTH-1:0] port_mux_sel_jtag_pll1_tck_i_arbitrated;
  logic port_mux_sel_jtag_pll1_tck_i_no_connection;

   assign port_mux_sel_jtag_pll1_tck_i_req[PORT_MUX_GROUP_JTAG_PLL_00_SEL_JTAG_PLL_00] = s_reg2hw.jtag_pll_00_mux_sel.q == PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_00_SEL_JTAG_PLL1_TCK ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_jtag_pll1_tck_i_arbiter (
     .in_i(port_mux_sel_jtag_pll1_tck_i_req),
     .cnt_o(port_mux_sel_jtag_pll1_tck_i_arbitrated),
     .empty_o(port_mux_sel_jtag_pll1_tck_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_jtag_pll1_tck_i_no_connection) begin
        port_signals_pad2soc_o.jtag_pll1.tck_i = 1'b0;
     end else begin
        unique case (port_mux_sel_jtag_pll1_tck_i_arbitrated)
          PORT_MUX_GROUP_JTAG_PLL_00_SEL_JTAG_PLL_00: begin
            port_signals_pad2soc_o.jtag_pll1.tck_i = pads_to_mux_i.jtag_pll_00.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.jtag_pll1.tck_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal tms_i
  logic [0:0] port_mux_sel_jtag_pll1_tms_i_req;
  logic [PORT_MUX_GROUP_JTAG_PLL_01_SEL_WIDTH-1:0] port_mux_sel_jtag_pll1_tms_i_arbitrated;
  logic port_mux_sel_jtag_pll1_tms_i_no_connection;

   assign port_mux_sel_jtag_pll1_tms_i_req[PORT_MUX_GROUP_JTAG_PLL_01_SEL_JTAG_PLL_01] = s_reg2hw.jtag_pll_01_mux_sel.q == PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_01_SEL_JTAG_PLL1_TMS ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_jtag_pll1_tms_i_arbiter (
     .in_i(port_mux_sel_jtag_pll1_tms_i_req),
     .cnt_o(port_mux_sel_jtag_pll1_tms_i_arbitrated),
     .empty_o(port_mux_sel_jtag_pll1_tms_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_jtag_pll1_tms_i_no_connection) begin
        port_signals_pad2soc_o.jtag_pll1.tms_i = 1'b0;
     end else begin
        unique case (port_mux_sel_jtag_pll1_tms_i_arbitrated)
          PORT_MUX_GROUP_JTAG_PLL_01_SEL_JTAG_PLL_01: begin
            port_signals_pad2soc_o.jtag_pll1.tms_i = pads_to_mux_i.jtag_pll_01.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.jtag_pll1.tms_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal tdi_i
  logic [0:0] port_mux_sel_jtag_pll1_tdi_i_req;
  logic [PORT_MUX_GROUP_JTAG_PLL_02_SEL_WIDTH-1:0] port_mux_sel_jtag_pll1_tdi_i_arbitrated;
  logic port_mux_sel_jtag_pll1_tdi_i_no_connection;

   assign port_mux_sel_jtag_pll1_tdi_i_req[PORT_MUX_GROUP_JTAG_PLL_02_SEL_JTAG_PLL_02] = s_reg2hw.jtag_pll_02_mux_sel.q == PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_02_SEL_JTAG_PLL1_TDI ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_jtag_pll1_tdi_i_arbiter (
     .in_i(port_mux_sel_jtag_pll1_tdi_i_req),
     .cnt_o(port_mux_sel_jtag_pll1_tdi_i_arbitrated),
     .empty_o(port_mux_sel_jtag_pll1_tdi_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_jtag_pll1_tdi_i_no_connection) begin
        port_signals_pad2soc_o.jtag_pll1.tdi_i = 1'b0;
     end else begin
        unique case (port_mux_sel_jtag_pll1_tdi_i_arbitrated)
          PORT_MUX_GROUP_JTAG_PLL_02_SEL_JTAG_PLL_02: begin
            port_signals_pad2soc_o.jtag_pll1.tdi_i = pads_to_mux_i.jtag_pll_02.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.jtag_pll1.tdi_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal trstn_i
  logic [0:0] port_mux_sel_jtag_pll1_trstn_i_req;
  logic [PORT_MUX_GROUP_JTAG_PLL_03_SEL_WIDTH-1:0] port_mux_sel_jtag_pll1_trstn_i_arbitrated;
  logic port_mux_sel_jtag_pll1_trstn_i_no_connection;

   assign port_mux_sel_jtag_pll1_trstn_i_req[PORT_MUX_GROUP_JTAG_PLL_03_SEL_JTAG_PLL_03] = s_reg2hw.jtag_pll_03_mux_sel.q == PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_03_SEL_JTAG_PLL1_TRSTN ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_jtag_pll1_trstn_i_arbiter (
     .in_i(port_mux_sel_jtag_pll1_trstn_i_req),
     .cnt_o(port_mux_sel_jtag_pll1_trstn_i_arbitrated),
     .empty_o(port_mux_sel_jtag_pll1_trstn_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_jtag_pll1_trstn_i_no_connection) begin
        port_signals_pad2soc_o.jtag_pll1.trstn_i = 1'b0;
     end else begin
        unique case (port_mux_sel_jtag_pll1_trstn_i_arbitrated)
          PORT_MUX_GROUP_JTAG_PLL_03_SEL_JTAG_PLL_03: begin
            port_signals_pad2soc_o.jtag_pll1.trstn_i = pads_to_mux_i.jtag_pll_03.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.jtag_pll1.trstn_i = 1'b0;
          end
       endcase
     end
   end


  // Port Group jtag_pll2

  // Port Signal tck_i
  logic [0:0] port_mux_sel_jtag_pll2_tck_i_req;
  logic [PORT_MUX_GROUP_JTAG_PLL_00_SEL_WIDTH-1:0] port_mux_sel_jtag_pll2_tck_i_arbitrated;
  logic port_mux_sel_jtag_pll2_tck_i_no_connection;

   assign port_mux_sel_jtag_pll2_tck_i_req[PORT_MUX_GROUP_JTAG_PLL_00_SEL_JTAG_PLL_00] = s_reg2hw.jtag_pll_00_mux_sel.q == PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_00_SEL_JTAG_PLL2_TCK ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_jtag_pll2_tck_i_arbiter (
     .in_i(port_mux_sel_jtag_pll2_tck_i_req),
     .cnt_o(port_mux_sel_jtag_pll2_tck_i_arbitrated),
     .empty_o(port_mux_sel_jtag_pll2_tck_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_jtag_pll2_tck_i_no_connection) begin
        port_signals_pad2soc_o.jtag_pll2.tck_i = 1'b0;
     end else begin
        unique case (port_mux_sel_jtag_pll2_tck_i_arbitrated)
          PORT_MUX_GROUP_JTAG_PLL_00_SEL_JTAG_PLL_00: begin
            port_signals_pad2soc_o.jtag_pll2.tck_i = pads_to_mux_i.jtag_pll_00.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.jtag_pll2.tck_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal tms_i
  logic [0:0] port_mux_sel_jtag_pll2_tms_i_req;
  logic [PORT_MUX_GROUP_JTAG_PLL_01_SEL_WIDTH-1:0] port_mux_sel_jtag_pll2_tms_i_arbitrated;
  logic port_mux_sel_jtag_pll2_tms_i_no_connection;

   assign port_mux_sel_jtag_pll2_tms_i_req[PORT_MUX_GROUP_JTAG_PLL_01_SEL_JTAG_PLL_01] = s_reg2hw.jtag_pll_01_mux_sel.q == PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_01_SEL_JTAG_PLL2_TMS ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_jtag_pll2_tms_i_arbiter (
     .in_i(port_mux_sel_jtag_pll2_tms_i_req),
     .cnt_o(port_mux_sel_jtag_pll2_tms_i_arbitrated),
     .empty_o(port_mux_sel_jtag_pll2_tms_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_jtag_pll2_tms_i_no_connection) begin
        port_signals_pad2soc_o.jtag_pll2.tms_i = 1'b0;
     end else begin
        unique case (port_mux_sel_jtag_pll2_tms_i_arbitrated)
          PORT_MUX_GROUP_JTAG_PLL_01_SEL_JTAG_PLL_01: begin
            port_signals_pad2soc_o.jtag_pll2.tms_i = pads_to_mux_i.jtag_pll_01.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.jtag_pll2.tms_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal tdi_i
  logic [0:0] port_mux_sel_jtag_pll2_tdi_i_req;
  logic [PORT_MUX_GROUP_JTAG_PLL_02_SEL_WIDTH-1:0] port_mux_sel_jtag_pll2_tdi_i_arbitrated;
  logic port_mux_sel_jtag_pll2_tdi_i_no_connection;

   assign port_mux_sel_jtag_pll2_tdi_i_req[PORT_MUX_GROUP_JTAG_PLL_02_SEL_JTAG_PLL_02] = s_reg2hw.jtag_pll_02_mux_sel.q == PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_02_SEL_JTAG_PLL2_TDI ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_jtag_pll2_tdi_i_arbiter (
     .in_i(port_mux_sel_jtag_pll2_tdi_i_req),
     .cnt_o(port_mux_sel_jtag_pll2_tdi_i_arbitrated),
     .empty_o(port_mux_sel_jtag_pll2_tdi_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_jtag_pll2_tdi_i_no_connection) begin
        port_signals_pad2soc_o.jtag_pll2.tdi_i = 1'b0;
     end else begin
        unique case (port_mux_sel_jtag_pll2_tdi_i_arbitrated)
          PORT_MUX_GROUP_JTAG_PLL_02_SEL_JTAG_PLL_02: begin
            port_signals_pad2soc_o.jtag_pll2.tdi_i = pads_to_mux_i.jtag_pll_02.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.jtag_pll2.tdi_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal trstn_i
  logic [0:0] port_mux_sel_jtag_pll2_trstn_i_req;
  logic [PORT_MUX_GROUP_JTAG_PLL_03_SEL_WIDTH-1:0] port_mux_sel_jtag_pll2_trstn_i_arbitrated;
  logic port_mux_sel_jtag_pll2_trstn_i_no_connection;

   assign port_mux_sel_jtag_pll2_trstn_i_req[PORT_MUX_GROUP_JTAG_PLL_03_SEL_JTAG_PLL_03] = s_reg2hw.jtag_pll_03_mux_sel.q == PAD_MUX_GROUP_JTAG_PLL_JTAG_PLL_03_SEL_JTAG_PLL2_TRSTN ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_jtag_pll2_trstn_i_arbiter (
     .in_i(port_mux_sel_jtag_pll2_trstn_i_req),
     .cnt_o(port_mux_sel_jtag_pll2_trstn_i_arbitrated),
     .empty_o(port_mux_sel_jtag_pll2_trstn_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_jtag_pll2_trstn_i_no_connection) begin
        port_signals_pad2soc_o.jtag_pll2.trstn_i = 1'b0;
     end else begin
        unique case (port_mux_sel_jtag_pll2_trstn_i_arbitrated)
          PORT_MUX_GROUP_JTAG_PLL_03_SEL_JTAG_PLL_03: begin
            port_signals_pad2soc_o.jtag_pll2.trstn_i = pads_to_mux_i.jtag_pll_03.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.jtag_pll2.trstn_i = 1'b0;
          end
       endcase
     end
   end


endmodule : carfield_padframe_behav_periph_muxer
